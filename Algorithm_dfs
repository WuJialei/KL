1.参考
1.1.dfs简述：https://oi-wiki.org/graph/dfs/
1.2.dfs题型分类及模板：https://blog.csdn.net/Chen_yuazzy/article/details/76423134
  地图型第三个，HDU1045 Fire Net（DFS回溯）：https://arminli.com/blog/23
  地图型第四个，奇偶剪枝(步数的偏移量永远为偶数-有来有回,因此可以得出：最短路径步数+偏移量（偶数）=某一可行解歩数，即最短路歩数
  和某一可行解歩数的奇偶性相同)，参考：http://www.slyar.com/blog/depth-first-search-even-odd-pruning.html

2.题型
2.1.树
2.1.1.祖父节点为偶数的所有节点值之和（leetcode [1315] Sum of Nodes with Even-Valued Grandparent）
  代码：
  class Solution {

      private int sum;

      public void dfs (TreeNode node) {
          if (node == null) {
              return;
          }
          if ((node.val & 1) == 0) {
              sum += node.left == null ? 0 : (node.left.left == null ? 0 : node.left.left.val);
              sum += node.left == null ? 0 : (node.left.right == null ? 0 : node.left.right.val);
              sum += node.right == null ? 0 : (node.right.left == null ? 0 : node.right.left.val);
              sum += node.right == null ? 0 : (node.right.right == null ? 0 : node.right.right.val);
          }
          dfs(node.left);
          dfs(node.right);
      }

      public int sumEvenGrandparent(TreeNode root) {
          sum = 0;
          dfs(root);
          return sum;
      }
  }
2.1.2.二叉树中硬币的分配（leetcode [979] Distribute Coins in Binary Tree）
  思路：https://zhanghuimeng.github.io/post/leetcode-979-distribute-coins-in-binary-tree/
  代码：
  class Solution {

      int ans;

      public int distributeCoins(TreeNode root) {
          ans = 0;
          dfs(root);
          return ans;
      }

      // dfs(node)返回node节点要给父节点的个数，可以为负数
      // dfs(node)时以node为根的树的每个节点都有且只有1
      public int dfs(TreeNode node) {
          if (node == null) {
              return 0;
          }
          int left = dfs(node.left);
          int right = dfs(node.right);
          ans += Math.abs(left) + Math.abs(right);
          int val = node.val + left + right - 1;
          return val;
      }

  }
2.1.3.通知所有员工需要的时间（leetcode [1376] Time Needed to Inform All Employees）
  思路：从问题中抽象出带全dfs路径和问题
  代码：
  class Solution {

      private int ans;
      private HashMap<Integer, ArrayList<Integer>> map;
      private int[] informTime;


      public void dfs (int cur, int cnt) {
          if (!map.containsKey(cur)) {
              ans = Math.max(ans, cnt);
              return;
          }
          for (int next : map.get(cur)) {
              dfs(next, cnt + informTime[cur]);
          }
      }

      public int numOfMinutes(int n, int headID, int[] manager, int[] informTime) {
          if (n < 2) {
              return 0;
          }
          map = new HashMap<>();
          for (int i = 0; i < manager.length; ++i) {
              if (manager[i] == -1) {
                  continue;
              }
              if (!map.containsKey(manager[i])) {
                  map.put(manager[i], new ArrayList<>());
              }
              map.get(manager[i]).add(i);
          }
          ans = 0;
          this.informTime = informTime;
          dfs(headID, 0);
          return ans;
      }
  }
2.1.4.二叉树着色输赢问题（leetcode [1145] Binary Tree Coloring Game）
  代码：
  class Solution {

      private HashMap<Integer, Integer> cntMap;
      private HashMap<Integer, TreeNode> nodeMap;

      public int dfs (TreeNode node) {
          if (node == null) {
              return 0;
          }
          nodeMap.put(node.val, node);
          int ans = 1;
          if (node.left != null) {
              ans += dfs(node.left);
          }
          if (node.right != null) {
              ans += dfs(node.right);
          }
          cntMap.put(node.val, ans);
          return ans;
      }

      public boolean btreeGameWinningMove(TreeNode root, int n, int x) {
          if (root == null) {
              return false;
          }
          // 基于贪心算法，找x节点的左、右、除去以该节点为根的其他所有节点的节点数，相当于封住了x节点的某个方向，
          // 看是否找出的节点数大于n/2
          cntMap = new HashMap<>();
          nodeMap = new HashMap<>();
          cntMap.put(root.val, n);
          nodeMap.put(root.val, root);
          dfs(root);
          if (root.val == x) {
              TreeNode cur = nodeMap.get(x);
              if (cur.left != null && cntMap.get(cur.left.val) > n/2) {
                  return true;
              }
              if (cur.right != null && cntMap.get(cur.right.val) > n/2) {
                  return true;
              }
              return false;
          } else {
              TreeNode cur = nodeMap.get(x);
              if (n - cntMap.get(cur.val) > n/2) {
                  return true;
              }
              if (cur.left != null && cntMap.get(cur.left.val) > n/2) {
                  return true;
              }
              if (cur.right != null && cntMap.get(cur.right.val) > n/2) {
                  return true;
              }
              return false;
          }
      }
  }
  
2.2.数组
2.2.1.朋友圈（leetcode [547] Friend Circles）
  代码：
  class Solution {

      private int[][] graph;
      private int n;
      private boolean[] visited;

      public void dfs (int index) {
          for (int next = 0; next < n; ++next) {
              if (graph[index][next] == 1 && !visited[next]) {
                  visited[next] = true;
                  dfs(next);
              }
          }
      }

      public int findCircleNum(int[][] M) {
          if (M == null || M.length < 1 || M[0].length < 1) {
              return 0;
          }
          graph = M;
          n = graph.length;
          int ans = 0;
          visited = new boolean[n];
          for (int i = 0; i < n; ++i) {            
              if (!visited[i]) {
                  visited[i] = true;
                  dfs(i);
                  ++ans;
              }
          }
          return ans;

      }
  }
2.2.2.飞地的数量（leetcode [1020] Number of Enclaves）
  代码：
  class Solution {

      private int[][] graph;
      private int m;
      private int n;
      private int ans;
      private boolean[][] visited;
      private int[] dx = {1, -1, 0, 0};
      private int[] dy = {0, 0, -1, 1};

      public int dfs (int x, int y) {
          if (x < 0 || x >= m || y < 0 || y >= n) {
              return -1;
          }
          if (graph[x][y] == 0 || visited[x][y]) {
              return 0;
          }
          int ret = 0;
          int cnt = 1;
          visited[x][y] = true;
          for (int i = 0; i < dx.length; ++i) {
              int next = dfs(x + dx[i], y + dy[i]);
              if (next == -1) {
                  ret = -1;
              } else {
                  cnt += next;
              }
          }
          return ret == -1 ? ret : cnt;
      }

      public int numEnclaves(int[][] A) {
          if (A == null || A.length < 1 || A[0].length < 1) {
              return 0;
          }
          graph = A;
          m = A.length;
          n = A[0].length;
          ans = 0;
          visited = new boolean[m][n];
          for (int i = 0; i < m; ++i) {
              for (int j = 0; j < n; ++j) {
                  if (graph[i][j] == 1 && !visited[i][j]) {
                      int tmp = dfs(i, j);
                      ans += tmp < 0 ? 0 : tmp;
                  }
              }
          }
          return ans;
      }
  }
  
2.3.抽象出模型
2.3.1.金字塔转换矩阵（leetcode [756] Pyramid Transition Matrix）
  思路：按层递归
  代码：
  class Solution {

      private List<String> allowed;

      public boolean dfs (HashSet<Character>[] lists, int cnt) {
          if (cnt < 1) {
              return true;
          }
          HashSet<Character>[] ans = new HashSet[cnt];
          for (int i = 0; i < cnt; ++i) {
              ans[i] = new HashSet<Character>();
              for (char a : lists[i]) {
                  for (char b : lists[i+1]) {
                      String head = "" + a + b;
                      for (int j = 0; j < allowed.size(); ++j) {
                          if (allowed.get(j).startsWith(head) ) {
                              ans[i].add(allowed.get(j).charAt(2));
                          }
                      }
                  }
              }
              if (ans[i].size() < 1) {
                  return false;
              }
          }
          return dfs(ans, cnt - 1);
      }

      public boolean pyramidTransition(String bottom, List<String> allowed) {
          if (bottom == null || bottom.length() < 1) {
              return false;
          }
          this.allowed = allowed;
          HashSet<Character>[] lists = new HashSet[bottom.length()];
          char[] chars = bottom.toCharArray();
          for (int i = 0; i < chars.length; ++i) {
              lists[i] = new HashSet<>();
              lists[i].add(chars[i]);
          }
          return dfs(lists, bottom.length() - 1);
      }
  }

2.3.2.商品购买的原价和多种套餐选择问题（leetcode [638] Shopping Offers）
  代码：
  class Solution {
      public int shoppingOffers(List<Integer> price, List<List<Integer>> special, List<Integer> needs) {
          int n = price.size();
          int ans = 0;
          // 对于当前所需商品数，按单价购买，不用礼包
          for (int i = 0; i < n; ++i) {
              ans += price.get(i) * needs.get(i);
          }
          for (List<Integer> offer : special) {
              boolean flag = true;
              // 使用一种礼包，如果礼包内所有商品数都小于等于所需商品数，深搜前提
              for (int i = 0; i < n; ++i) {
                  if (needs.get(i) - offer.get(i) < 0) {
                      flag = false;
                  }
                  needs.set(i, needs.get(i) - offer.get(i));
              }
              if (flag) {
                  ans = Math.min(ans, offer.get(n) + shoppingOffers(price, special, needs));
              }
              // 回溯
              for (int i = 0; i < n; ++i) {
                  needs.set(i, needs.get(i) + offer.get(i));
              }
          }
          return ans;
      }
  }
2.3.3.多级双向链表扁平化（leetcode [430] Flatten a Multilevel Doubly Linked List）
  代码：
  class Solution {

      public class MyNode {
          Node first;
          Node last;
      }

      public MyNode dfs (Node node) {
          if (node == null) {
              return null;
          }
          MyNode ans = new MyNode();
          ans.first = node;
          while (node != null) {

              if (node.child != null) {
                  Node cur = node;
                  Node next = node.next;
                  MyNode tmp = dfs(cur.child);
                  node.next = tmp.first;
                  tmp.first.prev = node;
                  node.child = null;
                  if (next != null) {
                      next.prev = tmp.last;
                      tmp.last.next = next;

                  }
                  ans.last = next == null ? tmp.last : next;
                  node = next;
              } else {
                  ans.last = node;
                  node = node.next;
              }

          }

          return ans;
      }

      public Node flatten(Node head) {
          if (head == null) {
              return null;
          }
          MyNode myNode = dfs(head);
          return myNode.first;
      }
  }
2.3.4.富有者中的最安静者（leetcode [851] Loud and Rich）
  代码：
  class Solution {

      private ArrayList<Integer>[] lists;
      private int[] quiet;
      private int[] ans;

      public int dfs (int node) {
          if (ans[node] == -1) {
              int min = node;
              for (int next : lists[node]) {
                  int tmp = dfs(next);
                  if (quiet[tmp] < quiet[min]) {
                      min = tmp;
                  }
              }
              ans[node] = min;
          }
          return ans[node];
      }

      public int[] loudAndRich(int[][] richer, int[] quiet) {
          this.quiet = quiet;
          int len = quiet.length;
          lists = new ArrayList[len];
          for (int i = 0; i < len; ++i) {
              lists[i] = new ArrayList<>();
          }
          for (int[] rich : richer) {
              int x = rich[0];
              int y = rich[1];
              lists[y].add(x);
          }
          // dfs(i)返回i的富有者的最安静者
          // 记忆化搜索
          ans = new int[len];
          Arrays.fill(ans, -1);
          for (int i = 0; i < len; ++i) {
              if (ans[i] == -1) {
                  dfs(i);
              }
          }
          return ans;
      }
  }

  
扫雷游戏（leetcode [529] Minesweeper）
  代码：
  class Solution {

      private char[][] ans;
      private int row;
      private int col;
      private int[] dx = {-1, -1, 0, 1, 1, 1, 0, -1};
      private int[] dy = {0, 1, 1, 1, 0, -1, -1, -1};

      public int judge (int a, int b) {
          int num = 0;
          for (int i = 0; i < dx.length; ++i) {
              int aa = a + dx[i];
              int bb = b + dy[i];
              if (aa < 0 || aa >= row || bb < 0 || bb >= col) {
                  continue;
              }
              if (ans[aa][bb] == 'M') {
                  ++num;
              }
          }
          return num;
      }

      public void dfs (int x, int y) {
          if (x < 0 || x >= row || y < 0 || y >= col) {
              return;
          }
          // 判断为E或者M包含了去除已搜索的情况
          if (ans[x][y] == 'E') {
              ans[x][y] = 'B';
              int cnt = judge(x, y);
              if (cnt > 0) {
                  ans[x][y] = (char)('0' + cnt);
              } else {
                  // 为B才能递归
                  for (int i = 0; i < dx.length; ++i) {
                      dfs(x + dx[i], y + dy[i]);
                  }
              }

          } else if (ans[x][y] == 'M') {
              ans[x][y] = 'X';
          }
      }

      public char[][] updateBoard(char[][] board, int[] click) {
          ans = board;
          row = board.length;
          col = board[0].length;
          dfs(click[0], click[1]);
          return ans;
      }
  }
  
  网格路径，一个格子的能往四个方向走的情况是有限制的且下一个格子必须有对接（leetcode [1391] Check if There is a Valid Path in a Grid）
    代码：
    class Solution {

      private int[][] streets = {
          {-1, 1, -1, 1},
          {1, -1, 1, -1},
          {-1, -1,1, 1},
          {-1, 1, 1, -1},
          {1, -1, -1, 1},
          {1, 1, -1, -1}
      };

      private int[] dx = {-1, 0, 1, 0};
      private int[] dy = {0, 1, 0, -1};

      private int[][] g;
      private int m;
      private int n;
      private boolean[][] visited;

      public boolean dfs (int i, int j, int dir) {
          if (i < 0 || i >= m || j < 0 || j >= n || visited[i][j]) {
              return false;
          }
          if (streets[g[i][j]-1][(dir + 2)%4] == -1) {
              return false;
          }
          if (i == m-1 && j == n-1) {
              return true;
          }
          int t = 0;
          for (; t < dx.length; ++t) {
              if ((streets[g[i][j]-1][t] > -1) && (t != (dir+2)%4)) {
                  break;
              }
          }
          visited[i][j] = true;
          boolean ret = dfs(i + dx[t], j + dy[t], t);
          visited[i][j] = false;
          return ret;
      }

      public boolean hasValidPath(int[][] grid) {
          g = grid;
          m = grid.length;
          n = grid[0].length;
          boolean ans = false;
          int start = g[0][0];
          if (m == 1 && n == 1) {
              return true;
          }
          visited = new boolean[m][n];
          visited[0][0] = true;
          for (int i = 0; i < dx.length; ++i) {
              if (streets[start-1][i] > -1) {
                  if (dfs(dx[i], dy[i], i)){
                      return true;
                  }
              }
          }
          return ans;
      }
  }
  
无向图/有向图中环的判断（leetcode [207] Course Schedule）
  代码：
  class Solution {
    
      HashMap<Integer, List<Integer>> map;
      int[] visited;

      public boolean dfs (int node) {
          visited[node] = 1;
          if (map.containsKey(node)) {
              for (int next : map.get(node)) {
                  if (visited[next] == 1) {
                      return false;
                  } else if (visited[next] == 0) {
                      if(!dfs(next)){
                          return false;
                      }
                  }
              }
          }        
          visited[node] = 2;
          return true;
      }

      public boolean canFinish(int numCourses, int[][] prerequisites) {
          map = new HashMap<>();
          visited = new int[numCourses];
          for (int[] array : prerequisites) {
              int dst = array[0];
              int src = array[1];
              if (!map.containsKey(src)) {
                  map.put(src, new ArrayList<Integer>());
              }
              map.get(src).add(dst);
          }
          for (int key : map.keySet()) {
              if (visited[key] == 0) {
                  if (!dfs(key)) {
                      return false;
                  }
              }
          }
          return true;
      }
  }
变体，利用栈记录路径（leetcode [210] Course Schedule II）
  代码：
  class Solution {

      private HashMap<Integer, List<Integer>> graph;
      private Stack<Integer> stack;
      private int[] visited;

      public boolean dfs (int cur) {
          visited[cur] = 1;
          if (graph.containsKey(cur)) {
              for (int next : graph.get(cur)) {
                  if (visited[next] == 1) {
                      return false;
                  } else if (visited[next] == 0) {
                      if (!dfs(next)) {
                          return false;
                      }
                  }
              }
          }
          visited[cur] = 2;
          stack.push(cur);
          return true;

      }

      public int[] findOrder(int numCourses, int[][] prerequisites) {
          int[] ans = new int[numCourses];
          graph = new HashMap<>();
          stack = new Stack<>();
          visited = new int[numCourses];
          for (int[] array : prerequisites) {
              int dst = array[0];
              int src = array[1];
              if (!graph.containsKey(src)) {
                  graph.put(src, new ArrayList<>());
              }
              graph.get(src).add(dst);
          }
          for (int i = 0; i < numCourses; ++i) {
              if (visited[i] == 0) {
                  if (!dfs(i)) {
                      return new int[]{};
                  }
              }
          }

          int cnt = 0;
          while (!stack.isEmpty()) {
              ans[cnt++] = stack.pop();   
          }
          return ans;

      }


  }
