1.基于时间的键值存储和查找（leetcode [981] Time Based Key-Value Store）
  代码：
  class TimeMap {

      HashMap<String, String>[] maps;
      HashMap<String, Integer> records;
      int val;

      /** Initialize your data structure here. */
      public TimeMap() {
          val = 1_0_000_000 + 5;
          maps = new HashMap[val];
          records = new HashMap<>();

      }

      public void set(String key, String value, int timestamp) {
          if (maps[timestamp] == null) {
              maps[timestamp] = new HashMap<>();
          }
          maps[timestamp].put(key, value);
          records.put(key, timestamp);
      }

      public String get(String key, int timestamp) {
          if (records.containsKey(key)) {
              int index = records.get(key);
              if (index <= timestamp) {
                  return maps[index].get(key);
              } else {
                  int cnt = timestamp;
                  while (cnt > 0) {
                      if (maps[cnt] != null && maps[cnt].containsKey(key)) {
                          return maps[cnt].get(key);
                      }
                      --cnt;
                  }
                  return "";
              }

          } else {
              return "";
          }

      }
  }
2.四数组相加得指定数值的方案总数问题（leetcode [454] 4Sum II）
  代码：
  class Solution {
      public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
          if (A == null || A.length < 1) {
              return 0;
          }
          int len = A.length;
          HashMap<Integer, Integer> map1 = new HashMap<>();
          // HashMap<Integer, Integer> map2 = new HashMap<>();
          for (int i = 0; i < len; ++i) {
              for (int j = 0; j < len; ++j) {
                  map1.put(A[i] + B[j], map1.getOrDefault(A[i] + B[j], 0) + 1);
              }
          }
          int ans = 0;
          for (int i = 0; i < len; ++i) {
              for (int j = 0; j < len; ++j) {
                  if (map1.containsKey(-(C[i] + D[j]))) {
                      ans += map1.get(-(C[i] + D[j]));
                  }
                  // map2.put(C[i] + D[j], map2.getOrDefault(C[i] + D[j], 0) + 1);
              }
          }
          // int ans = 0;
          // for (int key1 : map1.keySet()) {
          //     if (map2.containsKey(-key1)) {
          //         ans += map1.get(key1) * map2.get(-key1);
          //     }
          // }
          return ans;
      }
  }
