https://github.com/ZhongFuCheng3y/athena


1.equals和==，equals和hashcode
https://cloud.tencent.com/developer/article/1672684
https://www.cnblogs.com/bsjl/p/8626553.html
== ： 该操作符生成的是一个boolean结果，它计算的是操作数的值(基本数据类型变量-直接存储的值，引用类型变量-内存中的地址)之间的关系
equals  ： Object 的 实例方法，比较两个对象的内容是否相同
hashCode ： Object 的 native方法 , 获取对象的哈希值，用于确定该对象在哈希表中的索引位置，它实际上是一个int型整数
  原则 1 ： 如果 x.equals(y) 返回 “true”，那么 x 和 y 的 hashCode() 必须相等 ；
  原则 2 ： 如果 x.equals(y) 返回 “false”，那么 x 和 y 的 hashCode() 有可能相等，也有可能不等 ；
  原则 3 ： 如果 x 和 y 的 hashCode() 不相等，那么 x.equals(y) 一定返回 “false” ；
  如果一个类重写了equals方法，但没有重写hashCode方法，将会直接违法了第2条规定
  Object类中equals方法实际上是判断两个对象是否具有相同的引用，如果有，它们就一定相等

2.java static关键字使用场景？静态方法可以被重写吗，为什么
https://blog.csdn.net/qq_44543508/article/details/102736466（含单例）
https://www.jianshu.com/p/15e21428d884
https://blog.csdn.net/gao_zhennan/article/details/72892946

不能，
1.重写指的是根据运行时对象的类型来决定调用哪个方法，而不是根据编译时的类型。
静态变量和静态方法在编译的时候就将其与类绑定在一起。既然它们在编译的时候就决定了调用的方法、变量，那就和重写没有关系了
2.重写的目的在于根据创造对象的所属类型不同而表现出多态


3.final关键字使用场景
https://blog.csdn.net/qq_44543508/article/details/102720206
final修饰一个类时，表明这个类不能被继承；
final修饰方法，方法不可以重写，但是可以被子类访问 【前提：方法不是 private 类型】；
final修饰的是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象


4.java内存模型（引申synchronized原理，volatile）
https://zhuanlan.zhihu.com/p/29881777
volatile：https://mp.weixin.qq.com/s?__biz=MzI3NzM2OTQ5Mg==&mid=2247484289&idx=1&sn=bdf6721e01c613bfb1458a8584e80800&chksm=eb66047adc118d6c395c14e5b953686bfdfac93fd6fa8c0731bb89aadd7437bba800d034659d&scene=21#wechat_redirect
synchronize：https://mp.weixin.qq.com/s?__biz=MzI3NzM2OTQ5Mg==&mid=2247484280&idx=1&sn=8de305338c5ab348c3e2a784084e4306&chksm=eb660483dc118d95e9bcde15a01103f818ed2fd399989f36dc2d57740a305e91cf986d4f5a64&scene=21#wechat_redirect


5.jvm的内存结构，gc过程。是否有过调优经验？（可以引申内存泄漏话题）
https://github.com/WuJialei/KL/blob/master/%E9%9D%A2%E8%AF%95/JVM

6.乐观锁/悲观锁/分布式锁，CAS原理。
乐观锁+悲观锁+cas：https://juejin.cn/post/6844903796129136647
cas：https://zhuanlan.zhihu.com/p/34556594
分布式锁：https://www.zhihu.com/question/452803310/answer/1931377239

7.jdk线程池参数，ThreadLocal工作原理
https://juejin.cn/post/6844903889678893063#heading-0
https://juejin.cn/post/6844903802252820487#heading-1
https://blog.csdn.net/zzg1229059735/article/details/82715741

8.redis的热key、大key场景及处理
https://github.com/ZhongFuCheng3y/athena
https://zhuanlan.zhihu.com/p/404095378

9。数据库和缓存一致性如何保证？延时双删？

10.数据库索引最左匹配规则？慢查询分析？隔离级别和对应的含义？innoDB的实现？（MVCC）

11.数组链表区别
https://juejin.cn/post/6935049364616249381
数组：查询效率高O(1)，新增和修改需要移动元素效率低O(n)，内存分配是连续的内存，扩容需要重新分配内存。
链表：新增和修改效率高O(1)，只需要修改指针指向就好。链表查询效率低O(n)，需要从链表头依次查找。内存分配不需要连续的内存，占用连续内存少。

12.平衡搜索二叉树定义，左右旋；红黑树定义；B树/B+树概念，平衡化（节点拆分合并），区别，为什么mysql使用b+

13.操作系统的内核态用户态概念？IO过程有几次拷贝？零拷贝是什么？
https://zhuanlan.zhihu.com/p/388057431
https://zhuanlan.zhihu.com/p/473639031

14.数据库索引结构

15.spring aop
代理模式：https://www.runoob.com/design-pattern/proxy-pattern.html
spring aop：https://developer.aliyun.com/article/1068363
demo：https://blog.csdn.net/qq_45193304/article/details/104821626
静态代理和动态代理：代理类是否是动态生成
spring aop动态代理两种实现方式：基于接口——JDK动态代理，基于类——cglib(引入外部依赖)
spring实现aop：spring api接口、自定义实现、aspect注解

常问：
jvm的内存结构，gc过程。
jdk线程池参数，ThreadLocal工作原理
redis的热key、大key场景及处理
数据库和缓存一致性如何保证？延时双删？  
