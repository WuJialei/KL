1.基础知识
1.1.排序基础讲解：https://juejin.im/post/5b95da8a5188255c775d8124#comment
1.2.快排时间复杂度分析：https://blog.csdn.net/weshjiness/article/details/8660583
1.3.treeset默认set排序：https://www.cnblogs.com/skywang12345/p/3311268.html

2.应用
2.1.基础应用
2.1.1.奇偶平均分组，不消耗内存（leetcode [922] Sort Array By Parity II）
  代码：
  class Solution {
      public int[] sortArrayByParityII(int[] A) {
          int j = 1;
          for (int i = 0; i < A.length; i += 2) {
              if (A[i] % 2 == 1) {
                  while (A[j] % 2 == 1) {
                      j += 2;
                  }
                  int temp = A[i];
                  A[i] = A[j];
                  A[j] = temp;
              }
          }
          return A;
          /*
          int[] odds = new int[A.length/2];
          int[] evens = new int[A.length/2];
          int o = 0, e = 0;
          for (int a : A) {
              if ((a%2) == 0) {
                  evens[e++] = a;
              } else {
                  odds[o++] = a;
              }
          }
          int[] ans = new int[A.length];
          for (int i = 0; i < A.length/2; i++) {
              ans[i*2] = evens[i];
              ans[i*2+1] = odds[i];
          }
          return ans;
          */
      }
  }
  
  2.1.2.双指针（leetcode [349] Intersection of Two Arrays）
    代码：
    class Solution {
      public int[] intersection(int[] nums1, int[] nums2) {
          Arrays.sort(nums1);
          Arrays.sort(nums2);
          HashSet<Integer> set = new HashSet<Integer>();
          int i = 0, j = 0;
          while (i < nums1.length && j < nums2.length) {
              if (nums1[i] == nums2[j]) {
                  set.add(nums1[i]);
                  ++i;
                  ++j;
              } else if (nums1[i] < nums2[j]) {
                  ++i;
              } else {
                  ++j;
              }
          }
          int[] ans = new int[set.size()];
          int cnt = 0;
          for (int num : set) {
              ans[cnt++] = num;
          }
          return ans;
          /*
          HashSet<Integer> set1 = new HashSet<Integer>();
          HashSet<Integer> set2 = new HashSet<Integer>();
          for (int num : nums1) {
              set1.add(num);
          }
          for (int num : nums2) {
              set2.add(num);
          }
          ArrayList<Integer> list = new ArrayList<>();
          for (int num : set1){
              if (set2.contains(num)) {
                  list.add(num);
              }
          }
          int[] ans = new int[list.size()];
          int cnt = 0;
          for (int num : list) {
              ans[cnt++] = num;
          }
          return ans;
          */
      }
  }
使用哈希映射解决类似（不用排序，leetcode [350] Intersection of Two Arrays II）
  代码：
  class Solution {
      public int[] intersect(int[] nums1, int[] nums2) {
          if (nums1.length > nums2.length) {
              return intersect(nums2, nums1);
          }
          // 哈希映射
          HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
          for (int num : nums1) {
              map.put(num, map.getOrDefault(num, 0) + 1);
          }
          int cnt = 0, len = nums1.length;
          for (int num : nums2) {
              if (cnt >= len) {
                  break;
              }
              int t = map.getOrDefault(num, 0);
              if (t > 0) {
                  nums1[cnt++] = num;
                  map.put(num, t-1);
              }
          }
          return Arrays.copyOfRange(nums1, 0, cnt);
      }
  }
  
2.1.3.二维有序矩阵寻找指定值（leetcode [240] Search a 2D Matrix II）
  代码：
  class Solution {
      public boolean searchMatrix(int[][] matrix, int target) {
          if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
              return false;
          }
          return search(matrix, target, 0, matrix[0].length - 1);
      }

      public boolean search (int[][] matrix, int target, int row, int col) {
          if (row >= matrix.length || col < 0) {
              return false;
          }
          if (matrix[row][col] == target) {
              return true;
          } else if (matrix[row][col] > target) {
              return search(matrix, target, row, col-1);
          } else {
              return search(matrix, target, row+1, col);
          }
      }

  }
  
2.2.归并排序（leetcode 1305. All Elements in Two Binary Search Trees）
  代码：
  import java.util.ArrayList;
  import java.util.List;

  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode(int x) { val = x; }
   * }
   */
  class Solution {

        public void inOrder (TreeNode node, List<Integer> list) {
            if (node == null) {
                return;
            }
            inOrder(node.left, list);
            list.add(node.val);
            inOrder(node.right, list);
        }

      public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {
          List<Integer> list1 = new ArrayList<>();
          List<Integer> list2 = new ArrayList<>();
          inOrder(root1, list1);
          inOrder(root2, list2);
          List<Integer> ans = new ArrayList<>();
          int i = 0, j = 0;
          while (i < list1.size() && j < list2.size()) {
              int a = list1.get(i);
              int b = list2.get(j);
              if (a < b) {
                  ans.add(a);
                  ++i;
              } else {
                  ans.add(b);
                  ++j;
              }
          }
          while (i < list1.size()) {
              ans.add(list1.get(i++));
          }
          while (j < list2.size()) {
              ans.add(list2.get(j++));
          }
          return ans;
      }
  }
2.2.1.链表的归并排序（leetcode [148] Sort List）
  空间复杂度分析：递归算法空间复杂度=递归深度*每次递归所要的辅助空间，本算法的递归深度为log(n)，每次递归需要的辅助空间为常数，所以递归算法的空间复杂度为log(n)
  代码：
  class Solution {
      public ListNode sortList(ListNode head) {
          if (head == null || head.next == null) {
              return head;
          }
          // 快慢指针寻找中点
          ListNode slow = head;
          ListNode fast = head.next;
          while (fast != null && fast.next != null) {
              slow = slow.next;
              fast = fast.next.next;
          }
          ListNode tmp = slow.next;
          slow.next = null;
          ListNode left = sortList(head);
          ListNode right = sortList(tmp);
          ListNode h = new ListNode(-1);
          ListNode ans = h;
          while (left != null && right != null) {
              if (left.val < right.val) {
                  h.next = left;
                  left = left.next;
              } else {
                  h.next = right;
                  right = right.next;
              }
              h = h.next;
          }
          h.next = left!=null ? left : right;
          return ans.next;
      }
  }
  

2.3.选择排序变体(leetcode [969] Pancake Sorting)
  思路:
  找出最大元素，部分翻转将该最大元素至链表头部，全翻转将链表头部元素到最后，相当于每一步都是找最大元素然后翻转到最后；
  代码:
  class Solution {

      public int maxIndex (List<Integer> list) {
          int index = 0;
          for (int i = 1; i < list.size(); ++i) {
              if (list.get(i) > list.get(index)) {
                  index = i;
              }
          }
          return index;
      }

      public List<Integer> pancakeSort(int[] A) {
          List<Integer> list = new ArrayList<>();
          for (int a : A) {
              list.add(a);
          }
          List<Integer> ans = new ArrayList<>();
          for (int i = A.length - 1; i > 0; --i) {
              int j = maxIndex(list);
              if (j == i) {
                  list.remove(j);
              } else {
                  if (j > 0) {
                      List<Integer> list1 = list.subList(0, j+1);
                      List<Integer> list2 = list.subList(j+1, i+1);
                      ans.add(j+1);
                      Collections.reverse(list1);
                      list = new ArrayList<>();
                      list.addAll(list1);
                      list.addAll(list2);
                  }
                  Collections.reverse(list);
                  ans.add(i+1);
                  list.remove(i);
              }
          }
          return ans;
      }
  }
  
2.4.堆排序（leetcode [973] K Closest Points to Origin）
  代码：
  class Solution {

      public int squre (int a, int b) {
          return a * a + b * b;
      }

      public int[][] kClosest(int[][] points, int K) {
          PriorityQueue<int[]> queue = new PriorityQueue<>(K, (o2, o1) -> o1[0] * o1[0] + o1[1] * o1[1] - o2[0] * o2[0] - o2[1] * o2[1]);

          for (int i = 0; i < points.length; ++i) {
              if (queue.size() < K) {
                  queue.offer(points[i]);
              } else if (squre(points[i][0], points[i][1]) < squre(queue.peek()[0], queue.peek()[1])) {
                  queue.poll();
                  queue.offer(points[i]);
              }
          }
          int[][] ans = new int[K][2];
          int cnt = 0;
          while(!queue.isEmpty()) {
              ans[cnt] = queue.poll();
              ++cnt;
          }
          return ans;
      }
  }
  
  2.5.java集合排序（Collections.sort()结合lambda表达式的写法）
  2.5.1.查找字典里最匹配的字符串（leetcode [524] Longest Word in Dictionary through Deleting）
    代码：
    class Solution {

      String s;

      public boolean find (String str) {
          int index = 0;
          int len = s.length();
          int cnt = 0;
          for (; cnt < str.length();) {
              if (index >= len) {
                  break;
              }
              if (str.charAt(cnt) == s.charAt(index)) {
                  ++cnt;
                  ++index;
              } else {
                  ++index;
              }
          }
          return cnt == str.length();
      }

      public String findLongestWord(String s, List<String> d) {
          this.s = s;
          List<String> list = new ArrayList<String>();
          for (String str : d) {
              if (find(str)) {
                  if (list.size() == 0) {
                      list.add(str);
                  } else {
                      if (str.length() == list.get(0).length()) {
                          list.add(str);
                      } else if (str.length() > list.get(0).length()) {
                          list = new ArrayList<String>();
                          list.add(str);
                      }
                  }

              }
          }
          if (list.size() == 0) {
              return "";
          } else {
              if (list.size() > 1) {
                  Collections.sort(list, (a, b) -> a.compareTo(b));
              }            
              return list.get(0);
          }

      }
  }
  2.5.2.车队追赶到达问题（leetcode [853] Car Fleet）
    代码：
    class Solution {

      public class Car {
          int pos;
          int spe;
          double time;

          public Car (int p, int s, double t) {
              pos = p;
              spe = s;
              time = t;
          }

      }

      public int carFleet(int target, int[] position, int[] speed) {
          List<Car> list = new ArrayList<Car>();
          for (int i = 0; i < position.length; ++i) {
              double t = (double)(target-position[i]) / (double)speed[i];
              Car car = new Car(position[i], speed[i], t);
              list.add(car);
          }
          Collections.sort(
              list,
              (a, b) -> {
                  if (a.pos == b.pos) {
                      return a.spe - b.spe;
                  } else {
                      return a.pos - b.pos;
                  }
              }
          );
          int cnt = 0;
          for (int i = list.size() - 1; i >= 0; --i) {
              if (i <= list.size() - 2 && list.get(i).time <= list.get(i+1).time) {
                  list.get(i).time = list.get(i+1).time;
              } else {
                  ++cnt;
              }
          }
          return cnt;

      }
  }
2.5.3.合并重复间隔（leetcode [56] Merge Intervals）
  代码：
  class Solution {
      public int[][] merge(int[][] intervals) {
          if (intervals == null || intervals.length <= 1) {
              return intervals;
          }
          List<int[]> list = new ArrayList<>();
          for (int[] interval : intervals) {
              list.add(interval);
          }
          Collections.sort(
              list,
              (a, b) -> {
                  if (a[0] == b[0]) {
                      return a[1] - b[1];
                  } else {
                      return a[0] - b[0];
                  }
              }
          );
          List<int[]> ans = new ArrayList<>();
          int a = list.get(0)[0];
          int b = list.get(0)[1];
          for (int i = 1; i < list.size(); ++i) {
              int c = list.get(i)[0];
              int d = list.get(i)[1];
              if (a == c) {
                  b = d;
              } else if (b >= c) {
                  b = b < d ? d : b;
              } else {
                  ans.add(new int[]{a, b});
                  a = c;
                  b = d;
              }
          }
          ans.add(new int[]{a, b});
          int[][] ret = new int[ans.size()][2];
          int cnt = 0;
          for (int[] t : ans) {
              ret[cnt][0] = t[0];
              ret[cnt++][1] = t[1];
          }
          return ret;

      }
  }
2.5.4.数字拼接成为最大数（leetcode [179] Largest Number）
  思路：字符串拼接成为同等长度字符串再比较
  代码：
  class Solution {
      public String largestNumber(int[] nums) {
          List<String> list = new ArrayList<>();
          for (int num : nums) {
              list.add(String.valueOf(num));
          }
          Collections.sort(
              list,
              (a, b) -> {
                  String t1 = a + b;
                  String t2 = b + a;
                  return t2.compareTo(t1);
              }
          );
          StringBuilder ans = new StringBuilder("");
          for (String str : list) {
              ans.append(str);
          }
          if (ans.toString().charAt(0) == '0') {
              return "0";
          }
          return ans.toString();
      }
  }
 
2.6.三色旗问题（leetcode [75] Sort Colors）
    代码：
    class Solution {
      public void sortColors(int[] nums) {
          // 三色旗问题，p0表示最右的0指针，p2表示最左的2指针，cur表示当前指针
          // 遇到0一定要处理，遇到2一定要处理，遇到1先跳过
          int p0 = 0, cur = 0, p2 = nums.length - 1;
          while (cur <= p2) {
              if (nums[cur] == 0) {
                  int tmp = nums[p0];
                  nums[p0++] = nums[cur];
                  nums[cur++] = tmp;
              } else if (nums[cur] == 2) {
                  int tmp = nums[p2];
                  nums[p2--] = nums[cur];
                  nums[cur] = tmp;
              } else {
                  ++cur;
              }
          }
          /*
          int[] ret = sort(nums);
          for (int i = 0; i < nums.length; ++i) {
              nums[i] = ret[i];
          }
          */
          //nums = Arrays.copyOfRange(sort(nums), 0, nums.length);
      }

      public int[] sort (int[] data) {
          if (data.length <= 1) {
              return data;
          }
          int mid = data.length >> 1;
          return merge(sort(Arrays.copyOfRange(data, 0, mid)), sort(Arrays.copyOfRange(data, mid, data.length)));
      }

      public int[] merge (int[] data1, int[] data2) {
          int[] ret = new int[data1.length + data2.length];
          int i = 0, j = 0;
          int cnt = 0;
          while (i < data1.length && j < data2.length) {
              if (data1[i] < data2[j]) {
                  ret[cnt++] = data1[i++];
              } else {
                  ret[cnt++] = data2[j++];
              }
          }
          while (i < data1.length) {
              ret[cnt++] = data1[i++];
          }
          while (j < data2.length) {
              ret[cnt++] = data2[j++];
          }
          return ret;
      }

  }
  
  2.7.插空使得相邻元素不相同（leetcode [1054] Distant Barcodes）
    代码：
    class Solution {
      public int[] rearrangeBarcodes(int[] barcodes) {
          int len = barcodes.length;
          int[] ans = new int[len];
          HashMap<Integer, Integer> map = new HashMap<>();
          for (int barcode : barcodes) {
              map.put(barcode, map.getOrDefault(barcode, 0) + 1);
          }
          List<Map.Entry<Integer, Integer>> list = new ArrayList<>(map.entrySet());
          Collections.sort(list, (a, b) -> b.getValue() - a.getValue());
          int odd = 1, even = 0;
          for (Map.Entry<Integer, Integer> entry : list) {
              int num = entry.getKey();
              int cnt = entry.getValue();
              while (cnt > 0 && even < len) {
                  ans[even] = num;
                  even += 2;
                  --cnt;
              }
              while (cnt > 0) {
                  ans[odd] = num;
                  odd += 2;
                  --cnt;
              }
          }
          return ans;
      }
  }
  
2.8.插入排序
2.8.1.插入排序与链表结合（leetcode [147] Insertion Sort List）
  代码：
  class Solution {
      public ListNode insertionSortList(ListNode head) {
          if (head == null || head.next == null) {
              return head;
          }
          ListNode h = new ListNode(-1);
          h.next = head;
          ListNode pre = h;
          ListNode cur = h.next;
          while (cur != null) {
              ListNode nex = cur.next;
              if (nex != null && nex.val < cur.val) {
                  while (pre.next != null && pre.next.val < nex.val) {
                      pre = pre.next;
                  }
                  ListNode t = pre.next;
                  pre.next = nex;
                  ListNode l = nex.next;
                  nex.next = t;
                  cur.next = l;
                  pre = h;
              } else {
                  cur = cur.next;
              }
          }
          return h.next;
      }
  }

2.9.数组的排序
2.9.1.h指数（leetcode [274] H-Index）
  思路：由于Arrays.sort排序支持的是对Integer[]数组的排序，所以对int[]数组自定义降序排序比较麻烦，只采用默认的升序遍历时从后向前扫描即可
  代码：
  class Solution {
      public int hIndex(int[] citations) {
          Arrays.sort(citations);
          int cnt = 0;
          int len = citations.length;
          while (cnt < len && citations[len-1-cnt] > cnt) {
              cnt++;
          }
          return cnt;
      }
  }
  
  2.10.摇摆排序（leetcode [324] Wiggle Sort II）
    代码：
    class Solution {
      public void wiggleSort(int[] nums) {
          if (nums == null || nums.length <= 1) {
              return;
          }
          Arrays.sort(nums);
          int len = nums.length%2 == 0 ? nums.length/2: nums.length/2 + 1;
          int[] odd = Arrays.copyOfRange(nums, 0, len);
          int[] even = Arrays.copyOfRange(nums, len, nums.length);
          int cnt = odd.length-1;
          int i = 0;
          while (cnt >= 0) {
              nums[i] = odd[cnt--];
              i += 2;
          }
          cnt = even.length-1;
          i = 1;
          while (cnt >= 0) {
              nums[i] = even[cnt--];
              i += 2;
          }
      }
  }
  
2.10.TreeSet的用法(leetcode [220] Contains Duplicate III)
  代码：
  class Solution {
      public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
          if (nums == null || nums.length ==0 || k <= 0 || t < 0) {
              return false;
          }
          TreeSet<Integer> set = new TreeSet<>();
          for (int i = 0; i < nums.length; ++i) {
              Integer floor = set.floor(nums[i]);
              if (floor != null && nums[i] - t <= floor) {
                  return true;
              }
              Integer ceil = set.ceiling(nums[i]);
              if (ceil != null && ceil <= nums[i] + t) {
                  return true;
              }
              set.add(nums[i]);
              if (set.size() > k) {
                  set.remove(nums[i-k]);
              }
          }
          return false;
      }
  }

  


