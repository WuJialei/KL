1.基础知识
1.1.排序基础讲解：https://juejin.im/post/5b95da8a5188255c775d8124#comment
1.2.快排时间复杂度分析：https://blog.csdn.net/weshjiness/article/details/8660583

2.应用
2.1.基础应用
2.1.1.奇偶平均分组，不消耗内存（leetcode [922] Sort Array By Parity II）
  代码：
  class Solution {
      public int[] sortArrayByParityII(int[] A) {
          int j = 1;
          for (int i = 0; i < A.length; i += 2) {
              if (A[i] % 2 == 1) {
                  while (A[j] % 2 == 1) {
                      j += 2;
                  }
                  int temp = A[i];
                  A[i] = A[j];
                  A[j] = temp;
              }
          }
          return A;
          /*
          int[] odds = new int[A.length/2];
          int[] evens = new int[A.length/2];
          int o = 0, e = 0;
          for (int a : A) {
              if ((a%2) == 0) {
                  evens[e++] = a;
              } else {
                  odds[o++] = a;
              }
          }
          int[] ans = new int[A.length];
          for (int i = 0; i < A.length/2; i++) {
              ans[i*2] = evens[i];
              ans[i*2+1] = odds[i];
          }
          return ans;
          */
      }
  }
  
  2.1.2.双指针（leetcode [349] Intersection of Two Arrays）
    代码：
    class Solution {
      public int[] intersection(int[] nums1, int[] nums2) {
          Arrays.sort(nums1);
          Arrays.sort(nums2);
          HashSet<Integer> set = new HashSet<Integer>();
          int i = 0, j = 0;
          while (i < nums1.length && j < nums2.length) {
              if (nums1[i] == nums2[j]) {
                  set.add(nums1[i]);
                  ++i;
                  ++j;
              } else if (nums1[i] < nums2[j]) {
                  ++i;
              } else {
                  ++j;
              }
          }
          int[] ans = new int[set.size()];
          int cnt = 0;
          for (int num : set) {
              ans[cnt++] = num;
          }
          return ans;
          /*
          HashSet<Integer> set1 = new HashSet<Integer>();
          HashSet<Integer> set2 = new HashSet<Integer>();
          for (int num : nums1) {
              set1.add(num);
          }
          for (int num : nums2) {
              set2.add(num);
          }
          ArrayList<Integer> list = new ArrayList<>();
          for (int num : set1){
              if (set2.contains(num)) {
                  list.add(num);
              }
          }
          int[] ans = new int[list.size()];
          int cnt = 0;
          for (int num : list) {
              ans[cnt++] = num;
          }
          return ans;
          */
      }
  }
2.1.3.二维有序矩阵寻找指定值（leetcode [240] Search a 2D Matrix II）
  代码：
  class Solution {
      public boolean searchMatrix(int[][] matrix, int target) {
          if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
              return false;
          }
          return search(matrix, target, 0, matrix[0].length - 1);
      }

      public boolean search (int[][] matrix, int target, int row, int col) {
          if (row >= matrix.length || col < 0) {
              return false;
          }
          if (matrix[row][col] == target) {
              return true;
          } else if (matrix[row][col] > target) {
              return search(matrix, target, row, col-1);
          } else {
              return search(matrix, target, row+1, col);
          }
      }

  }
