1.参考：https://www.geekerstar.com/technology/247.html
2.死锁避免-银行家算法实例：https://www.jianshu.com/p/355f138ea3c8
3.文件管理参考1：https://www.cnblogs.com/leesf456/p/5626339.html
         参考2：https://liuyehcf.github.io/2017/09/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F1/
4.IO多路复用：https://cloud.tencent.com/developer/article/1328508

5.linux命令
5.1.ps命令(Process Status的缩写,ps命令用来列出系统中当前运行的那些进程,ps命令列出的是当前那些进程的快照，就是执行ps命令的那个时刻的那些进程，
如果想要动态的显示进程信息，就可以使用top命令，与grep结合可以查看指定进程信息)
5.1.1.ps -ef
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 Nov02 ?        00:00:00 init [3]  
说明：
UID 程序被该 UID 所拥有
PID 就是这个程序的 ID ！
PPID 则是其上级父程序的ID
C CPU 使用的资源百分比
TTY 登入者的终端机位置
TIME 使用掉的 CPU 时间。
CMD 所下达的指令
5.1.2.ps -aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.0  10368   676 ?        Ss   Nov02   0:00 init [3]
说明：
USER：该 process 属于那个使用者账号的
PID ：该 process 的号码
%CPU：该 process 使用掉的 CPU 资源百分比
%MEM：该 process 所占用的物理内存百分比
VSZ ：该 process 使用掉的虚拟内存量 (Kbytes)
RSS ：该 process 占用的固定的内存量 (Kbytes)
TTY ：该 process 是在那个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上面的登入者程序，若为 pts/0 等等的，则表示为由网络连接进主机的程序。
STAT：该程序目前的状态，主要的状态有
R ：该程序目前正在运作，或者是可被运作
S ：该程序目前正在睡眠当中 (可说是 idle 状态)，但可被某些讯号 (signal) 唤醒。
T ：该程序目前正在侦测或者是停止了
Z ：该程序应该已经终止，但是其父程序却无法正常的终止他，造成 zombie (疆尸) 程序的状态
START：该 process 被触发启动的时间
TIME ：该 process 实际使用 CPU 运作的时间
COMMAND：该程序的实际指令
5.1.3.ps -aux | grep 4729
root      4729  3.4  6.6 5465620 268792 ?      Sl   Jul19 6462:29 geth --datadir data --networkid 20 --rpc --rpcapi db,eth,net,web3,personal,miner,txpool,admin --rpccorsdomain * --port 16333 --rpcaddr 0.0.0.0 --rpcport 8546
root     12988  0.0  0.0  12944   980 pts/0    S+   00:59   0:00 grep --color=auto 4729
5.1.4.ps -T -p <pid>（查看指定进程的线程信息）
 ps -T -p 4729
 PID  SPID TTY          TIME CMD
 4729  4729 ?        00:00:00 geth
 4729  4730 ?        15:07:13 geth
 4729  4731 ?        00:00:00 geth
 4729  4732 ?        00:00:00 geth
 4729  4733 ?        00:00:00 geth
 4729  4734 ?        06:09:39 geth
 4729  4735 ?        07:19:47 geth
 4729  4736 ?        00:00:00 geth
 4729  4737 ?        08:26:27 geth
 4729  4738 ?        10:11:55 geth
 4729  4739 ?        10:52:44 geth
 4729  4740 ?        08:31:55 geth
 4729  4741 ?        10:54:47 geth
 4729  4742 ?        09:19:22 geth
 4729  5749 ?        11:22:14 geth
 4729 29648 ?        00:00:03 geth
 4729 29654 ?        02:28:46 geth
 4729 29656 ?        02:19:08 geth
 4729 29657 ?        00:00:05 geth
 4729 29658 ?        02:26:03 geth
 4729 29662 ?        02:28:28 geth
 4729 29823 ?        00:00:00 geth
 说明：
 SPID是线程号


5.2.top命令(Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器)
top命令原理：Linux CPU利用率计算原理及内核实现：https://ilinuxkernel.com/?p=333
命令：top -p 28894（-p<进程号> 指定进程）
执行结果：
top - 14:06:23 up 70 days, 16:44,  2 users,  load average: 1.25, 1.32, 1.35
Tasks: 206 total,   1 running, 205 sleeping,   0 stopped,   0 zombie
Cpu(s):  5.9%us,  3.4%sy,  0.0%ni, 90.4%id,  0.0%wa,  0.0%hi,  0.2%si,  0.0%st
Mem:  32949016k total, 14411180k used, 18537836k free,   169884k buffers
Swap: 32764556k total,        0k used, 32764556k free,  3612636k cached

  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                
28894 root      22   0 1501m 405m  10m S 52.2  1.3   2534:16 java   
前五行是当前系统情况整体的统计信息区
5.2.1.第一行，任务队列信息，同 uptime 命令的执行结果，具体参数说明情况如下：
14:06:23 — 当前系统时间
up 70 days, 16:44 — 系统已经运行了70天16小时44分钟（在这期间系统没有重启过的吆！）
2 users — 当前有2个用户登录系统
load average: 1.15, 1.42, 1.44 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况
load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了
5.2.2.第二行，Tasks — 任务（进程），具体信息说明如下：
系统现在共有206个进程，其中处于运行中的有1个，205个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个
5.2.3.第三行，cpu状态信息，具体属性说明如下：
5.9%us — 用户空间占用CPU的百分比。
3.4% sy — 内核空间占用CPU的百分比。
0.0% ni — 改变过优先级的进程占用CPU的百分比
90.4% id — 空闲CPU百分比
0.0% wa — IO等待占用CPU的百分比
0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比
0.2% si — 软中断（Software Interrupts）占用CPU的百分比
5.2.4.第四行,内存状态，具体信息如下：
32949016k total — 物理内存总量（32GB）
14411180k used — 使用中的内存总量（14GB）
18537836k free — 空闲内存总量（18GB）
169884k buffers — 缓存的内存量 （169M）
5.2.5.第五行，swap交换分区信息，具体信息说明如下：
32764556k total — 交换区总量（32GB）
0k used — 使用的交换区总量（0K）
32764556k free — 空闲交换区总量（32GB）
3612636k cached — 缓冲的交换区总量（3.6GB）
5.2.6.第六行，空行
5.2.7.第七行以下：各进程（任务）的状态监控，项目列信息说明如下：
PID — 进程id
USER — 进程所有者
PR — 进程优先级
NI — nice值。负值表示高优先级，正值表示低优先级
VIRT — 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES
RES — 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA
SHR — 共享内存大小，单位kb
S — 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程
%CPU — 上次更新到现在的CPU时间占用百分比
%MEM — 进程使用的物理内存百分比
TIME+ — 进程使用的CPU时间总计，单位1/100秒
COMMAND — 进程名称（命令名/命令行）
5.2.8.top -H -p <pid>（top输出某个特定进程<pid>并检查该进程内运行的线程状况）
top -H -p 4729
top - 07:10:49 up 134 days, 23:04,  1 user,  load average: 0.08, 0.24, 0.29
Threads:  22 total,   0 running,  22 sleeping,   0 stopped,   0 zombie
%Cpu(s):  2.0 us,  0.5 sy,  0.0 ni, 95.3 id,  1.8 wa,  0.0 hi,  0.2 si,  0.2 st
KiB Mem :  4046280 total,   244652 free,  2014776 used,  1786852 buff/cache
KiB Swap:        0 total,        0 free,        0 used.  1675508 avail Mem 

  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND                                      
 4741 root      20   0 5465620 267304   2304 S  0.7  6.6 654:50.31 geth                                         
29654 root      20   0 5465620 267304   2304 S  0.7  6.6 148:49.28 geth                                         
29658 root      20   0 5465620 267304   2304 S  0.7  6.6 146:06.58 geth                                         
 4730 root      20   0 5465620 267304   2304 S  0.3  6.6 907:16.61 geth                                         
29656 root      20   0 5465620 267304   2304 S  0.3  6.6 139:10.09 geth                                         
 4729 root      20   0 5465620 267304   2304 S  0.0  6.6   0:00.16 geth                                         
 4731 root      20   0 5465620 267304   2304 S  0.0  6.6   0:00.00 geth                                         
 4732 root      20   0 5465620 267304   2304 S  0.0  6.6   0:00.00 geth                                         
 4733 root      20   0 5465620 267304   2304 S  0.0  6.6   0:00.00 geth                                         
 4734 root      20   0 5465620 267304   2304 S  0.0  6.6 369:39.03 geth                                         
 4735 root      20   0 5465620 267304   2304 S  0.0  6.6 439:47.83 geth                                         
 4736 root      20   0 5465620 267304   2304 S  0.0  6.6   0:00.00 geth                                         
 4737 root      20   0 5465620 267304   2304 S  0.0  6.6 506:27.22 geth                                         
 4738 root      20   0 5465620 267304   2304 S  0.0  6.6 611:57.46 geth                                         
 4739 root      20   0 5465620 267304   2304 S  0.0  6.6 652:44.94 geth                                         
 4740 root      20   0 5465620 267304   2304 S  0.0  6.6 511:55.13 geth                                         
 4742 root      20   0 5465620 267304   2304 S  0.0  6.6 559:22.88 geth                                         
 5749 root      20   0 5465620 267304   2304 S  0.0  6.6 682:16.84 geth                                         
29648 root      20   0 5465620 267304   2304 S  0.0  6.6   0:03.26 geth                                         
29657 root      20   0 5465620 267304   2304 S  0.0  6.6   0:05.41 geth                                         
29662 root      20   0 5465620 267304   2304 S  0.0  6.6 148:30.89 geth                                         
29823 root      20   0 5465620 267304   2304 S  0.0  6.6   0:00.28 geth

5.3.free命令(free 命令显示系统内存的使用情况，包括物理内存、交换内存(swap)和内核缓冲区内存)
free -m（-g是以gb为单位，-m是以mb为单位）
              total        used        free      shared  buff/cache   available
Mem:           3951        2599         219          54        1132         985
Swap:             0           0           0
说明：
Mem 行(第二行)是内存的使用情况
Swap 行(第三行)是交换空间的使用情况
total 列显示系统总的可用物理内存和交换空间大小
used 列显示已经被使用的物理内存和交换空间
free 列显示还有多少物理内存和交换空间可用使用
shared 列显示被共享使用的物理内存大小
buff/cache 列显示被 buffer 和 cache 使用的物理内存大小
available 列显示还可以被应用程序使用的物理内存大小

5.4.du命令（ du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的）
du -h --max-depth=1(输出当前目录下各个子目录所使用的空间)
976K	./dockerSH
432K	./.rpmdb
8.3M	./.cache
8.0K	./.ssh
2.1G	./.ethash
45M	./eth
97M	./.vscode-server
2.2G	.
说明：
只显示当前目录下面的子目录的目录大小和当前目录的总的大小，最下面的2.2G为当前目录的总大小
du -h dockerSH --max-depth=1(指定目录下各个子目录所使用的空间)
804K	dockerSH/.git
136K	dockerSH/services
976K	dockerSH804K	dockerSH/.git
136K	dockerSH/services
976K	dockerSH

5.5.df命令（df命令的功能是用来检查linux服务器的文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息）
df -h
Filesystem      Size  Used Avail Use% Mounted on
udev            2.0G     0  2.0G   0% /dev
tmpfs           396M   31M  365M   8% /run
/dev/vda1        39G   11G   29G  28% /
tmpfs           2.0G     0  2.0G   0% /dev/shm
tmpfs           5.0M     0  5.0M   0% /run/lock
tmpfs           2.0G     0  2.0G   0% /sys/fs/cgroup
tmpfs           396M     0  396M   0% /run/user/0
说明：
文件系统               容量   已用  可用 已用% 挂载点

5.6.netstat命令（显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况）
-a或–all 显示所有连线中的Socket
-l或–listening 显示监控中的服务器的Socket
-n或–numeric 直接使用IP地址，而不通过域名服务器
-p或–programs 显示正在使用Socket的程序识别码和程序名称
-t或–tcp 显示TCP传输协议的连线状况
-u或–udp 显示UDP传输协议的连线状况
5.6.1.列出所有tcp和udp连接
netstat -tlnpu
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 127.0.0.1:27017         0.0.0.0:*               LISTEN      28336/mongod    
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      20176/sshd      
tcp6       0      0 10.10.26.26:9001        :::*                    LISTEN      26760/java      
tcp6       0      0 :::3306                 :::*                    LISTEN      29032/mysqld    
tcp6       0      0 :::16333                :::*                    LISTEN      4729/geth       
tcp6       0      0 10.10.26.26:9200        :::*                    LISTEN      1126/java       
tcp6       0      0 :::5140                 :::*                    LISTEN      26760/java      
tcp6       0      0 10.10.26.26:9300        :::*                    LISTEN      1126/java       
tcp6       0      0 :::22                   :::*                    LISTEN      20176/sshd      
tcp6       0      0 :::8546                 :::*                    LISTEN      4729/geth       
tcp6       0      0 10.10.26.26:9000        :::*                    LISTEN      26760/java      
udp        0      0 0.0.0.0:514             0.0.0.0:*                           31805/rsyslogd  
udp        0      0 0.0.0.0:68              0.0.0.0:*                           867/dhclient    
udp6       0      0 :::514                  :::*                                31805/rsyslogd  
udp6       0      0 :::16333                :::*                                4729/geth
5.6.2.查看端口占用
netstat -anp | grep 9200
tcp6       0      0 10.10.26.26:9200        :::*                    LISTEN      1126/java       
tcp6       0      0 10.10.26.26:9200        10.10.26.26:55714       ESTABLISHED 1126/java       
tcp6       0      0 10.10.26.26:55716       10.10.26.26:9200        ESTABLISHED 26760/java      
tcp6       0      0 10.10.26.26:9200        10.10.26.26:55716       ESTABLISHED 1126/java       
tcp6       0      0 10.10.26.26:55714       10.10.26.26:9200        ESTABLISHED 26760/java 
5.6.3.统计端口的连接数
netstat -nat | grep 9200 | wc -l
5
说明：
wc(Word Count)命令的功能为统计指定文件中的字节数、字数、行数，并将统计结果显示输出

6.grep
6.1.grep -n key filename(查看某关键词出现在文件的哪一行)
grep -n mongo docker-compose.yml 
3:  mongo:
5:    image: mongo
6:    container_name: mongo
10:      - ../data/mongodb:/data/db

7.cat（常用来显示文件内容）
7.1.cat words.txt | sort | uniq -c | sort -k1,1nr | head -10
sort:  对单词进行排序
uniq -c:  显示唯一的行，并在每行行首加上本行在文件中出现的次数
sort -k1,1nr:  按照第一个字段，数值排序，且为逆序
head -10:  取前10行数据
cat docker-compose.yml | sort | uniq -c | sort -k1,1nr | head -10
      1       - "27017"
      1     container_name: mongo
      1       - ../data/mongodb:/data/db
      1     expose:
      1     image: mongo
      1   mongo:
      1     restart: always
      1 services:
      1 version: '2'
      1     volumes:

8.tail（显示指定文件末尾内容）

9.lsof（list open files）是一个列出当前系统打开文件的工具
查找某个文件相关的进程
lsof /root/dockerSH/services/mongo
COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF    NODE NAME
bash    12916 root  cwd    DIR  253,1     4096 1032413 /root/dockerSH/services/mongo
lsof    13548 root  cwd    DIR  253,1     4096 1032413 /root/dockerSH/services/mongo
lsof    13549 root  cwd    DIR  253,1     4096 1032413 /root/dockerSH/services/mongo

10.awk（awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理）
df
Filesystem     1K-blocks     Used Available Use% Mounted on
udev             2016040        0   2016040   0% /dev
tmpfs             404628    31024    373604   8% /run
/dev/vda1       40593708 11049928  29527396  28% /
tmpfs            2023140        0   2023140   0% /dev/shm
tmpfs               5120        0      5120   0% /run/lock
tmpfs            2023140        0   2023140   0% /sys/fs/cgroup
tmpfs             404628        0    404628   0% /run/user/0
df | awk '{print $6}'
Mounted
/dev
/run
/
/dev/shm
/run/lock
/sys/fs/cgroup
/run/user/0

11.chmod（chmod命令用于改变linux系统文件或目录的访问权限）
-rwxr-xr-x
第一个字母表示文件类型, ”-”,普通文件，”d”目录,字母”d”,是dirtectory(目录)的缩写，“l”符号链接。请注意,一个目录或者说一个文件夹是一个特殊文件,
这个特殊文件存放的是其他文件和文件夹的相关信息，“b”块设备文件， “c”字符设备文件。
Linux下文件的权限类型一般包括读，写，执行；对应字母为 r、w、x。
Linux下权限的粒度有 拥有者 、群组 、其它组 三种

12.sed(编辑文本文件)
查看指定某行或者某几行的内容
cat docker-compose.yml 
version: '2'
services:
  mongo:
    restart: always
    image: mongo
    container_name: mongo
    expose:
      - "27017"
    volumes:
      - ../data/mongodb:/data/db
sed -n '1,5p' docker-compose.yml 
version: '2'
services:
  mongo:
    restart: always
    image: mongo
sed -n '2p' docker-compose.yml 
services:
