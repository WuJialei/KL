1.筹码移动问题（leetcode [1217] Play with Chips）
  代码：
  class Solution {
      public int minCostToMoveChips(int[] chips) {
          int odd = 0;
          int even = 0;
          // 偶数位置的棋子都是等价的，奇数位置的棋子都是等价的
          for (int chip : chips) {
              if (chip % 2 == 0) {
                  ++even;
              } else {
                  ++odd;
              }
          }
          return Math.min(odd, even);
      }
  }

2.1的个数计算问题
  思路：
  n与n-1的&会把n的最后一位1变为0
  代码：
  public class Solution {
      public int NumberOf1(int n) {
          /*
          int cnt = 32;
          int ans = 0;
          while (cnt > 0) {
              if ((n & 1) == 1) {
                  ++ans;
              }
              n >>= 1;
              --cnt;
          }
          return ans;
          */
          int ans = 0;
          while (n != 0) {
              ++ans;
              n = n & (n-1);
          }
          return ans;
      }
  }
  相关应用：判断一个数是否是2的幂次数（2的幂次数的二进制表示只有一位数为1）
  
3.能随机生成整数 1 到 5 的函数,写出能随机生成整数 1 到 7 的函数
  代码：
  链接：https://www.nowcoder.com/questionTerminal/a475db9aa74747709e65399c0c7d86d2
  https://www.nowcoder.com/questionTerminal/9d06d8f45dca4e45be41d29c389d8a8d

  产生指定范围内的随机数就要求指定范围内每个数的产生概率都是相等的。
  由于无法直接通过rand7()产生1-10的数，所以就要思考如何组合rand7()生成1~10n之间的数。
  为了讨论方便，更符合我们平时使用的习惯，我们将rand7() - 1，就表示生成的是0~6之间的随机数。
  i = rand7() - 1, j = rand7() - 1
  那么7 * i + j 就可以看出一个7进为制的数范围 00~44（转换为十进制就是0~24），而且这些5进制数的产生概率都是一样的，每个数都是1/25，所以我们取0~20的这21个数，它们的概率也是相同的。余7加1就实现了rand7()。

  可推广至更加一般的情况，对于利用可以产生1~N的随机数ranN()，生成1~M的随机数，只需要满足  MAX((randN()-1) * N + (randN()-1)) >= M都可以使用以上述方法类似的方法实现。
  令 n = N-1
   (randN()-1) * N + (randN()-1) 将以等概率生成N进制数 0  ~nn （换成十进制为 (N-1)*10 + (N-1)）。 为了让新生成的随机数等概率，
  只取前0 ~ (M*k-1） 个数（M*k-1<  nn均可 ）
  余M + 1  求得 randM()随机数
