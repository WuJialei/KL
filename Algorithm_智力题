1.筹码移动问题（leetcode [1217] Play with Chips）
  代码：
  class Solution {
      public int minCostToMoveChips(int[] chips) {
          int odd = 0;
          int even = 0;
          // 偶数位置的棋子都是等价的，奇数位置的棋子都是等价的
          for (int chip : chips) {
              if (chip % 2 == 0) {
                  ++even;
              } else {
                  ++odd;
              }
          }
          return Math.min(odd, even);
      }
  }

2.1的个数计算问题
  思路：
  n与n-1的&会把n的最后一位1变为0
  代码：
  public class Solution {
      public int NumberOf1(int n) {
          /*
          int cnt = 32;
          int ans = 0;
          while (cnt > 0) {
              if ((n & 1) == 1) {
                  ++ans;
              }
              n >>= 1;
              --cnt;
          }
          return ans;
          */
          int ans = 0;
          while (n != 0) {
              ++ans;
              n = n & (n-1);
          }
          return ans;
      }
  }
  相关应用：判断一个数是否是2的幂次数（2的幂次数的二进制表示只有一位数为1）
