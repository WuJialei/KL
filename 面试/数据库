1.参考
高性能mysql：第1、5、6章
1.1.高性能mysql_创建高性能的索引：https://soyuone.github.io/2017/06/10/database-mysql-high-performance-index/
1.2.Mysql实战45讲
2.具体
2.1.MySQL索引原理：https://blog.csdn.net/u013235478/article/details/50625677
2.2.redo日志的两阶段提交(mysql45讲第二讲评论区)
  1 prepare阶段 2 写binlog 3 commit
  当在2之前崩溃时
  重启恢复：后发现没有commit，回滚。备份恢复：没有binlog 。
  一致
  当在3之前崩溃
  重启恢复：虽没有commit，但满足prepare和binlog完整，所以重启后会自动commit。备份：有binlog. 一致
  一个完整的交易过程：账本记上 卖一瓶可乐（redo log为 prepare状态），然后收钱放入钱箱（bin log记录）然后回过头在账本上打个勾
  （redo log置为commit）表示一笔交易结束。如果收钱时交易被打断，回过头来整理此次交易，发现只有记账没有收钱，则交易失败，删掉账本上的记录（回滚）；
  如果收了钱后被终止，然后回过头发现账本有记录（prepare）而且钱箱有本次收入（bin log），则继续完善账本（commit），本次交易有效。
  redo log的机制看起来和ring buffer一样的；
  另外有个和高枕、思雨一样的疑问，如果在重启后，需要通过检查binlog来确认redo log中处于prepare的事务是否需要commit，那是否不需要二阶段提交，直接
  以binlog的为准，如果binlog中不存在的，就认为是需要回滚的。这个地方，是不是我漏了什么，拉不通。。。 麻烦老师解下疑，多谢～文章中有提到“binlog没
  有被用来做崩溃恢复”，历史上的原因是，这个是一开始就这么设计的，所以不能只依赖binlog。操作上的原因是，binlog是可以关的，你如果有权限，可以
  set sql_log_bin=0关掉本线程的binlog日志。 所以只依赖binlog来恢复就靠不住。
2.3.mysql两阶段锁协议：https://yq.aliyun.com/articles/626848
