1.二分
1.1.二分模板讲解：https://www.liwei.party/2019/06/18/leetcode-solution-new/search-insert-position/
  参考：https://www.yuque.com/liweiwei1419/algo/feiopy
  left = mid + 1 or right = mid - 1根据自己想要的区间选
  left = mid出现则mid计算时要上取整
  l < r保证返回时l=r;
  mid = l + (r-l)/2保证r+l不溢出，r-l在l为负数且r为很大正数的时候也会溢出，但一般l，r为索引不会有这种情况
1.2.二分模板（以leetcode 35为例）
  代码：
  public class Solution {

      public int searchInsert(int[] nums, int target) {
          int len = nums.length;
          if (len == 0) {
              return 0;
          }
          if (target > nums[len - 1]) {
              return len;
          }
          int left = 0;
          int right = len - 1;
          while (left < right) {
              int mid = left + (right - left) / 2;
              if (nums[mid] < target) {
                  left = mid + 1;
              } else {
                  right = mid;
              }
          }
          return right;
      }
  }



3.1.有序数组
3.1.1.有序矩阵中的第k小元素（leetcode [378] Kth Smallest Element in a Sorted Matrix）
  代码：
  class Solution {
      public int kthSmallest(int[][] matrix, int k) {
          int len = matrix.length;
          int left = matrix[0][0];
          int right = matrix[len-1][len-1];
          while (left < right) {
              int mid = left + (right - left)/2;
              int cnt = 0;
              for (int i = 0; i < len; ++i) {
                  for (int j = 0; j < len && matrix[i][j] <= mid; ++j) {
                      ++cnt;
                  }
              }
              if (cnt >= k) {
                  right = mid;
              } else {
                  left = mid + 1;
              }
          }
          return left;
      }
  }
3.1.2.有序数组的负数统计（leetcode 1351. Count Negative Numbers in a Sorted Matrix）
  类似：1337. The K Weakest Rows in a Matrix；
  代码：
  class Solution {
      public int countNegatives(int[][] grid) {
          int m = grid.length;
          int n = grid[0].length;
          int cnt = 0;
          for (int i = 0; i < m; ++i) {
              if (grid[i][n-1] >= 0) {
                  continue;
              }
              if (grid[i][0] < 0) {
                  cnt += n;
                  continue;
              }
              int left = 0;
              int right = n - 1;
              // 找第一个小于0的位置
              while (left < right) {
                  int mid = left + (right - left)/2;
                  if (grid[i][mid] >= 0) {
                      left = mid + 1;
                  } else {
                      right = mid;
                  }
              }
              if (grid[i][left] < 0) {
                  cnt += n - left;
              }
          }
          return cnt;
      }
  }
3.1.3.数组中山峰的寻找（leetcode [852] Peak Index in a Mountain Array）
  代码：
  class Solution {
      public int peakIndexInMountainArray(int[] A) {
          int left = 0;
          int right = A.length - 1;
          while (left < right) {
              int mid  = left + (right - left)/2;
              if (A[mid-1] < A[mid]) {
                  left = mid + 1;
              } else {
                  right = mid;
              }
          }
          return left-1;
      }
  }
3.1.4.给定函数求所有解（leetcode [1237] Find Positive Integer Solution for a Given Equation）
  代码：
  class Solution {
      public List<List<Integer>> findSolution(CustomFunction customfunction, int z) {
          List<List<Integer>> ans = new ArrayList<>();
          for (int i = 1; i <= 1000; ++i) {
              if (customfunction.f(i, 1) > z) {
                  break;
              }
              int left = 1;
              int right = 1000;
              while (left < right) {
                  int mid = left + (right - left)/2;
                  if (customfunction.f(i, mid) <= z) {
                      left = mid + 1;
                  } else {
                      right = mid;
                  }
              }
              for (int j = 1; j < left; ++j) {
                  if (customfunction.f(i, j) == z) {
                      List<Integer> list = new ArrayList<>();
                      list.add(i);
                      list.add(j);
                      ans.add(list);
                  }
              }
          }
          return ans;
      }
  }
3.1.5.供暖覆盖问题（leetcode [475] Heaters）
  代码：
  class Solution {

      int[] h1;
      int[] h2;

      public boolean Judge (int cnt) {
          int i = 0; 
          int j = 0;
          for (; i < h1.length && j < h2.length;) {
              if ((h1[i] >= h2[j] - cnt) && (h1[i] <= h2[j] + cnt)) {
                  ++i;
              } else {
                  ++j;
              }
          }
          return i >= h1.length ? true : false;
      }

      public int findRadius(int[] houses, int[] heaters) {
          if (houses.length < 1 || heaters.length < 1) {
              return 0;
          }
          Arrays.sort(houses);
          Arrays.sort(heaters);
          h1 = houses;
          h2 = heaters;
          // 注意左右边界
          int left = 0;
          // int right = houses[houses.length - 1] - houses[0];
          int right = Math.max(houses[houses.length - 1], heaters[heaters.length - 1]);
          while (left < right) {
              int mid = left + (right - left)/2;
              if (!Judge(mid)) {
                  left = mid + 1;
              } else {
                  right = mid;
              }
          }
          return left;
      }
  }
3.1.6.记录每个时刻选票最多人的在线选举问题（leetcode 911. 在线选举）
  代码：
  class TopVotedCandidate {

      HashMap<Integer, Integer> count;
      private int[] times;

      public TopVotedCandidate(int[] persons, int[] times) {
          this.times = times;
          count = new HashMap<>();
          HashMap<Integer, Integer> map = new HashMap<>();
          int maxVotePerson = -1;
          for (int i = 0; i < persons.length; ++i) {
              int time = times[i];
              map.put(persons[i], map.getOrDefault(persons[i], 0) + 1);
              if (maxVotePerson == -1) {
                  maxVotePerson = persons[i];
              } else {
                  maxVotePerson = map.get(persons[i]) >= map.get(maxVotePerson) ? persons[i] : maxVotePerson;
              }
              count.put(time, maxVotePerson);
          }
      }

      public int q(int t) {
          int left = 0;
          int right = times.length - 1;
          if (t >= times[right]) {
              return count.get(times[right]);
          }
          while (left < right) {
              int mid = left + (right - left)/2;
              // 找第一个大于t的索引
              if (times[mid] > t) {                     
                  right = mid;
              } else {   
                  left = mid + 1;
              }
          }
          return count.get(times[left-1]);
      }
  }

3.2.字符串
3.2.1.大规模的字符串检查是否是模板的子序列（leetcode [392] Is Subsequence）
  代码：
  class Solution {
      public boolean isSubsequence(String s, String t) {
          if (s == null || t == null) {
              return false;
          }
          if (s.length() == 0) {
              return true;
          }
          List<Integer>[] lists = new ArrayList[26];
          for (int i = 0; i < 26; ++i) {
              lists[i] = new ArrayList<>();
          }
          for (int i = 0; i < t.length(); ++i) {
              lists[t.charAt(i)-'a'].add(i);
          }
          int pre = -1;
          for (int i = 0; i < s.length(); ++i) {
              int index = s.charAt(i)-'a';
              int left = 0;
              int right = lists[index].size() - 1;
              if (right < 0) {
                  return false;
              }
              while (left < right) {
                  int mid = left + (right - left)/2;
                  if (lists[index].get(mid) <= pre) {
                      left = mid + 1;
                  } else {
                      right = mid;
                  }
              }
              if (lists[index].get(left) <= pre) {
                  return false;
              } else {
                  pre = lists[index].get(left);
              }
          }
          return true;
      }
  }
  
3.3.数学问题
3.3.1.判断一个数是否是平方数（leetcode [367] Valid Perfect Square）
  代码：
  class Solution {
        public boolean isPerfectSquare(int num) {
            int left = 1;
            // (n/2 + 1)*(n/2 + 1) > n
            int right = num/2 + 1;
            while (left < right) {
                int mid = left + (right - left)/2;
                // z注意整数相乘的溢出
                long temp = ((long)mid) * mid;
                if (temp < (long)num) {
                    left = mid + 1;
                } else {
                    right = mid;
                }
            }
            long temp = ((long)left) * left;
            return temp == (long)num ? true : false;
        }
    }
 3.3.2.到n的数组求和问题（leetcode [441] Arranging Coins）
  代码：
  class Solution {
      public int arrangeCoins(int n) {
          if (n == 0) {
              return 0;
          }
          // if (n == 1) {
          //     return 1;
          // }
          int left = 1;
          int right = n;
          while (left < right) {
              int mid = left + (right - left)/2;
              // 乘法溢出问题
              long temp = ((long)mid) * (mid+1)/2;
              if (temp < (long)n) {
                  left = mid + 1;
              } else {
                  right = mid;
              }
          }
          // return left-1;
          long temp = ((long)left)*(left+1)/2;
          return temp == (long)n ? left : left - 1;
      }
  }
3.4.不排序数组
3.4.1.一个数组最多分成m段，求各字段区间和的最小值（leetcode [1011] Capacity To Ship Packages Within D Days）
  代码：
  class Solution {

      int[] weights;
      int d;

      public boolean Judge(int cnt) {
          int days = d;
          int k = cnt;
          for (int weight : weights) {
              if (days < 1 || weight > cnt) {
                  return false;
              }
              if (k < weight) {
                  k = cnt;
                  --days;
              }
              k -= weight; 
          }
          return days > 0;
      }

      public int shipWithinDays(int[] weights, int D) {
          this.weights = weights;
          d = D;
          int left = 0;
          int right = 500 * 50000;
          while (left < right) {
              int mid = left + (right - left)/2;
              if (!Judge(mid)) {
                  left = mid + 1;
              } else {
                  right = mid;
              }
          }
          return left;
      }
  }
3.4.2.寻找数组中的重复数（leetcode [287] Find the Duplicate Number）
  代码：
  class Solution {
      public int findDuplicate(int[] nums) {
          // 数值取值范围在[1,n]的数组成n+1个数，且只有一个数字重复i，则则小于等于i的数出现的次数必定大于i数字本身
          // 时间：O(nlog(n))
          // 空间：O(1)
          // 没有修改数组
          int left  = 1;
          int right = nums.length - 1;
          while (left < right) {
              int mid = left + (right - left)/2;
              int cnt = 0;
              for (int num : nums) {
                  if (num <= mid) {
                      ++cnt;
                  }                
              }
              if (cnt <= mid) {
                  left = mid + 1;
              } else {
                  right = mid;
              }
          }
          return left;
      }
  }
  
3.4.3.寻找在指定时间内消耗掉数组中数字的最小速度（leetcode [875] Koko Eating Bananas）
  代码：
  class Solution {

      private int[] piles;

      public int count (int speed) {
          int ans = 0;
          for (int pile : piles) {
              if (pile <= speed) {
                  ++ans;
              } else {                
                  int temp = (pile % speed) ==0 ? pile/speed: pile/speed + 1;
                  ans += temp;
              }
          }
          return ans;
      }

      public int minEatingSpeed(int[] piles, int H) {
          this.piles = piles;
          int left = 1;
          int right = 1000_000_000;
          while (left < right) {
              int mid = left + (right - left)/2;
              if (count(mid) > H) {
                  left = mid + 1;
              } else {
                  right = mid;
              }
          }
          return left;
      }
  }
3.4.4.二维数组中寻找不大于指定阈值的正方形最大边长（leetcode 1292. Maximum Side Length of a Square with Sum Less than or Equal to Threshold）
  代码：
  class Solution {
      public int maxSideLength(int[][] mat, int threshold) {
          int m = mat.length;
          int n = mat[0].length;
          int[][] sums = new int[m+1][n+1];
          // sums[0][0] = mat[0][0];
          // for (int i = 1; i < m; ++i) {
          //     sums[i][0] = sums[i-1][0] + mat[i][0];
          // }
          // for (int j = 1; j < n; ++j) {
          //     sums[0][j] = sums[0][j-1] + mat[0][j];
          // }
          for (int i = 1; i <= m; ++i) {
              for (int j = 1; j <= n; ++j) {
                  sums[i][j] = sums[i-1][j] + sums[i][j-1] + mat[i-1][j-1] - sums[i-1][j-1];
              }
          }

          int ans = 0;
          for (int i = 1; i <= m; ++i) {
              for (int j = 1; j <= n; ++j) {
                  if (ans >= m || ans >= n) {
                      return ans;
                  }
                  if (mat[i-1][j-1] <= threshold) {
                      ans = Math.max(ans, 1);
                  }
                  int len = ans + 1;
                  while ((i - len >= 0) && (j - len >= 0)) {
                      int ii = i - len;
                      int jj = j - len;
                      int sum = sums[i][j] - sums[i][jj] - sums[ii][j] + sums[ii][jj];
                      if (sum > threshold) {
                          break;
                      } else {
                          ++len;
                      }
                  }
                  ans = Math.max(ans, len - 1);
              }
          }
          return ans;
      }
  }
3.4.5.转变数组为最接近目标值的值求解（leetcode 1300. Sum of Mutated Array Closest to Target）
  代码：
  class Solution {

      private int[] arr;

      public int countSum(int th) {
          int ans = 0;
          for (int num : arr) {
              if (num > th) {
                  ans += th;
              } else {
                  ans += num;
              }
          }
          return ans;
      }

      public int findBestValue(int[] arr, int target) {
          this.arr = arr;
          int left = 1;
          int right = 100000;
          while (left < right) {
              int mid = left + (right - left)/2;
              if (countSum(mid) < target) {
                  left = mid + 1;
              } else {
                  right = mid;
              }
          }
          int v1 = Math.abs(countSum(left - 1) - target);
          int v2 = Math.abs(countSum(left) - target);

          return v1 <= v2 ? left - 1 : left;

      }
  }
