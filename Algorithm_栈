1.参考
1.1.http://fanqieto.top/2018/09/04/LeetCode-%E6%A0%88%E7%B1%BB%E7%AE%97%E6%B3%95%E7%B2%BE%E6%9E%90/
1.2.https://blog.csdn.net/koudaidai/article/details/7571521
1.3.https://my.oschina.net/brianway/blog/1545142

2.实际问题
2.1.括号类
2.1.1.删除最外层的括号(leetcode [1021] Remove Outermost Parentheses)
  关键：判断栈是否为空找到最外层的括号位置；动态记录最外层括号包裹的子字符串
  代码：
  class Solution {
      public String removeOuterParentheses(String S) {
          StringBuilder ans = new StringBuilder("");
          Stack<Character> stack = new Stack<Character>();
          int start = 0;
          boolean flag = false;
          for (int i = 0; i < S.length(); ++i) {
              if (S.charAt(i) == '(') {
                  stack.push('(');
                  if (!flag) {
                      start = i;
                      flag = true;
                  } 
              } else {
                  char c = stack.pop();
                  if (stack.isEmpty()) {
                      ans.append(S.substring(start+1, i));
                      flag = false;
                  }
              }
          }
          return ans.toString();
      }
  }
  
2.2.单调栈
2.2.1.寻找一个数组每个元素在它右边出现的第一个大于它的数(leetcode [496] Next Greater Element I)
  代码：
  class Solution {
      public int[] nextGreaterElement(int[] nums1, int[] nums2) {
          HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
          Stack<Integer> stack = new Stack<Integer> ();
          int[] ans = new int[nums1.length];
          for (int num : nums2) {
              if (stack.isEmpty()) {
                  stack.push(num);
              } else {
                  // 单调栈是严格单调递减的
                  while (!stack.isEmpty() && stack.peek() < num) {
                      map.put(stack.pop(), num);
                  }
                  stack.push(num);
              }
          }
          while (!stack.isEmpty()) {
              map.put(stack.pop(), -1);
          }
          for (int i = 0; i < nums1.length; ++i) {
              ans[i] = map.get(nums1[i]);
          }
          return ans;
      }
  }
 2.2.2.循环寻找一个数组每个元素在它右边出现的第一个大于它的数（leetcode 503. Next Greater Element II）
    代码：
    class Solution {
        public int[] nextGreaterElements(int[] nums) {
            int[] ans = new int[nums.length];
            boolean[] flag = new boolean[nums.length];
            Stack<Integer> stack = new Stack<Integer>();
            for (int i = 0; i < nums.length; ++i) {
                if (i == 0) {
                    stack.push(0);
                } else {
                    while(!stack.isEmpty() && nums[stack.peek()] < nums[i]) {
                        int t = stack.pop();
                        ans[t] = nums[i];
                        flag[t] = true;
                    }
                    stack.push(i);
                }
            }
            for (int i = 0; i < nums.length; ++i) {
                if (stack.isEmpty()) {
                    break;
                } else {
                    while(!stack.isEmpty() && nums[stack.peek()] < nums[i]) {
                        int t = stack.pop();
                        ans[t] = nums[i];
                        flag[t] = true;
                    }
                    if (!flag[i]) {
                        stack.push(i);
                    }                
                }
            }
            for (int i = 0; i < nums.length; ++i) {
                if (!flag[i]) {
                    ans[i] = -1;
                }
            }
            return ans;
        }
    }
    
  2.3.栈和队列的相互转换
  2.3.1.双栈实现队列(leetcode [232] Implement Queue using Stacks)
    代码：
    class MyQueue {

        Stack<Integer> stack1 = new Stack<Integer>();
        Stack<Integer> stack2 = new Stack<Integer>();

        /** Initialize your data structure here. */
        public MyQueue() {

        }

        /** Push element x to the back of queue. */
        public void push(int x) {
            stack1.push(x);
        }

        /** Removes the element from in front of queue and returns that element. */
        public int pop() {
            if (stack2.isEmpty()) {
                while (!stack1.isEmpty()) {
                    stack2.push(stack1.pop());
                }
            } 
            return stack2.pop();
        }

        /** Get the front element. */
        public int peek() {
            if (stack2.isEmpty()) {
                while (!stack1.isEmpty()) {
                    stack2.push(stack1.pop());
                }
            } 
            return stack2.peek();
        }

        /** Returns whether the queue is empty. */
        public boolean empty() {
            return stack1.isEmpty() && stack2.isEmpty();
        }
    }
    2.3.2.双队列实现栈（leetcode [225] Implement Stack using Queues）
      思路：留住最后一个元素
      代码：
      class MyStack {

          Queue<Integer> queue1 = new LinkedList<Integer>();
          Queue<Integer> queue2 = new LinkedList<Integer>();

          /** Initialize your data structure here. */
          public MyStack() {

          }

          /** Push element x onto stack. */
          public void push(int x) {
              queue1.offer(x);
          }

          /** Removes the element on top of the stack and returns that element. */
          public int pop() {
              while (queue1.size() > 1) {
                  queue2.offer(queue1.poll());
              }
              int ans = queue1.poll();
              Queue<Integer> temp = queue1;
              queue1 = queue2;
              queue2 = temp;
              return ans;
          }

          /** Get the top element. */
          public int top() {
              while (queue1.size() > 1) {
                  queue2.offer(queue1.poll());
              }
              int ans = queue1.poll();
              queue2.offer(ans);
              Queue<Integer> temp = queue1;
              queue1 = queue2;
              queue2 = temp;
              return ans;
          }

          /** Returns whether the stack is empty. */
          public boolean empty() {
              return queue1.isEmpty();
          }
      }

