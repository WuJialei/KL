1.参考
1.1.http://fanqieto.top/2018/09/04/LeetCode-%E6%A0%88%E7%B1%BB%E7%AE%97%E6%B3%95%E7%B2%BE%E6%9E%90/
1.2.https://blog.csdn.net/koudaidai/article/details/7571521
1.3.https://my.oschina.net/brianway/blog/1545142

2.实际问题
2.1.括号类
2.1.1.删除最外层的括号(leetcode [1021] Remove Outermost Parentheses)
  关键：判断栈是否为空找到最外层的括号位置；动态记录最外层括号包裹的子字符串
  代码：
  class Solution {
      public String removeOuterParentheses(String S) {
          StringBuilder ans = new StringBuilder("");
          Stack<Character> stack = new Stack<Character>();
          int start = 0;
          boolean flag = false;
          for (int i = 0; i < S.length(); ++i) {
              if (S.charAt(i) == '(') {
                  stack.push('(');
                  if (!flag) {
                      start = i;
                      flag = true;
                  } 
              } else {
                  char c = stack.pop();
                  if (stack.isEmpty()) {
                      ans.append(S.substring(start+1, i));
                      flag = false;
                  }
              }
          }
          return ans.toString();
      }
  }
2.1.2.括号匹配（leetcode [1249] Minimum Remove to Make Valid Parentheses）
  代码：
  class Solution {
      public String minRemoveToMakeValid(String s) {
          Stack<Integer> stack = new Stack<Integer>();
          for (int i = 0; i < s.length(); ++i) {
              if (s.charAt(i) == '(') {
                  stack.push(i);
              } else if (s.charAt(i) == ')'){
                  if (!stack.isEmpty() && s.charAt(stack.peek()) == '(') {
                      stack.pop();
                  } else {
                      stack.push(i);
                  }
              }
          }
          String ans = new String("");
          int end = s.length();
          while (!stack.isEmpty()) {
              int start = stack.pop();
              ans = s.substring(start+1, end) + ans;
              end = start;
          }
          ans = s.substring(0, end) + ans;
          return ans;
      }
  }
2.1.3.括号的分数（leetcode [856] Score of Parentheses）
  代码：
  class Solution {
      public int scoreOfParentheses(String S) {
          Stack<Integer> stack = new Stack<Integer>();
          stack.push(0);
          for (char c : S.toCharArray()) {
              if (c == '(') {
                  // 深度加1， 得分为0
                  stack.push(0);
              } else {
                  // 当前得分加倍，并将该得分加到上一层深度
                  int cur = stack.pop();
                  int last = stack.pop();
                  stack.push(last + Math.max(1, 2 * cur));
              }
          }
          return stack.pop();
      }
  }
2.1.4.反转每对括号内的子串（leetcode [1190] Reverse Substrings Between Each Pair of Parentheses）
  代码：
  class Solution {
      int[] location;
      public String reverseParentheses(String s) {
          StringBuilder ans = new StringBuilder("");
          location = new int[s.length()];
          Stack<Integer> stack = new Stack<Integer>();
          for (int i = 0; i < s.length(); ++i) {
              if (s.charAt(i) == '(') {
                  stack.push(i);
              } else if (s.charAt(i) == ')') {
                  int pre = stack.pop();
                  location[pre] = i;
                  location[i] = pre;
              }
          }
          reverse(s, false, 0, s.length()-1, ans);
          return ans.toString();
      }

      public void reverse(String s, boolean flag, int start, int end, StringBuilder sb) {
          if (flag) {
              for (int i = end; i >= start; --i) {
                  if (s.charAt(i) == ')') {
                      reverse(s, false, location[i]+1, i-1, sb);
                      i = location[i];
                  } else {
                      sb.append(s.charAt(i));
                  }
              }
          } else {
              for (int i = start; i <= end; ++i) {
                  if (s.charAt(i) == '(') {
                      reverse(s, true, i+1, location[i]-1, sb);
                      i = location[i];
                  } else {
                      sb.append(s.charAt(i));
                  }
              }

          }
      }

  }
2.1.5.括号入栈出栈的变型（leetcode [636] Exclusive Time of Functions）
  代码：
  class Solution {
      public int[] exclusiveTime(int n, List<String> logs) {
          // start相当于{, end相当于}
          // {}一定是成对出现成对消除的，即出现顺序符合{}的消除
          int[] ans = new int[n];
          int last = 0;
          Stack<Integer> stack = new Stack<Integer>();
          for (String log : logs) {
              String[] strs = log.split(":");
              int id = Integer.parseInt(strs[0]);
              int cur = Integer.parseInt(strs[2]);
              if (strs[1].equals("start")) {
                  if (!stack.isEmpty()) {
                      ans[stack.peek()] += cur - last;
                  }
                  stack.push(id);
                  last = cur;
              } else {
                  ans[stack.pop()] += cur - last + 1;
                  last = cur + 1;
              }
          }
          return ans;
      }
  }
2.1.6.括号的嵌套之字符串的拼接（leetcode [394] Decode String）
  代码：
  class Solution {

      Stack<Integer> cntS = new Stack<Integer>();
      Stack<String> strS = new Stack<String>();
      StringBuilder ans = new StringBuilder("");

      public String decodeString(String s) {
          int num = 0;
          for(char c : s.toCharArray()) {
              if (c == '[') {
                  cntS.push(num);
                  num = 0;
                  strS.push(ans.toString());
                  ans = new StringBuilder("");
              } else if (c == ']') {
                  StringBuilder tmp = new StringBuilder("");
                  int cnt = cntS.pop();
                  while (cnt > 0) {
                      tmp.append(ans.toString());
                      --cnt;
                  }
                  ans = new StringBuilder(strS.pop().toString() + tmp.toString());
              } else if (c >= '0' && c <= '9') {
                  num = num * 10 + Integer.parseInt(c+"");
              } else {
                  ans.append(c);
              }
          }
          return ans.toString();
      }
  }
  
2.2.单调栈
参考：https://blog.csdn.net/qq_17550379/article/details/86519771
2.2.1.寻找一个数组每个元素在它右边出现的第一个大于它的数(leetcode [496] Next Greater Element I)
  变型：leetcode:[739] Daily Temperatures;
  代码：
  class Solution {
      public int[] nextGreaterElement(int[] nums1, int[] nums2) {
          HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
          Stack<Integer> stack = new Stack<Integer> ();
          int[] ans = new int[nums1.length];
          for (int num : nums2) {
              if (stack.isEmpty()) {
                  stack.push(num);
              } else {
                  // 单调栈是严格单调递减的
                  while (!stack.isEmpty() && stack.peek() < num) {
                      map.put(stack.pop(), num);
                  }
                  stack.push(num);
              }
          }
          while (!stack.isEmpty()) {
              map.put(stack.pop(), -1);
          }
          for (int i = 0; i < nums1.length; ++i) {
              ans[i] = map.get(nums1[i]);
          }
          return ans;
      }
  }
 2.2.2.循环寻找一个数组每个元素在它右边出现的第一个大于它的数（leetcode 503. Next Greater Element II）
    代码：
    class Solution {
        public int[] nextGreaterElements(int[] nums) {
            int[] ans = new int[nums.length];
            boolean[] flag = new boolean[nums.length];
            Stack<Integer> stack = new Stack<Integer>();
            for (int i = 0; i < nums.length; ++i) {
                if (i == 0) {
                    stack.push(0);
                } else {
                    while(!stack.isEmpty() && nums[stack.peek()] < nums[i]) {
                        int t = stack.pop();
                        ans[t] = nums[i];
                        flag[t] = true;
                    }
                    stack.push(i);
                }
            }
            for (int i = 0; i < nums.length; ++i) {
                if (stack.isEmpty()) {
                    break;
                } else {
                    while(!stack.isEmpty() && nums[stack.peek()] < nums[i]) {
                        int t = stack.pop();
                        ans[t] = nums[i];
                        flag[t] = true;
                    }
                    if (!flag[i]) {
                        stack.push(i);
                    }                
                }
            }
            for (int i = 0; i < nums.length; ++i) {
                if (!flag[i]) {
                    ans[i] = -1;
                }
            }
            return ans;
        }
    }
2.2.3.叶值的最小代价生成树(leetcode [1130] Minimum Cost Tree From Leaf Values)
  代码：
  class Solution {
      public int mctFromLeafValues(int[] arr) {
          Stack<Integer> stack = new Stack<Integer>();
          stack.push(Integer.MAX_VALUE);
          int res = 0;
          for (int num : arr) {
              // 对于出现在小于它的数，都要将该数去除，即为寻找该数左右最小的数
              while (num >= stack.peek()) {
                  int little = stack.pop();
                  res += little * Math.min(num, stack.peek());
              }
              stack.push(num);
          }
          while (stack.size() > 2) {
              int top = stack.pop();
              res += top * stack.peek();
          }
          return res;
      }
  }
2.2.4.股票跨度记录（leetcode [901] Online Stock Span）
  代码：
  class StockSpanner {

      List<Integer> list;
      Stack<Integer> stack;
      int index;

      public StockSpanner() {
          // 存个数
          index = -1;
          // 存结果
          list = new ArrayList<Integer>();
          // 最小栈
          stack = new Stack<Integer>();
      }

      public int next(int price) {
          int ret = 1;
          int cur = index;
          while (!stack.isEmpty() && price >= stack.peek()) {
              ret += list.get(cur);
              cur -= list.get(cur);
              stack.pop();
          }
          stack.push(price);
          list.add(ret);
          ++index;
          return ret;      
      }
  }
2.2.5.前缀和+单调栈（leetcode [1124] Longest Well-Performing Interval）
  代码：
  class Solution {
      public int longestWPI(int[] hours) {
          int ans = 0;
          for (int i = 0; i < hours.length; ++i) {
              if (hours[i] > 8) {
                  hours[i] = 1;
              } else {
                  hours[i] = -1;
              }
          }
          int[] preSum = new int[hours.length + 1];
          preSum[0] = 0;
          for (int i = 1; i <= hours.length; ++i) {
              preSum[i] = preSum[i-1] + hours[i-1];
          }
          Stack<Integer> stack = new Stack<Integer>();
          for (int i = 0; i < preSum.length; ++i) {
              if (stack.isEmpty()) {
                  stack.push(i);
              } else if (preSum[i] < preSum[stack.peek()]) {
                  stack.push(i);
              }
          }
          for (int i = preSum.length - 1; i >= 0; --i) {
              int last = i;
              while (!stack.isEmpty() && preSum[stack.peek()] < preSum[i]) {
                  last = stack.pop();
              }
              if (last != i) {
                  ans = Math.max(ans, i - last);
              }
          }
          return ans;
      }
  }
2.2.6.类似单调栈的思路（leetcode [907] Sum of Subarray Minimums）
  代码：
  class Solution {
      public int sumSubarrayMins(int[] A) {
          //思路来源：https://leetcode.flowerplayer.com/2019/04/12/leetcode-907-sum-of-subarray-minimums-%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90/
          int len = A.length;
          int[] leftBigger = new int[len];
          int[] rightBigger = new int[len];
          // 左边相邻连续比A[i]大
          for (int i = 0; i < len; ++i) {
              int cnt = 1;
              int j = i - 1;
              while (j >= 0 && A[j] >= A[i]) {
                  cnt += leftBigger[j];
                  j -= leftBigger[j];
              }
              leftBigger[i] = cnt;
          }
          // 右边相邻连续比A[i]大
          for (int i = len - 1; i >= 0; --i) {
              int cnt = 1;
              int j = i + 1;
              while (j < len && A[j] > A[i]) {
                  cnt += rightBigger[j];
                  j += rightBigger[j];
              }
              rightBigger[i] = cnt;
          }
          long sum = 0;
          for (int i = 0; i < len; ++i) {
              sum += (A[i] * leftBigger[i] * rightBigger[i]);
          }
          return (int)(sum % 1_000_000_007);
      }
  }
2.2.7.与2.2.6类似（leetcode [456] 132 Pattern）
  代码：
  class Solution {
      public boolean find132pattern(int[] nums) {
          int len = nums.length;
          pair[] pairs = new pair[len];
          // nums[i]左侧比它小的里选最小的
          for (int i = 0; i < len; ++i) {
              pairs[i] = new pair();
              int val = nums[i];
              int j = i - 1;
              while (j >= 0) {
                  if (nums[j] < nums[i]) {
                      val = Math.min(val, pairs[j].pre);
                      break;
                  } else {
                      --j;
                  }
              }
              pairs[i].setPre(val);
          }
          // nums[i]右侧比它小的里选最大的
          for (int i = len - 1; i >= 0; --i) {
              int val = Integer.MIN_VALUE;
              int j = i + 1;
              while (j < len) {
                  if (nums[j] < nums[i]) {
                      val = Math.max(val, nums[j]);
                  }
                  ++j;
              }
              pairs[i].setNext(val);
          }
          for (int i = 0; i < len; ++i) {
              if(pairs[i].pre < pairs[i].next && pairs[i].pre < nums[i] && pairs[i].next < nums[i]){
                  return true;
              }
          }
          return false;
      }

      class pair {

          int pre;
          int next;

          public pair () {

          }

          public void setPre (int a) {
              pre = a;
          }

          public void setNext (int b) {
              next = b;
          }
      }
  }


  
2.3.栈和队列的相互转换
2.3.1.双栈实现队列(leetcode [232] Implement Queue using Stacks)
    代码：
    class MyQueue {

        Stack<Integer> stack1 = new Stack<Integer>();
        Stack<Integer> stack2 = new Stack<Integer>();

        /** Initialize your data structure here. */
        public MyQueue() {

        }

        /** Push element x to the back of queue. */
        public void push(int x) {
            stack1.push(x);
        }

        /** Removes the element from in front of queue and returns that element. */
        public int pop() {
            if (stack2.isEmpty()) {
                while (!stack1.isEmpty()) {
                    stack2.push(stack1.pop());
                }
            } 
            return stack2.pop();
        }

        /** Get the front element. */
        public int peek() {
            if (stack2.isEmpty()) {
                while (!stack1.isEmpty()) {
                    stack2.push(stack1.pop());
                }
            } 
            return stack2.peek();
        }

        /** Returns whether the queue is empty. */
        public boolean empty() {
            return stack1.isEmpty() && stack2.isEmpty();
        }
    }
2.3.2.双队列实现栈（leetcode [225] Implement Stack using Queues）
      思路：留住最后一个元素
      代码：
      class MyStack {

          Queue<Integer> queue1 = new LinkedList<Integer>();
          Queue<Integer> queue2 = new LinkedList<Integer>();

          /** Initialize your data structure here. */
          public MyStack() {

          }

          /** Push element x onto stack. */
          public void push(int x) {
              queue1.offer(x);
          }

          /** Removes the element on top of the stack and returns that element. */
          public int pop() {
              while (queue1.size() > 1) {
                  queue2.offer(queue1.poll());
              }
              int ans = queue1.poll();
              Queue<Integer> temp = queue1;
              queue1 = queue2;
              queue2 = temp;
              return ans;
          }

          /** Get the top element. */
          public int top() {
              while (queue1.size() > 1) {
                  queue2.offer(queue1.poll());
              }
              int ans = queue1.poll();
              queue2.offer(ans);
              Queue<Integer> temp = queue1;
              queue1 = queue2;
              queue2 = temp;
              return ans;
          }

          /** Returns whether the stack is empty. */
          public boolean empty() {
              return queue1.isEmpty();
          }
      }
      
2.4.最小栈
2.4.1.实现最小栈（leetcode [155] Min Stack）
  思路：使用辅助栈（非严格单调，如果数据栈和辅助栈同步空间会大一些）
  代码：
  class MinStack {

      Stack<Integer> stack = new Stack<Integer>();
      Stack<Integer> minStack = new Stack<Integer>();

      /** initialize your data structure here. */
      public MinStack() {

      }

      public void push(int x) {
          stack.push(x);
          if (minStack.isEmpty()) {
              minStack.push(x);
          } else {
              if (minStack.peek() >= x) {
                  minStack.push(x);
              }
          }
      }

      public void pop() {
          if (stack.isEmpty()) {
              return;
          }
          int top = stack.pop();
          if (!minStack.isEmpty() && minStack.peek() == top) {
              minStack.pop();
          }
      }

      public int top() {
          return stack.peek();
      }

      public int getMin() {
          return minStack.peek();
      }
  }
  
  2.5.二叉树的遍历
  2.5.1.使用辅助栈实现二叉树非递归中序遍历（leetcode [94] Binary Tree Inorder Traversal）
    代码：
    class Solution {

        List<Integer> ans = new ArrayList<Integer>();
        public List<Integer> inorderTraversal(TreeNode root) {
            /*
            dfs(root);
            return ans;
            */
            Stack<TreeNode> stack = new Stack<TreeNode>();
            List<Integer> ret = new ArrayList<Integer>();
            TreeNode node = root;
            while (node != null || !stack.isEmpty()) {
                while (node != null) {
                    stack.push(node);
                    node = node.left;
                }
                TreeNode n = stack.pop();
                ret.add(n.val);
                node = n.right;
            }
            return ret;
        }

        public void dfs(TreeNode node) {
            if (node == null) {
                return;
            }
            dfs(node.left);
            ans.add(node.val);
            dfs(node.right);
        }

    }
2.5.2.使用辅助栈根据bfs实现非递归的二叉树前序遍历（leetcode [144] Binary Tree Preorder Traversal）
  代码：
  class Solution {

      List<Integer> ans = new ArrayList<Integer>();
      public List<Integer> preorderTraversal(TreeNode root) {
          /*
          dfs(root);
          return ans;
          */
          Stack<TreeNode> stack = new Stack<TreeNode>();
          List<Integer> ret = new ArrayList<Integer>();
          TreeNode node = root;
          while (node != null || !stack.isEmpty()) {
              while (node != null) {
                  stack.push(node);
                  ret.add(node.val);
                  node = node.left;
              }
              TreeNode n = stack.pop();
              node = n.right;
          }
          return ret;
      }

      public void dfs(TreeNode node){
          if (node == null) {
              return;
          }
          ans.add(node.val);
          dfs(node.left);
          dfs(node.right);
      }

  }
2.5.3.使用辅助栈实现二叉树非递归后序遍历（leetcode [145] Binary Tree Postorder Traversal）
  代码：
  class Solution {

      List<Integer> ans = new ArrayList<Integer>();

      public List<Integer> postorderTraversal(TreeNode root) {
          /*
          dfs (root);
          return ans;
          */
          Stack<TreeNode> stack = new Stack<TreeNode>();
          // 与前序遍历的区别，使用LinkedList进行首部插入
          LinkedList<Integer> ret = new LinkedList<Integer>();
          TreeNode node = root;
          while (node != null || !stack.isEmpty()) {
              while (node != null) {
                  stack.push(node);
                  ret.addFirst(node.val);
                  // 先右后左
                  node = node.right;
              }
              TreeNode n = stack.pop();
              node = n.left;
          }
          return ret;
      }

      public void dfs (TreeNode node) {
          if (node == null) {
              return;
          }
          dfs(node.left);
          dfs(node.right);
          ans.add(node.val);
      }

  }
2.5.4.中序遍历的变型（leetcode [173] Binary Search Tree Iterator）
  关键：O（h）内存实现
  代码：
  class BSTIterator {

      List<Integer> list;
      int index;
      Stack<TreeNode> stack;

      public BSTIterator(TreeNode root) {
          /*
          list = new ArrayList<Integer>();
          dfs(root);
          index = 0;
          */
          stack = new Stack<TreeNode>();
          TreeNode node = root;
          while (node != null) {
              stack.push(node);
              node = node.left;
          }
      }

      public void dfs(TreeNode node) {
          if (node == null) {
              return;
          }
          dfs(node.left);
          list.add(node.val);
          dfs(node.right);
      }

      /** @return the next smallest number */
      public int next() {
          /*
          int ret = list.get(index);
          ++index;
          return ret;
          */
          TreeNode node  = stack.pop();
          int ret = node.val;
          node = node.right;
          while (node != null) {
              stack.push(node);
              node = node.left;
          }
          return ret;
      }

      /** @return whether we have a next smallest number */
      public boolean hasNext() {
          return !stack.isEmpty();
          /*
          return index < list.size();
          */
      }
  }


2.6.模拟栈的入栈出栈过程
2.6.1.验证栈序列（leetcode [946] Validate Stack Sequences）
  代码：
  class Solution {
      public boolean validateStackSequences(int[] pushed, int[] popped) {
          Stack<Integer> stack = new Stack<Integer>();
          int i = 0, j = 0;
          int len = pushed.length;
          for (; i <= len;) {
              while (!stack.isEmpty() && stack.peek() == popped[j]) {
                  stack.pop();
                  ++j;
              }
              if (i < len) {
                  stack.push(pushed[i]);
              }
              ++i;

          }
          return j==len;

      }
  }
  
2.7.字符串重复字符的删除
2.7.1.删除字符串指定数目的相邻相同字符（leetcode [1209] Remove All Adjacent Duplicates in String II）
  代码：
  class Solution {
    public String removeDuplicates(String s, int k) {
        Stack<Character> stack = new Stack<Character>();
        HashMap<Character, Stack<Integer>> map = new HashMap<Character, Stack<Integer>>();
        for (char c : s.toCharArray()) {
            if (stack.isEmpty()) {
                stack.push(c);
                if (!map.containsKey(c)) {
                    Stack<Integer> sk = new Stack<Integer>();
                    map.put(c, sk);
                }
                map.get(c).push(1);
            } else {
                if (c == stack.peek()) {
                    if (map.get(c).peek() == k-1) {
                        int cnt = k - 1;
                        while(cnt > 0) {
                            stack.pop();
                            --cnt;
                        }
                        map.get(c).pop();
                    } else {
                        stack.push(c);
                        // map.put(c, map.get(c).pop() + 1);
                        map.get(c).push(map.get(c).pop() + 1);
                    }
                } else {
                    stack.push(c);
                    if (!map.containsKey(c)) {
                        Stack<Integer> sk = new Stack<Integer>();
                        map.put(c, sk);
                    }
                    map.get(c).push(1);
                }

            }
        }
        String ans = new String("");
        while(!stack.isEmpty()) {
            ans = stack.pop() + ans;
        }
        return ans;
    }
}
2.7.2.检查字符串是否由一个指定拆分完整组成（leetcode [1003] Check If Word Is Valid After Substitutions）
  代码：
  class Solution {
      public boolean isValid(String S) {
          /*
          while (S.contains("abc")) {
              S = S.replace("abc", "");
          }
          return S.equals("");
          */
          Stack<Character> stack = new Stack<Character>();
          for (char c : S.toCharArray()) {
              // 如果有c则把前面出现b和a依次除去
              if (c == 'c') {
                  if (stack.isEmpty() || stack.pop() != 'b') {
                      return false;
                  }
                  if (stack.isEmpty() || stack.pop() != 'a') {
                      return false;
                  }
              } else {
                  stack.push(c);
              }
          }
          return stack.isEmpty();
      }
  }
2.7.3.绝对路径的简化（leetcode [71] Simplify Path）
  代码：
  class Solution {
      public String simplifyPath(String path) {
          Stack<String> stack = new Stack<String>();
          String[] strs = path.split("/");
          for (String str : strs) {
              if (str.equals("..")) {
                  if (!stack.isEmpty()) {
                      stack.pop();
                  }
              } else if (!str.equals(".") && !str.equals("")) {
                  stack.push(str);
              }
          }
          if (stack.isEmpty()) {
              return "/";
          }
          StringBuilder sb = new StringBuilder("");
          for (int i = 0; i < stack.size(); ++i) {
              sb.append("/" + stack.get(i));
          }
          return sb.toString();
      }
  }

2.8.NestedInteger嵌套
2.8.1.NestedInteger的反序列化（leetcode [385] Mini Parser）
  思路：
  1. 遍历字符串
  2. 如果当前字符是'['则新建一个NestedInteger入栈
  3. 如果当前字符是0-9或者-，则加入到当前数字字符串序列中
  4. 如果当前字符是','或者']'，如果数字字符串非空，则把该数字加入到栈顶的NestedInteger中，如果当前字符是']'则还要把栈顶元素弹出并添加到新的栈顶元素中
  5. 遍历结束后如果最后的数字序列非空，则把该数字加入栈顶元素并返回栈顶元素，否则直接返回栈顶元素。
  代码：
  class Solution {
      public NestedInteger deserialize(String s) {

          Stack<NestedInteger> stack = new Stack<NestedInteger>();
          StringBuilder str = new StringBuilder("");
          for (char c : s.toCharArray()) {
              if (c == '[') {
                  stack.push(new NestedInteger());
              } else if ((c >= '0' && c <= '9') || (c == '-')) {
                  str.append(c);
              } else {
                  if (str.toString().length() > 0) {
                      NestedInteger n = stack.peek();
                      n.add(new NestedInteger(Integer.parseInt(str.toString())));
                      str = new StringBuilder("");
                  }
                  if (c == ']') {
                      NestedInteger n = stack.pop();
                      if (stack.isEmpty()) {
                          return n;
                      }
                      NestedInteger last = stack.peek();
                      last.add(n);
                  }
              }
          }
          if (str.toString().length() > 0) {
              return new NestedInteger(Integer.parseInt(str.toString()));
          }
          return stack.peek();

      }
  }
2.8.2.NestedInteger展开（leetcode [341] Flatten Nested List Iterator）
  代码：
  public class NestedIterator implements Iterator<Integer> {

      Queue<Integer> queue = new LinkedList<Integer>();

      public NestedIterator(List<NestedInteger> nestedList) {
          dfs(nestedList);
      }

      public void dfs(List<NestedInteger> nestedList){
          for (NestedInteger n : nestedList) {
              if (n.isInteger()) {
                  queue.offer(n.getInteger());
              } else {
                  dfs(n.getList());
              }
          }
      }

      @Override
      public Integer next() {
          return queue.poll();
      }

      @Override
      public boolean hasNext() {
          return !queue.isEmpty();
      }
  }


