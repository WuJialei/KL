1.二叉搜索树：
1.1.二叉搜索树的前、中、后序遍历非递归实现：栈，2.5；
1.2.二叉搜索树的范围和938；
1.3.二叉搜索树比该节点值大的累加和538(先右到底再左)；
1.4.二叉搜索树的插入701(往叶子节点插)；

2.N叉树
2.1.N叉树的前/后序非递归遍历实现589/590;

3.二叉树
3.1.二叉树的前序遍历变体606(括号对)；
3.2.二叉树遍历的普通变体，判断两个兄弟是否是堂兄弟993(记录父亲节点和深度);
3.3.二叉树的任意自顶向下的路径和为指定值437/另一个树的子树572(两个dfs)；
3.4.判断两颗二叉树能否相等或者能否翻转相等951；


1.基本知识
1.1.树的基本概念：https://blog.csdn.net/csdn_aiyang/article/details/84977814
1.2.树的基本算法：cnblogs.com/maybe2030/p/4732377.html
1.3.二叉树的基本算法：https://juejin.im/entry/585b8660128fe1006ddbd45d

2.BST(Binary Sort Tree) 二叉搜索/排序/查找树
2.1.基本点
二叉排序树或者是一棵空树，或者是具有下列性质的二叉树：
　　1) 若左子树不空，则左子树上所有结点的值均小于它的根结点的值；
　　2) 若右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值；
　　3) 左、右子树也分别为二叉排序树；
　　4) 没有键值相等的节点。
  二叉查找树的性质：对二叉查找树进行中序遍历，即可得到有序的数列。
  二叉查找树的时间复杂度：它和二分查找一样，插入和查找的时间复杂度均为O(logn)，但是在最坏的情况下仍然会有O(n)的时间复杂度。
原因在于插入和删除元素的时候，树没有保持平衡。我们追求的是在最坏的情况下仍然有较好的时间复杂度，这就是平衡查找树设计的初衷。
  二叉查找树的高度决定了二叉查找树的查找效率。
  BST的插入、删除、遍历及其他相关概念参考cnblogs.com/maybe2030/p/4732377.html BST部分。
2.2.BST的遍历
2.2.1.二叉搜索树的范围和（leetcode [938] Range Sum of BST）
  基本思路：
  二叉搜索树的中序遍历是升序，其范围即为取排序后的两个范围和
  代码：
  class Solution {
    
      private int ans;
      private int l;
      private int r;

      public void dfs (TreeNode node) {
          if (node == null) {
              return;
          }
          if (node.val >= l && node.val <= r) {
              ans += node.val;
              dfs(node.left);
              dfs(node.right);
          } else if (node.val < l) {
              dfs(node.right);
          } else {
              dfs(node.left);
          }
      }

      public int rangeSumBST(TreeNode root, int L, int R) {
          ans = 0;
          l = L;
          r = R;
          dfs(root);
          return ans;
      }
  }
  2.2.2.二叉搜索树的查找（leetcode [700] Search in a Binary Search Tree）
    代码：（递归/迭代）
    class Solution {
        public TreeNode searchBST(TreeNode root, int val) {
            // TreeNode ret = dfs (root, val);
            TreeNode ret = null;
            if (root == null) {
                return null;
            }
            while (root != null) {
                if (root.val == val) {
                    ret = root;
                    break;
                }else if (val < root.val) {
                    root = root.left;
                } else if (val > root.val) {
                    root = root.right;
                }            
            }
            return ret;
        }

        public TreeNode dfs (TreeNode node, int val) {
            if (node == null) {
                return null;
            }
            if (node.val == val) {
                return node;
            } else if (val < node.val) {
                return dfs(node.left, val);
            } else {
                return dfs(node.right, val);
            }
        }

    }
  2.2.3.二叉搜索树的修剪（leetcode [669] Trim a Binary Search Tree）
    代码：
    class Solution {

        public TreeNode trimBST(TreeNode root, int L, int R) {

            if (root == null) {
                return null;
            }
            if (root.val < L) {
                return trimBST(root.right, L, R);
            }
            if (root.val > R) {
                return trimBST(root.left, L, R);
            }
            root.left = trimBST(root.left, L, R);
            root.right = trimBST(root.right, L, R);
            return root;

        }

    }
2.2.4.二叉搜索树的中序遍历是递增数组（leetcode [653] Two Sum IV - Input is a BST）
  代码：
  class Solution {

      List<Integer> list;
      int k;
      public boolean findTarget(TreeNode root, int k) {
          list = new ArrayList<Integer>();
          this.k = k;
          order(root);
          return dfs(0, list.size() - 1);
      }

      public void order(TreeNode node) {
          if (node == null) {
              return;
          }
          order(node.left);
          list.add(node.val);
          order(node.right);
      }

      public boolean dfs (int start, int end) {
          if (start >= end) {
              return false;
          }
          if (list.get(start) + list.get(end) == k) {
              return true;
          } else if (list.get(start) + list.get(end) < k) {
              return dfs (start + 1, end);
          } else {
              return dfs (start, end - 1);
          }
      }

  }
2.2.5.二叉搜索树比该节点值大的累加和（leetcode [538] Convert BST to Greater Tree）
  代码：
  class Solution {

      int sum = 0;

      public TreeNode convertBST(TreeNode root) {
          if (root == null) {
              return null;
          }
          // dfs先右后左，右到底才会渐渐从底层往左
          convertBST(root.right);
          root.val += sum;
          sum = root.val;
          convertBST(root.left);
          return root;
      }

  }
2.2.6.二叉树搜索树中任意两个节点的最低公共祖先（leetcode [235] Lowest Common Ancestor of a Binary Search Tree）
  代码：
  class Solution {

    int minNode, maxNode;
    
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        minNode = Math.min(p.val, q.val);
        maxNode = Math.max(p.val, q.val);
        return dfs(root);
    }

    public TreeNode dfs (TreeNode node) {
        if (node == null) {
            return node;
        }
        if (node.val < minNode) {
            return dfs(node.right);
        } else if (node.val > maxNode) {
            return dfs(node.left);
        } else {
            return node;
        }

    }

}
2.2.7.二叉搜索树中的众数（leetcode [501] Find Mode in Binary Search Tree）
  代码：
  class Solution {
      int max;
      List<Integer> list;
      HashMap<Integer, Integer> map;

      public int[] findMode(TreeNode root) {
          list = new ArrayList<Integer>();
          max = 0;
          map = new HashMap<Integer, Integer>();
          inOrder(root);
          for (Map.Entry<Integer, Integer> set : map.entrySet()) {
              if (set.getValue() == max) {
                  list.add(set.getKey());
              }
          }
          int[] ans = new int[list.size()];
          for (int i = 0; i < ans.length; ++i) {
              ans[i] = list.get(i);
          }
          return ans;
      }

      public void inOrder (TreeNode node) {
          if (node == null) {
              return;
          }
          inOrder(node.left);
          map.put(node.val, map.getOrDefault(node.val, 0) + 1);
          max = Math.max(max, map.get(node.val));
          inOrder(node.right);
      }
  }
2.2.8.二叉搜索树的插入（leetcode [701] Insert into a Binary Search Tree）
  代码：
  class Solution {

      /*
      public TreeNode insertIntoBST(TreeNode root, int val) {
          if (root == null) {
              return new TreeNode(val);
          }
          if (val < root.val) {
              root.left = insertIntoBST(root.left, val);
          } else {
              root.right = insertIntoBST(root.right, val);
          }
          return root;
      }
      */
      public TreeNode insertIntoBST(TreeNode root, int val) {
          if (root == null) {
              return new TreeNode(val);
          }
          insert(root, val);
          return root;
      }

      public void insert(TreeNode node, int val) {
          if (node == null) {
              return;
          }
          if (val < node.val) {
              if (node.left == null) {
                  node.left = new TreeNode(val);
                  return;
              } else {
                  insert(node.left, val);
              }
          } else {
              if (node.right == null) {
                  node.right = new TreeNode(val);
                  return;
              } else {
                  insert(node.right, val);
              }
          }
      }

  }
2.2.9.由先序遍历构建二叉搜索树（leetcode [1008] Construct Binary Search Tree from Preorder Traversal）
  代码：
  class Solution {

    int[] preorder;
    int index;
    int len;

    public TreeNode bstFromPreorder(int[] preorder) {
        index = 0;
        this.preorder = preorder;
        len = preorder.length - 1;
        return dfs(Integer.MIN_VALUE, Integer.MAX_VALUE);
    }

    public TreeNode dfs(int a, int b) {
        if (index > len) {
            return null;
        }
        if (preorder[index] < a || preorder[index] > b) {
            return null;
        }
        TreeNode node = new TreeNode(preorder[index]);
        ++index;
        node.left = dfs(a, preorder[index-1]);
        node.right = dfs(preorder[index-1], b);
        return node;
    }

}


    
3.N叉树
3.1.N叉树的前序遍历（leetcode [589] N-ary Tree Preorder Traversal）
    代码：
    class Solution {

        List<Integer> ans;

        public List<Integer> preorder(Node root) {
            ans = new ArrayList<Integer>();
            // dfs(root);
            Stack<Node> stack = new Stack<Node>();
            if (root == null) {
                return ans;
            }

            stack.push(root);
            while (!stack.isEmpty()) {
                Node node = stack.pop();
                ans.add(node.val);
                if (node.children != null) {
                    for (int i = node.children.size() - 1; i >= 0; --i) {
                        stack.push(node.children.get(i));
                    }
                }
            }
            return ans;
        }

        public void dfs(Node node) {
            if (node == null) {
                return;
            }
            ans.add(node.val);
            if (node.children != null) {
                for (Node child : node.children) {
                    dfs(child);
                }
            }
        }

    }
3.2.N叉树的后序遍历（leetcode [590] N-ary Tree Postorder Traversal）
  代码：
  class Solution {

      List<Integer> ans;

      public List<Integer> postorder(Node root) {
          ans = new ArrayList<Integer>();
          // dfs(root);
          if (root == null) {
              return ans;
          }
          Stack<Node> stack = new Stack<Node>();
          stack.push(root);
          while (!stack.isEmpty()) {
              Node node = stack.pop();
              ans.add(0, node.val);
              if (node.children != null) {
                  for (Node child : node.children) {
                      stack.push(child);
                  }
              }
          }
          return ans;
      }

      public void dfs(Node node) {
          if (node == null) {
              return;
          }
          if (node.children != null) {
              for (Node child : node.children) {
                  dfs(child);
              }
          }
          ans.add(node.val);
      }

  }
  3.3.N叉树树的深度（leetcode [559] Maximum Depth of N-ary Tree）
    代码：
    class Solution {
      public int maxDepth(Node root) {
          if (root == null) {
              return 0;
          }
          int maxDep = 0;
          for (Node node : root.children) {
              maxDep = Math.max(maxDep, maxDepth(node));
          }
          return 1 + maxDep;
      }
  }
二叉树的深度（leetcode [104] Maximum Depth of Binary Tree）
    代码：
    class Solution {
        public int maxDepth(TreeNode root) {
            if (root == null) {
                return 0;
            }
            return dfs(root);
        }

        public int dfs(TreeNode node){
            if (node == null) {
                return 0;
            } else if (node.left == null && node.right == null) {
                return 1;
            } else {
                return 1 + Math.max(dfs(node.left), dfs(node.right));
            }
        }

    }
    
4.二叉树
4.1.二叉树的遍历（leetcode  [1022] Sum of Root To Leaf Binary Numbers）
  代码：
  class Solution {
        int sum;
        public int sumRootToLeaf(TreeNode root) {
            sum = 0;
            dfs(root, 0);
            return sum;
        }

        public void dfs (TreeNode node, int cntSum) {
            if (node == null) {
                return;
            } else if (node.left == null && node.right == null) {
                sum += cntSum * 2 + node.val;
                return;
            } else {
                dfs(node.left, cntSum * 2 + node.val);
                dfs(node.right, cntSum * 2 + node.val);
            }
        }
    }
 二叉树前序遍历的变体（leetcode [606] Construct String from Binary Tree）
  思路：递归+边界情况考虑
  代码：
  class Solution {
    
      private StringBuilder sb;

      public void dfs (TreeNode node) {
          if (node == null) {
              return;
          }
          sb.append(String.valueOf(node.val));
          // 左右子树皆为空则无必要加入
          if (node.left == null && node.right == null) {
              return;
          }
          // 左右子树存在一个非空，空括号对在左时有影响
          sb.append("(");
          dfs(node.left);
          sb.append(")");
          if (node.right != null) {
              sb.append("(");
              dfs(node.right);
              sb.append(")");
          }
      }


      public String tree2str(TreeNode t) {
          sb = new StringBuilder("");
          dfs(t);
          return sb.toString();
      }
  }
二叉树遍历的普通变体，判断两个兄弟是否是堂兄弟（leetcode [993] Cousins in Binary Tree）
    代码：
    /*
    class Solution {
    
        public class Node {
            int dep;
            TreeNode pre;
        }

        public Node dfs (TreeNode pre, int dep, int val) {
            if (pre == null) {
                return null;
            }
            TreeNode left = pre.left;
            TreeNode right = pre.right;
            if (left != null && left.val == val) {
                Node node = new Node();
                node.dep = dep + 1;
                node.pre = pre;
                return node;
            }
            if (right != null && right.val == val) {
                Node node = new Node();
                node.dep = dep + 1;
                node.pre = pre;
                return node;
            }
            Node xRet = dfs(left, dep+1, val);
            Node yRet = dfs(right, dep+1, val);
            return xRet != null ? xRet : yRet;
        }

        public boolean isCousins(TreeNode root, int x, int y) {
            if (root == null || root.val == x || root.val == y) {
                return false;
            }
            Node xNode = dfs(root, 0, x);
            Node yNode = dfs(root, 0, y);
            return xNode.dep == yNode.dep && xNode.pre != yNode.pre;
        }
    }
    */
    class Solution {

        Map<Integer, TreeNode> parent;
        Map<Integer, Integer> depth;

        public boolean isCousins(TreeNode root, int x, int y) {

            parent = new HashMap<Integer, TreeNode>();
            depth = new HashMap<Integer, Integer>();
            dfs(new TreeNode(-1), root, 0);
            return depth.get(x) == depth.get(y) && parent.get(x) != parent.get(y);

        }

        public void dfs (TreeNode pre, TreeNode node, int cnt) {
            if (node == null) {
                return;
            }
            depth.put(node.val, cnt);
            parent.put(node.val, pre);
            dfs(node, node.left, cnt + 1);
            dfs(node, node.right, cnt + 1);
        }

    }
二叉树的任意自顶向下的路径和为指定值（leetcode [437] Path Sum III / leetcode [572] Subtree of Another Tree）
代码：(437)
  class Solution {

      int cnt;
      int sum;

      public int pathSum(TreeNode root, int sum) {
          cnt = 0;
          this.sum = sum;
          dfs(root);
          return cnt;
      }

      public void dfs (TreeNode node) {
          // 查找node子树的情况(没说以node节点为开始)
          if (node == null) {
              return;
          }
          // 路径以node为节点开始
          dfs1(node, sum);
          
          dfs(node.left);
          dfs(node.right);
      }

      public void dfs1 (TreeNode node, int val) {
          // 查找以node节点开始，值为val的路径数
          if (node == null) {
              return;
          }
          int tmp = val - node.val;
          if (tmp == 0) {
              ++cnt;
          } 
          dfs1(node.left, tmp);
          dfs1(node.right, tmp);     
      }

  }
代码：(572)
  class Solution {
      public boolean isSubtree(TreeNode s, TreeNode t) {
          if (dfs(s, t)) {
              return true;
          }
          if (s == null) {
              return false;
          }
          boolean ans = isSubtree(s.left, t) || isSubtree(s.right, t);
          return ans;
      }

      public boolean dfs (TreeNode pat, TreeNode ex) {
          if (pat == null && ex == null) {
              return true;
          } else if (pat == null || ex == null) {
              return false;
          } else {
              if (pat.val != ex.val) {
                  return false;
              } else {
                  return dfs(pat.left, ex.left) && dfs(pat.right, ex.right);
              }
          }
      }

  }
4.2.二叉树的翻转（leetcode [226] Invert Binary Tree）
    代码：（递归/迭代）
    class Solution {
        public TreeNode invertTree(TreeNode root) {
            if(root == null) {
                return null;
            }
            /*
            // 递归
            TreeNode l = root.left;
            TreeNode r = root.right;
            root.left = invertTree(r);
            root.right = invertTree(l);
            return root;
            */

            // 迭代
            Queue<TreeNode> queue = new LinkedList<TreeNode>();
            queue.offer(root);
            while (!queue.isEmpty()) {
                TreeNode node = queue.poll();
                TreeNode tmp = node.left;
                node.left = node.right;
                node.right = tmp;
                if (node.left != null) {
                    queue.offer(node.left);
                }
                if (node.right != null) {
                    queue.offer(node.right);
                }
            }
            return root;

        }
    }
4.2.1.判断两颗二叉树能否相等或者能否翻转相等（leetcode [951] Flip Equivalent Binary Trees）
  代码：
  class Solution {
      public boolean flipEquiv(TreeNode root1, TreeNode root2) {
          if (root1 == root2) {
              return true;
          }
          if (root1 == null || root2 == null || root1.val != root2.val) {
              return false;
          }
          // 判断左右子节点是否相等或者可以通过翻转相等
          return (flipEquiv(root1.left, root2.left) && flipEquiv(root1.right, root2.right)) || (flipEquiv(root1.left, root2.right) && flipEquiv(root1.right, root2.left));
      }
  }
4.3.二叉树各层的平均值（leetcode [637] Average of Levels in Binary Tree）
    代码：（BFS）
    class Solution {

        Queue<TreeNode> queue;

        public List<Double> averageOfLevels(TreeNode root) {
            queue = new LinkedList<TreeNode>();
            List<Double> list = new ArrayList<Double>();
            if (root == null) {
                return list;
            }
            queue.offer(root);
            while (!queue.isEmpty()) {
                Queue<TreeNode> tmp = new LinkedList<TreeNode>();
                int cnt = 0;
                double sum = 0;
                while(!queue.isEmpty()) {
                    TreeNode node = queue.poll();
                    ++cnt;
                    sum += node.val;
                    if (node.left != null) {
                        tmp.offer(node.left);
                    }
                    if (node.right != null) {
                        tmp.offer(node.right);
                    }
                }
                list.add(sum/cnt);
                queue = tmp;
            }
            return list;
        }
    }
4.4.二叉树的深度（leetcode [543] Diameter of Binary Tree）
  代码：
  class Solution {

      int ans = 0;

      public int diameterOfBinaryTree(TreeNode root) {
          dfs(root);
          return ans;
      }

      public int dfs (TreeNode node) {
          if (node == null) {
              return 0;
          }
          int left = dfs(node.left);
          int right = dfs(node.right);
          ans = Math.max(ans, left + right);
          return Math.max(left, right) + 1;
      }

  }
4.4.1.二叉树是否是深度平衡（leetcode [110] Balanced Binary Tree）
  代码：
  class Solution {
      public boolean isBalanced(TreeNode root) {
          getHeight(root);
          return dfs(root);
      }

      public int getHeight(TreeNode node) {
          if (node == null) {
              return 0;
          }
          node.val = Math.max(getHeight(node.left), getHeight(node.right)) + 1;
          return node.val;
      }

      public boolean dfs(TreeNode node) {
          if (node == null) {
              return true;
          }
          if (node.left == null && node.right == null) {
              return true;
          } else if (node.left == null || node.right == null) {
              int tmp = node.left == null ? node.right.val : node.left.val;
              if (tmp > 1) {
                  return false;
              } else {
                  return true;
              }
          } else {
              if (Math.abs(node.left.val - node.right.val) > 1) {
                  return false;
              } else {
                  return dfs(node.left) && dfs(node.right);
              }
          }

      }

  }
4.4.2.最深叶节点的最近公共祖先（leetcode [1123] Lowest Common Ancestor of Deepest Leaves）
  代码：
  class Solution {
      public TreeNode lcaDeepestLeaves(TreeNode root) {
          if (root == null) {
              return root;
          }
          // 最深叶子节点的最低公共祖先的高度相同
          // 深度优先越深则公共节点越低
          int leftD = depth(root.left);
          int rightD = depth(root.right);
          if (leftD == rightD) {
              return root;
          } else if (leftD > rightD) {
              return lcaDeepestLeaves(root.left);
          } else {
              return lcaDeepestLeaves(root.right);
          }

      }

      public int depth (TreeNode node) {
          if (node == null) {
              return 0;
          }
          return 1 + Math.max(depth(node.left), depth(node.right));
      }
  }
  
4.5.对称二叉树 递归/迭代（leetcode [101] Symmetric Tree）
  代码：
  class Solution {
    public boolean isSymmetric(TreeNode root) {
        if (root == null) {
            return true;
        }
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.offer(root);
        queue.offer(root);
        while (!queue.isEmpty()) {
            TreeNode node1 = queue.poll();
            TreeNode node2 = queue.poll();
            if (node1 == null && node2 == null) {
                continue;
            } else if (node1 != null && node2 != null) {
                if (node1.val != node2.val) {
                    return false;
                }          
            } else {
                return false;
            }
            queue.offer(node1.left);
            queue.offer(node2.right);
            queue.offer(node1.right);
            queue.offer(node2.left);
        }
        return true;
    }

    public boolean dfs (TreeNode node1, TreeNode node2) {
        if (node1 == null && node2 == null) {
            return true;
        } else if (node1 != null && node2 != null) {
            if (node1.val != node2.val) {
                return false;
            } else {
                return dfs(node1.left, node2.right) && dfs(node1.right, node2.left);
            }            
        } else {
            return false;
        }
    }

}
4.6.二叉树节点值相等的最长路径（leetcode [687] Longest Univalue Path）
  代码：
  class Solution {

      int ans;

      public int longestUnivaluePath(TreeNode root) {
          ans = 0;
          dfs(root);
          return ans;
      }

      public void dfs(TreeNode node) {
          if (node == null) {
              return;
          }
          int tmp = 0;
          if (node.left != null && node.left.val == node.val) {
              tmp += dfs1(node.left, node.val) + 1;
          }
          if (node.right != null && node.right.val == node.val) {
              tmp += dfs1(node.right, node.val) + 1;
          }
          ans = Math.max(ans, tmp);
          dfs(node.left);
          dfs(node.right);
      }

      public int dfs1(TreeNode node, int val) {
          if (node == null) {
              return 0;
          }
          int tmp1 = 0;
          int tmp2 = 0;
          if (node.left != null && node.left.val == val) {
              tmp1 = dfs1(node.left, val) + 1;
          }
          if (node.right != null && node.right.val == val) {
              tmp2 = dfs1(node.right, val) + 1;
          }
          return Math.max(tmp1, tmp2);
      }

  }
4.7.根据给定数组构建最大二叉树（leetcode [654] Maximum Binary Tree）
  代码：
  class Solution {

      boolean[] visited;
      int[] nums;

      public TreeNode constructMaximumBinaryTree(int[] nums) {
          int len = nums.length;
          this.nums = nums;
          visited = new boolean[len];
          return dfs(0, len - 1);
      }

      public TreeNode dfs (int start, int end) {
          if (start > end) {
              return null;
          }
          int index = start;
          int maxVal = nums[start];
          for (int i = start; i <= end; ++i) {
              if (!visited[i] && nums[i] > maxVal) {
                  maxVal = nums[i];
                  index = i;
              }
          }
          if (visited[index]) {
              return null;
          }
          visited[index] = true;
          TreeNode node = new TreeNode(nums[index]);
          node.left = dfs(start, index - 1);
          node.right = dfs(index + 1, end);
          return node;
      }

  }
4.8.二叉树中分配硬币（leetcode [979] Distribute Coins in Binary Tree）
  代码：
  class Solution {

      int ans;

      public int distributeCoins(TreeNode root) {
          ans = 0;
          dfs(root);
          return ans;
      }

      // dfs(node)返回node节点要给父节点的个数，可以为负数
      public int dfs(TreeNode node) {
          if (node == null) {
              return 0;
          }
          int left = dfs(node.left);
          int right = dfs(node.right);
          ans += Math.abs(left) + Math.abs(right);
          int val = node.val + left + right - 1;
          return val;
      }

  }
4.9.二叉树删除指定集合中的节点返回剩下的森林（leetcode [1110] Delete Nodes And Return Forest）
  代码：
  class Solution {

      HashSet<Integer> set;
      List<TreeNode> ans;

      public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {
          set = new HashSet<Integer>();
          ans = new ArrayList<TreeNode>();
          for (int i : to_delete) {
              set.add(i);
          }
          if (root == null) {
              return ans;
          }
          root = dfs(root);
          if (root != null) {
              ans.add(root);
          }
          return ans;
      }

      // 若当前节点是删除点，返回null；不是删除点，返回当前节点（子节点删除与否判断完成）
      public TreeNode dfs(TreeNode node) {
          if (node == null) {
              return null;
          }
          node.left = dfs(node.left);
          node.right = dfs(node.right);
          // 节点要删（要删才会产生新树）
          if (set.contains(node.val)) {
              if (node.left != null) {
                  ans.add(node.left);
              }
              if (node.right != null) {
                  ans.add(node.right);
              }
              return null;
          } else {
              return node;
          }
      }

  }
4.10.前序后序数组构建任意满足条件的树（leetcode [889] Construct Binary Tree from Preorder and Postorder Traversal）
  代码：
  class Solution {
      public TreeNode constructFromPrePost(int[] pre, int[] post) {
          int len = pre.length - 1;
          return dfs(pre, post, 0, len, 0, len);
      }

      public TreeNode dfs(int[] pre, int[] post, int preStart, int preEnd, int postStart, int postEnd) {
          if (preStart == preEnd) {
              return new TreeNode(pre[preStart]);
          }
          if (preStart > preEnd) {
              return null;
          }
          TreeNode root = new TreeNode(pre[preStart]);
          int val = pre[preStart + 1];
          for (int i = postStart; i <= postEnd; ++i) {
              if (val == post[i]) {
                  int length = i - postStart;
                  root.left = dfs(pre, post, preStart+1, preStart+1+length, postStart, i);
                  root.right = dfs(pre, post, preStart+2+length, preEnd, i+1, postEnd-1);
                  return root;
              }
          }
          return null;
      }

  }
4.11.使用单调栈解决叶值的最小代价生成数（leetcode [1130] Minimum Cost Tree From Leaf Values）
  思路：https://leetcode-cn.com/problems/minimum-cost-tree-from-leaf-values/solution/dong-tai-gui-hua-dan-diao-zhan-python3-by-smoon1-2/
  代码：
  class Solution {
      public int mctFromLeafValues(int[] arr) {
          Stack<Integer> stack = new Stack<Integer>();
          stack.push(Integer.MAX_VALUE);
          int res = 0;
          for (int num : arr) {
              // 对于出现在小于它的数，都要将该数去除，即为寻找该数左右最小的数
              while (num >= stack.peek()) {
                  int little = stack.pop();
                  res += little * Math.min(num, stack.peek());
              }
              stack.push(num);
          }
          while (stack.size() > 2) {
              int top = stack.pop();
              res += top * stack.peek();
          }
          return res;
      }
  }
4.12.二叉树节点与祖先间的最大差值（leetcode [1026] Maximum Difference Between Node and Ancestor）
  代码：
  class Solution {

      int ans;

      public class MinMaxNode {
          int min;
          int max;
          MinMaxNode(int x, int y) { 
              min = x; 
              max = y;
          }
      }

      public int maxAncestorDiff(TreeNode root) {
          ans = Integer.MIN_VALUE;
          dfs(root);
          return ans;
      }

      public MinMaxNode dfs(TreeNode node) {
          if (node == null) {
              return null;
          }
          if(node.left == null && node.right == null) {
              return new MinMaxNode(node.val, node.val);
          } else {
              int min = node.val;
              int max = node.val;
              MinMaxNode left = dfs(node.left);
              MinMaxNode right = dfs(node.right);
              if (left != null) {
                  min = Math.min(min, left.min);
                  max = Math.max(max, left.max);
                  ans = Math.max(Math.abs(node.val - left.min), ans);
                  ans = Math.max(Math.abs(node.val - left.max), ans);
              }
              if (right != null) {
                  min = Math.min(min, right.min);
                  max = Math.max(max, right.max);
                  ans = Math.max(Math.abs(node.val - right.min), ans);
                  ans = Math.max(Math.abs(node.val - right.max), ans);
              }
              min = Math.min(node.val, min);
              max = Math.max(node.val, max);
              return new MinMaxNode(min, max);
          }
      }

  }
4.13 最大二叉树（leetcode [998] Maximum Binary Tree II）
  代码：
  class Solution {
      public TreeNode insertIntoMaxTree(TreeNode root, int val) {
          return dfs(root, val);
      }

      public TreeNode dfs(TreeNode node, int val) {
          if (node == null) {
              return new TreeNode(val);
          }
          if (node.val < val) {
              TreeNode root = new TreeNode(val);
              root.left = node;
              return root;
          } else {
              node.right = dfs(node.right, val);
              return node;
          }
      }

  }
4.14.寻找二叉树左下角的值（leetcode [513] Find Bottom Left Tree Value）
  思路：层次遍历，递归（推荐）
  代码：
  class Solution {
      int ans;
      int maxDepth;
      public int findBottomLeftValue(TreeNode root) {
          /*
          int ans = 0;
          Queue<TreeNode> queue = new LinkedList<TreeNode>();
          queue.offer(root);
          while (!queue.isEmpty()) {
              List<TreeNode> temp = new ArrayList<TreeNode>();
              TreeNode node1 = queue.poll();
              ans = node1.val;
              if (node1.left != null) {
                  temp.add(node1.left);
              }
              if (node1.right != null) {
                  temp.add(node1.right);
              }
              while (!queue.isEmpty()) {
                  TreeNode node2 = queue.poll();
                  if (node2.left != null) {
                      temp.add(node2.left);
                  }
                  if (node2.right != null) {
                      temp.add(node2.right);
                  }
              }
              queue.addAll(temp);
          }
          return ans;
          */
          ans = root.val;
          maxDepth = -1;
          helper(root, 0);
          return ans;
      }

      public void helper(TreeNode node, int depth) {
          if (node == null) {
              return;
          }
          helper(node.left, depth + 1);
          if (depth > maxDepth) {
              maxDepth = depth;
              ans = node.val;
          }
          helper(node.right, depth + 1);
      }

  }
4.15.前序中序无重复节点确定二叉树（leetcode [105] Construct Binary Tree from Preorder and Inorder Traversal）
  代码：
  class Solution {

      private int[] pre;
      private int[] in;

      public TreeNode dfs (int a, int b, int c, int d) {
          if (a > b || c > d) {
              return null;
          }
          if (a == b) {
              return new TreeNode(pre[a]);
          }
          int val = pre[a];        
          int index = -1;
          for(int i = c; i <= d; ++i) {
              if (val == in[i]) {
                  index = i;
                  break;
              }
          }
          if (index == -1) {
              return null;
          }
          TreeNode node = new TreeNode(val);
          node.left = dfs(a+1, a+index-c, c, index-1);
          node.right = dfs(a+index-c+1, b, index+1, d);
          return node;
      }

      public TreeNode buildTree(int[] preorder, int[] inorder) {
          if (preorder == null || inorder == null || preorder.length != inorder.length) {
              return null;
          }
          pre = preorder;
          in = inorder;
          return dfs(0, pre.length - 1, 0, in.length - 1);
      }
  }

    
5.平衡二叉树(Balanced Binary Tree又被称为AVL树，AVL树是最先发明的自平衡二叉查找树,且具有以下性质：
它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。很好的解决了
二叉查找树退化成链表的问题，把插入，查找，删除的时间复杂度最好情况和最坏情况都维持在O(logN)。但是频繁
旋转会使插入和删除牺牲掉O(logN)左右的时间，不过相对二叉查找树来说，时间上稳定了很多。)
5.1.平衡二叉树的建立
5.1.1.有序数组转化为平衡二叉树（leetcode [108] Convert Sorted Array to Binary Search Tree）
  代码：（二分）
  class Solution {
      public TreeNode sortedArrayToBST(int[] nums) {
          return bs(nums, 0, nums.length-1);
      }

      public TreeNode bs(int[] arrays, int start, int end) {
          if (start > end) {
              return null;
          }
          int mid = start + (end - start)/2;
          TreeNode node = new TreeNode(arrays[mid]);
          node.left = bs(arrays, start, mid - 1);
          node.right = bs(arrays, mid + 1, end);
          return node;
      }

  }
  
6.满二叉树/完全二叉树
6.1.给定节点树求所有可能的满二叉树（leetcode [894] All Possible Full Binary Trees）
  代码：
  class Solution {

      HashMap<Integer, List<TreeNode>> map = new HashMap<Integer, List<TreeNode>>();

      public List<TreeNode> allPossibleFBT(int N) {
          List<TreeNode> list = new ArrayList<TreeNode>();
          if (N == 1) {
              list.add(new TreeNode(0));
              return list;
          } else if (N%2 == 1) {
              for(int i = 1; i < N; i = i + 2) {
                  boolean f1 = map.containsKey(i);
                  List<TreeNode> left =  f1 ? map.get(i) : allPossibleFBT(i);
                  if (!f1) {
                      map.put(i, left);
                  }
                  boolean f2 = map.containsKey(N - i - 1);
                  List<TreeNode> right = f2 ? map.get(N - i - 1): allPossibleFBT(N - i - 1);
                  if (!f2) {
                      map.put(N - i - 1, right);
                  }
                  for (TreeNode a : left) {
                      for (TreeNode b : right) {
                          TreeNode root = new TreeNode(0);
                          root.left = a;
                          root.right = b;
                          list.add(root);
                      }
                  }

              }
          }
          return list;
      }
  }
6.2.满二叉树的节点和子节点的值存在二倍关系（根节点从0开始为左*2 + 1，右*2 + 2； 从1开始为左*2，右*2 + 1）（leetcode [1104] Path In Zigzag Labelled Binary Tree）
  代码：
  class Solution {

      public List<Integer> pathInZigZagTree(int label) {
          List<Integer> list = new ArrayList<Integer>();
          while (label >= 1) {
              list.add(label);
              label /= 2;
          }
          // Collections.reverse(list);
          List<Integer> ans = new ArrayList<Integer>();
          boolean flag = true;
          int len = list.size();
          for (int i = 0; i < len; ++i) {
              if (flag) {
                  ans.add(list.get(i));
              } else {
                  int tmp = (new Double(Math.pow(2, len - 1 - i))).intValue();
                  ans.add(3*tmp - 1 - list.get(i));
              }
              flag = !flag;
          }
          Collections.reverse(ans);
          return ans;
      }
  }
  


