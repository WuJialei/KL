重要知识点参考：
1.redo、undo：https://pjmike.github.io/2019/01/14/%E6%B5%85%E6%9E%90MySQL%E4%BA%8B%E5%8A%A1%E4%B8%AD%E7%9A%84redo%E4%B8%8Eundo/
------------------1.https://www.nowcoder.com/discuss/135748
补充说明：
一.基础知识
1.超键、候选键、主键、外键
  主键：数据库表中每一行数据的唯一标识（用户选作元组标识的一个候选键称为主键）
  外键：是表中的一列，其值必须在另一个表的主键中。
  超键：在关系中能唯一标识元组的属性集称为关系模式的超键。
      比如一张学生信息表，学生表中含有学号或者身份证号的任意组合都为此表的超键。如：（学号）、（学号，姓名）、（身份证号，性别）等。
  候选键：不含有多余属性的超键称为候选键，也称为最小超键
      学生表中的候选键为：（学号）、（身份证号）。
 2.自增列做主键优势
   表使用自增主键，那么每次插入新的记录，记录就会顺序添加到当前索引节点的后续位置，当一页写满，就会自动开辟一个新的页；
   使用非自增主键每次插入主键的值，需要自己寻找插入位置，增加了很多开销，同时频繁的移动、分页操作造成了大量的碎片，得到了不够紧凑的索引结构
 7.视图
  视图（子查询）：是从一个或多个表导出的虚拟的表，其内容由查询定义。具有普通表的结构，但是不实现数据存储。对视图的修改：单表视图一般用于查询和
  修改，会改变基本表的数据，多表视图一般用于查询，不会改变基本表的数据。
  作用：
  ①简化了操作，把经常使用的数据定义为视图。
  ②安全性，用户只能查询和修改能看到的数据。
  ③逻辑上的独立性，屏蔽了真实表的结构带来的影响。
9.drop、delete、truncate
  一、SQL中的语法

   1、drop table 表名称                         eg: drop table  dbo.Sys_Test
   2、truncate table 表名称                     eg: truncate  table dbo.Sys_Test                  
   3、delete from 表名称 where 列名称 = 值      eg: delete from dbo.Sys_Test where test='test'

  二、drop，truncate，delete区别
    1、drop (删除表)：删除内容和定义，释放空间。简单来说就是把整个表去掉.以后要新增数据是不可能的,除非新增一个表。
       drop语句将删除表的结构被依赖的约束（constrain),触发器（trigger)索引（index);依赖于该表的存储过程/函数将被保留，但其状态会变为：invalid。
    2、truncate (清空表中的数据)：删除内容、释放空间但不删除定义(保留表的数据结构)。与drop不同的是,只是清空表数据而已。
       注意:truncate 不能删除行数据,要删就要把表清空。
    3、delete (删除表中的数据)：delete 语句用于删除表中的行。delete语句执行删除的过程是每次从表中删除一行，并且同时将该行的删除操作作为事务记录在
    日志中保存以便进行进行回滚操作。
       truncate与不带where的delete ：只删除数据，而不删除表的结构（定义）
    4、truncate table 删除表中的所有行，但表结构及其列、约束、索引等保持不变。新行标识所用的计数值重置为该列的种子。如果想保留标识计数值，请改用
    delete。如果要删除表定义及其数据，请使用 drop table 语句。  
    5、对于由foreign key约束引用的表，不能使用truncate table ，而应使用不带where子句的delete语句。由于truncate table 记录在日志中，所以它不能
    激活触发器。
    6、执行速度，一般来说: drop> truncate > delete。
    7、delete语句是数据库操作语言(dml)，这个操作会放到 rollback segement 中，事务提交之后才生效；如果有相应的 trigger，执行的时候将被触发。
             truncate、drop 是数据库定义语言(ddl)，操作立即生效，原数据不放到 rollback segment 中，不能回滚，操作不触发 trigger。 
10.数据库的设计范式
  https://segmentfault.com/a/1190000013695030
17.count(1),count(*),count(字段)比较：
    参考：https://blog.csdn.net/iFuMI/article/details/77920767
    1. count(1) and count(*)
      当表的数据量大些时，对表作分析之后，使用count(1)还要比使用count(*)用时多了！ 
      从执行计划来看，count(1)和count(*)的效果是一样的。 但是在表做过分析之后，count(1)会比count(*)的用时少些（1w以内数据量），不过差不了多少。 
      如果count(1)是聚索引,id,那肯定是count(1)快。但是差的很小的。 
      因为count(*),自动会优化指定到那一个字段。所以没必要去count(1)，用count(*)，sql会帮你完成优化的 因此：count(1)和count(*)基本没有差别！ 
    2. count(1) and count(字段)
      两者的主要区别是
      （1） count(1) 会统计表中的所有的记录数，包含字段为null 的记录。
      （2） count(字段) 会统计该字段在表中出现的次数，忽略字段为null 的情况。即不统计字段为null 的记录。 
      转自：http://www.cnblogs.com/Dhouse/p/6734837.html
    3.count(*) 和 count(1)和count(列名)区别  
      执行效果上：  
      count(*)包括了所有的列，相当于行数，在统计结果的时候，不会忽略列值为NULL  
      count(1)包括了忽略所有列，用1代表代码行，在统计结果的时候，不会忽略列值为NULL  
      count(列名)只包括列名那一列，在统计结果的时候，会忽略列值为空（这里的空不是只空字符串或者0，而是表示null）的计数，即某个字段值为NULL时，不统计。
      执行效率上：  
      列名为主键，count(列名)会比count(1)快  
      列名不为主键，count(1)会比count(列名)快  
      如果表多个列并且没有主键，则 count（1） 的执行效率优于 count（*）  
      如果有主键，则 select count（主键）的执行效率是最优的  
      如果表只有一个字段，则 select count（*）最优。
      转自：http://eeeewwwqq.iteye.com/blog/1972576

-------------------2.https://juejin.im/post/5d351303f265da1bd30596f9#comment
5.覆盖索引：https://www.cnblogs.com/chenpingzhao/p/4776981.html
表结构问题：
  3.字段为什么要求定义为非null：https://blog.csdn.net/u010737354/article/details/53081830
  
零散问题
  4.超大分页的处理：https://www.cnblogs.com/geningchao/p/6649907.html

-------------------3.https://learnku.com/articles/40216
 我以为我对Mysql索引很了解，直到我遇到了阿里的面试官
   索引失效：https://www.jianshu.com/p/932bcdf2c89f
   索引下推优化：https://juejin.im/post/5deef343e51d455819022033
腾讯面试：一条 SQL 语句执行得很慢的原因有哪些？
   偶尔很慢；一直很慢（没有索引，用错索引-索引失效）
数据库面试题(开发者必看)：
  乐观锁、悲观锁：
      https://juejin.im/post/5b4977ae5188251b146b2fc8
      https://www.jianshu.com/p/f5ff017db62a
推荐收藏！MySQL 重要知识点 / 面试题总结：
  MySQL-InnoDB-MVCC多版本并发控制：https://segmentfault.com/a/1190000012650596
  一条SQL语句在MySQL中如何执行的：https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485097&idx=1&sn=84c89da477b1338bdf3e9fcd65514ac1&chksm=cea24962f9d5c074d8d3ff1ab04ee8f0d6486e3d015cfd783503685986485c11738ccb542ba7&token=79317275&lang=zh_CN#rd
