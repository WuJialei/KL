1.基本用法[参考：https://www.cnblogs.com/nxf-rabbit75/p/10008297.html#auto_id_0]
  注意点：
  a.引入头结点对链表最后的表示很有帮助；
  b.链表结点访问next之前要判空，复杂代码里需要多加留意注意；
  1.1.链表的翻转(leetcode 206. Reverse Linked List)
      头插法(非递归)：
      class Solution {
          public ListNode reverseList(ListNode head) {
              if (head == null || head.next == null) {
                  return head;
              }
              ListNode newHead = null;
              ListNode temp = null;
              while (head != null) {
                  temp = head.next;
                  head.next = newHead;
                  newHead = head;
                  head = temp;
              }
              return newHead;
          }
      }
      递归：
      class Solution {
          public ListNode reverseList(ListNode head) {
              if (head == null || head.next == null) {
                  return head;
              }
              ListNode newHead = reverseList(head.next);
              head.next.next = head;
              head.next = null;
              return newHead;
          }
      }
    1.2.有序链表的合并(leetcode 21. Merge Two Sorted Lists)
      非递归：
      class Solution {
          public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
            if (l1 == null) {
            return l2;
          }
          if (l2 == null) {
            return l1;
          }
          ListNode p = new ListNode(0);
          ListNode ans = p;
          while (l1 != null && l2 != null) {
                  if (l1.val < l2.val) {
                      p.next = new ListNode(l1.val);
                      l1 = l1.next;
                  } else {
                      p.next = new ListNode(l2.val);
                      l2 = l2.next;
                  }
            p = p.next;
          }
          if (l1 != null) {
            p.next = l1;
          }
          if (l2 != null) {
            p.next = l2;
          }
          return ans.next;
          }
      }
      递归：
      class Solution {
          public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
            if (l1 == null) {
            return l2;
          }
          if (l2 == null) {
            return l1;
          }
          if (l1.val < l2.val) {
            l1.next = mergeTwoLists(l1.next, l2);
            return l1;
          } else {
            l2.next = mergeTwoLists(l1, l2.next);
            return l2;
          }
          }
      }
      1.3.链表的去重(leetcode 83. Remove Duplicates from Sorted List)
      class Solution {
          public ListNode deleteDuplicates(ListNode head) {
              if (head == null || head.next == null) {
                  return head;
              }
              ListNode p = new ListNode(0);
              p.next = head;
              ListNode pre = head;
              ListNode cur = head.next;
              while (cur != null) {
                  while(cur != null && cur.val == pre.val) {
                      cur = cur.next;
                  }
                  pre.next = cur;
                  pre = pre.next;
                  cur = cur != null ? cur.next : null;
              }
              return p.next;
          }
      }
      1.4.链表环(快慢指针)
      1.4.1.判断链表是否有环(leetcode 141. Linked List Cycle)
      public class Solution {
          public boolean hasCycle(ListNode head) {
              if (head == null || head.next == null) {
                  return false;
              }
              ListNode slow = head;
              ListNode fast = head.next;
              while (fast != null && fast != slow) {
                  if (fast.next == null) {
                      return false;
                  }
                  fast = fast.next.next;
                  slow = slow.next;
              }
              return fast == null ? false : true;

          }
      }
      1.4.2.求环的入口(leetcode 142. Linked List Cycle II)
      public class Solution {
          public ListNode detectCycle(ListNode head) {
              if (head == null || head.next == null){
            return null;
          }
          ListNode slow = head;
          ListNode fast = head.next;
          // 判断是否有环 若有环求快慢指针在环内的交点
          while (fast != null && fast != slow) {
            if (fast.next == null) {
              return null;
            }
            fast = fast.next.next;
            slow = slow.next;
          }
          if (fast == null) {
            return null;
          }
          slow = head;
          ListNode temp = fast;
          // 计算环的长度 慢指针提前走环的长度
          while (fast.next != temp) {
            fast = fast.next;
            slow = slow.next;
          }
              slow = slow.next;
          fast = head;
          // 快慢指针同时以步幅为1走相遇点长度
          while (slow != fast) {
            slow = slow.next;
            fast = fast.next;
          }
          return slow;

          }
      }
      1.5.判断两条链表相交，有则返回第一个公共交点(leetcode 160. Intersection of Two Linked Lists)
      public class Solution {
          public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
              if (headA == null || headB == null) {
            return null;
          }
          ListNode a = headA, b = headB;
              int cnt = 0;
          while (a != b && cnt <= 2) {
                  if (a.next != null) {
                      a =a.next;
                  } else {
                      a = headB;
                      ++cnt;
                  }
            if (b.next != null) {
                      b = b.next;
                  } else {
                      b = headA;
                      ++cnt;
                  }

          }
          return cnt > 2 ? null : a;
          }
      }
   
2.综合使用
  2.1.利用头插法判断是否是回文链表(leetcode 234. Palindrome Linked List)
  class Solution {
      public boolean isPalindrome(ListNode head) {
          if (head == null || head.next == null) {
              return true;
          }
      int cnt = 0;
      ListNode p = head;
      ListNode pp = head;
      while (p != null) {
        ++cnt;
        p = p.next;
      }
      int num = cnt/2;
      cnt = cnt%2 == 0 ? cnt/2: cnt/2 + 1;
      ListNode pre = head;
      ListNode cur = head.next;
      while (cnt > 1) {
        pre = pre.next;
        cur = cur.next;
        --cnt;
      }
      ListNode l2 = cur;
      pre.next = null;

      ListNode l1 = null;
      ListNode temp = null;
      while (num > 0) {
        temp = pp.next;
        pp.next = l1;
        l1 = pp;
        pp = temp; 
        --num;
      }
      while (l1 != null && l2 != null) {
        if (l1.val != l2.val) {
          return false;
        }
              l1 = l1.next;
              l2 = l2.next;
      }
      return true;
      }
  }
  2.2.寻找链表中每个元素后第一个比它大的元素(leetcode 1019. Next Greater Node In Linked List)
  使用栈
  class Solution {
      public int[] nextLargerNodes(ListNode head) {
          Stack<Pair<Integer, Integer>> stack = new Stack<Pair<Integer, Integer>>();
          int cnt = 0;
          ListNode p = head;
          int len = 0;
          while (p != null) {
              ++len;
              p = p.next;
          }
          int[] ans = new int[len];
          while (head != null) {
              // 链表的每个元素入栈前先把比她小的元素解决直到碰到比他大的元素
              while (!stack.isEmpty() && head.val > stack.peek().getKey()) {
                  ans[stack.peek().getValue()] = head.val;
                  stack.pop();
              }
              // 链表的每一个元素都有入栈
              stack.push(new Pair<>(head.val, cnt++));
              head = head.next;
          }
          return ans;
      }
  }
  2.3.链表的线性遍历应用(leetcode 817.linked-list-components.java)
  class Solution {
      public int numComponents(ListNode head, int[] G) {
          HashSet<Integer> set = new HashSet<Integer>();
          for(int t: G) {
              set.add(t);
          }
          int ans = 0;
          while(head != null) {
              // 找连通图结束的地方
              if (set.contains(head.val) && (head.next == null || !set.contains(head.next.val))) {
                  ++ans;
              }
              head = head.next;
          }
          return ans;
      }
  }
  2.4.使用栈和头插法解决两个链表各代表一个数做带进位加法(leetcode 445. Add Two Numbers II)
  class Solution {
      public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
          Stack<Integer> stack1 = new Stack<Integer>();
          Stack<Integer> stack2 = new Stack<Integer>();
          while (l1 != null) {
              stack1.push(l1.val);
              l1 = l1.next;
          }
          while (l2 != null) {
              stack2.push(l2.val);
              l2 = l2.next;
          }
          ListNode ans = null;
          int flag = 0;
          while (!stack1.empty() && !stack2.empty()) {
              int sum = stack1.pop() + stack2.pop();
              ListNode node = new ListNode((sum + flag) % 10);
              flag = (sum + flag) / 10;
              node.next = ans;
              ans = node;
          }
          while (!stack1.empty()) {
              int sum = stack1.pop();
              ListNode node = new ListNode((sum + flag) % 10);
              flag = (sum + flag) / 10;
              node.next = ans;
              ans = node;
          }
          while (!stack2.empty()) {
              int sum = stack2.pop();
              ListNode node = new ListNode((sum + flag) % 10);
              flag = (sum + flag) / 10;
              node.next = ans;
              ans = node;
          }
          if (flag > 0) {
              ListNode node = new ListNode(flag);
              node.next = ans;
              ans = node;
          }
          return ans;
      }
  }
  2.5.双向链表改为单向链表(leetcode 430. Flatten a Multilevel Doubly Linked List)
  (不难，就是细节多，比较烦)
  class Solution {
      public Node flatten(Node head) {
          if (head == null) {
              return head;
          }
          Node ret = head;
          Node nextNode = head.next;
          Node childNode = head.child;
          Node temp = null;
          if (childNode != null) {
              temp = flatten(childNode);
              head.next = temp;
              temp.prev = head;
              head.child = null;
          }
          while (temp != null) {
              if (temp.next == null) {
                  break;
              }
              temp = temp.next;
          }
          Node temp1 = flatten(nextNode);
          if (temp1 != null) {
              if (temp != null) {
                  temp.next = temp1;
                  temp1.prev = temp;
              } else {
                  head.next = temp1;
                  temp1.prev = head;
              }
          }      
          return ret;
      }
  }
  2.6.链表与二叉树结合
  2.6.1.有序链表转化为平衡二叉树(leetcode [109] Convert Sorted List to Binary Search Tree)
  (平衡二叉树参考:https://blog.csdn.net/javazejian/article/details/53892797#commentBox)
  class Solution {
      private ArrayList<Integer> list;
      public TreeNode sortedListToBST(ListNode head) {
          list = new ArrayList<Integer>();
          // 升序数组映射为平衡二叉树，分数组长度为奇数和偶数情况考虑，奇数情况肯定是平衡二叉树，偶数情况是少一个元素的
          // 奇数情况，可推理得知也是平衡二叉树
          while (head != null) {
              list.add(head.val);
              head = head.next;
          }
          return dfs(0, list.size()-1);
      }

      public TreeNode dfs (int left, int right) {
          if (left > right) {
              return null;
          }
          if (left == right) {
              return new TreeNode(list.get(left));
          }
          int mid = (right - left)/2 + left;
          TreeNode root = new TreeNode(list.get(mid));
          root.left = dfs(left, mid - 1);
          root.right = dfs(mid+1, right);
          return root;
      }
  }

