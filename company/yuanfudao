1.参考：https://www.nowcoder.com/discuss/240129
2.具体
2.1.leetcode 189. 旋转数组
代码：
  class Solution {
      public void rotate(int[] nums, int k) {
          if (nums == null || nums.length < 1 || k <= 0) {
              return;
          }
          k = k % nums.length;
          /*
          while (k > 0) {
              int tmp = nums[nums.length-1];
              for (int i = nums.length-2; i >= 0; --i) {
                  nums[i+1] = nums[i];
              }
              nums[0] = tmp;
              --k;
          }
          */
          reverse(nums, 0, nums.length-1);
          reverse(nums, 0, k-1);
          reverse(nums, k, nums.length-1);
      }

      public void reverse(int[] nums, int start, int end) {
          if (start >= end) {
              return;
          }
          while (start < end) {
              int tmp = nums[start];
              nums[start] = nums[end];
              nums[end] = tmp;
              ++start;
              --end;
          }
      }

  }
  
2.2.leetcode 1. 两数之和
代码：
  class Solution {
      public int[] twoSum(int[] nums, int target) {
          if (nums == null || nums.length < 2) {
              return new int[0];
          }
          HashMap<Integer, List<Integer>> map = new HashMap<>();
          for (int i = 0; i < nums.length; ++i) {
              if (!map.containsKey(nums[i])) {
                  map.put(nums[i], new ArrayList<>());
              }
              map.get(nums[i]).add(i);
          }
          for (int i = 0; i < nums.length; ++i) {
              int val = nums[i];
              if (map.containsKey(target - val)) {
                  for (int index : map.get(target-val)) {
                      if (index != i) {
                          return new int[]{i, index};
                      }
                  }
              }
          }
          return new int[0];
          // int[] ans = {left, right};
          // return ans;

      }
  }
  
2.3.leetcode 面试题 03.05. 栈排序
代码：
  class SortedStack {

      private Stack<Integer> stack;

      public SortedStack() {
          stack = new Stack<>();
      }

      public void push(int val) {
          if (stack.isEmpty()) {
              stack.push(val);
          } else {
              Stack<Integer> tmp = new Stack<>();
              while (!stack.isEmpty()) {
                  if (stack.peek() < val) {
                      tmp.push(stack.pop());
                  } else {
                      break;
                  }
              }
              stack.push(val);
              while(!tmp.isEmpty()){
                  stack.push(tmp.pop());
              }
          }

      }

      public void pop() {
          if (stack.isEmpty()) {
              return;
          }
          stack.pop();
      }

      public int peek() {
          if (stack.isEmpty()) {
              return -1;
          }
          return stack.peek();
      }

      public boolean isEmpty() {
          return stack.isEmpty();
      }
  }
