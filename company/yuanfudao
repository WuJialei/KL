1.参考：https://www.nowcoder.com/discuss/240129
2.具体
2.1.leetcode 189. 旋转数组
代码：
  class Solution {
      public void rotate(int[] nums, int k) {
          if (nums == null || nums.length < 1 || k <= 0) {
              return;
          }
          k = k % nums.length;
          /*
          while (k > 0) {
              int tmp = nums[nums.length-1];
              for (int i = nums.length-2; i >= 0; --i) {
                  nums[i+1] = nums[i];
              }
              nums[0] = tmp;
              --k;
          }
          */
          reverse(nums, 0, nums.length-1);
          reverse(nums, 0, k-1);
          reverse(nums, k, nums.length-1);
      }

      public void reverse(int[] nums, int start, int end) {
          if (start >= end) {
              return;
          }
          while (start < end) {
              int tmp = nums[start];
              nums[start] = nums[end];
              nums[end] = tmp;
              ++start;
              --end;
          }
      }

  }
  
2.2.leetcode 1. 两数之和
代码：
  class Solution {
      public int[] twoSum(int[] nums, int target) {
          if (nums == null || nums.length < 2) {
              return new int[0];
          }
          HashMap<Integer, List<Integer>> map = new HashMap<>();
          for (int i = 0; i < nums.length; ++i) {
              if (!map.containsKey(nums[i])) {
                  map.put(nums[i], new ArrayList<>());
              }
              map.get(nums[i]).add(i);
          }
          for (int i = 0; i < nums.length; ++i) {
              int val = nums[i];
              if (map.containsKey(target - val)) {
                  for (int index : map.get(target-val)) {
                      if (index != i) {
                          return new int[]{i, index};
                      }
                  }
              }
          }
          return new int[0];
          // int[] ans = {left, right};
          // return ans;

      }
  }
  
2.3.leetcode 面试题 03.05. 栈排序
代码：
  class SortedStack {

      private Stack<Integer> stack;

      public SortedStack() {
          stack = new Stack<>();
      }

      public void push(int val) {
          if (stack.isEmpty()) {
              stack.push(val);
          } else {
              Stack<Integer> tmp = new Stack<>();
              while (!stack.isEmpty()) {
                  if (stack.peek() < val) {
                      tmp.push(stack.pop());
                  } else {
                      break;
                  }
              }
              stack.push(val);
              while(!tmp.isEmpty()){
                  stack.push(tmp.pop());
              }
          }

      }

      public void pop() {
          if (stack.isEmpty()) {
              return;
          }
          stack.pop();
      }

      public int peek() {
          if (stack.isEmpty()) {
              return -1;
          }
          return stack.peek();
      }

      public boolean isEmpty() {
          return stack.isEmpty();
      }
  }
  
2.4.leetcode 222. 完全二叉树的节点个数
代码：
  class Solution {

      public int cntNum(int k) {
          if (k == 0) {
              return 1;
          }
          if (k == 1) {
              return 2;
          }
          int val = cntNum(k/2);
          if (k%2 == 0) {
              return val * val;
          } else {
              return val * val * 2;
          }

      }

      public int height (TreeNode node) {
          if (node == null) {
              return 0;
          }
          return 1 + Math.max(height(node.left), height(node.right));
      }

      public int countNodes(TreeNode root) {
          if (root == null) {
              return 0;
          }
          int lH = height(root.left);
          int rH= height(root.right);
          if (lH > rH) {
              // return countNodes(root.left) + cntNum(rH);
              return countNodes(root.left) + (1 << rH);
          } else {
              // return countNodes(root.right) + cntNum(lH);
              return countNodes(root.right) + (1 << lH);
          }
      }
  }
  
2.5.leetcode 剑指 Offer 36. 二叉搜索树与双向链表
代码：
  class Solution {

      private Node head;
      private Node last;

      public Node treeToDoublyList(Node root) {
          if (root == null) {
              return null;
          }
          dfs(root);
          head.left = last;
          last.right = head;
          return head;
      }

      public void dfs (Node node) {
          if (node == null) {
              return;
          }
          // inorder
          dfs(node.left);
          if (last != null) {
              last.right = node;
          } else {
              head = node;
          }
          node.left = last;
          last = node;
          dfs(node.right);

      }

  }
  
2.6.leetcode 98. 验证二叉搜索树
代码：
  /*
  class Solution {
    
      TreeNode pre;

      public boolean isValidBST(TreeNode root) {
          if (root == null) {
              return true;
          }
          if (!isValidBST(root.left)) {
              return false;
          }
          if (pre != null && pre.val >= root.val) {
              return false;
          }
          pre = root;
          return isValidBST(root.right);
      }
  }
  */
  class Solution {

      public boolean dfs (TreeNode node, int val, int flag) {
          if (node == null) {
              return true;
          }
          if (flag == 0) {
              if (node.val >= val) {
                  return false;
              }
          } else {
              if (node.val <= val) {
                  return false;
              }
          }
          return dfs(node.left, val, flag) && dfs(node.right, val, flag);
      }

      public boolean isValidBST(TreeNode root) {
          if (root == null) {
              return true;
          }
          if (!dfs(root.left, root.val, 0) || !dfs(root.right, root.val, 1)) {
              return false;
          }
          return isValidBST(root.left) && isValidBST(root.right);
      }
  }
  
2.7.leetcode 215. 数组中的第K个最大元素
代码：
  class Solution {

      public int find (int[] nums, int left, int right, int k) {
          if (left >= right) {
              if (left == k) {
                  return nums[k];
              }
              return -1;
          }
          int l = left;
          int r = right;
          int midVal = nums[l];
          while (l < r) {
              while (l < r && nums[r] >= midVal) {
                  --r;
              }
              while (l < r && nums[l] <= midVal) {
                  ++l;
              }
              if (l < r) {
                  int tmp = nums[l];
                  nums[l] = nums[r];
                  nums[r] = tmp;
              }
          }
          int tmp = nums[l];
          nums[left] = tmp;
          nums[l] = midVal;
          if (l == k) {
              return nums[l];
          } else if (l < k) {
              return find(nums, l+1, right, k);
          } else {
              return find(nums, left, l-1, k);
          }
      } 

      public int findKthLargest(int[] nums, int k) {
          if (nums == null || k < 1 || nums.length < k) {
              return -1;
          }
          return find(nums, 0, nums.length-1, nums.length-k);
      }
  }
  
2.8.562. 矩阵中最长的连续1线段
代码：
  class Solution {

      private int[][] direction = {{0, -1}, {-1, 0}, {-1, -1}, {-1, 1}};

      public int longestLine(int[][] M) {
          if (M == null || M.length < 1 || M[0].length < 1) {
              return 0;
          }
          int m = M.length;
          int n = M[0].length;
          int[][][] dp = new int[m][n][4];
          int ans = 0;
          for (int i = 0; i < m; ++i) {
              for (int j = 0; j < n; ++j) {
                  if (M[i][j] == 1) {
                      for (int k = 0; k < 4; ++k) {
                          dp[i][j][k] = 1;
                          ans = Math.max(ans, dp[i][j][k]);
                          int x = i + direction[k][0];
                          int y = j + direction[k][1];
                          if (x < 0 || x >= m || y < 0 || y >= n) {
                              continue;
                          }
                          dp[i][j][k] += dp[x][y][k];
                          ans = Math.max(ans, dp[i][j][k]);
                      }
                  }
              }
          }
          return ans;
      }
  }
  
2.9.leetcode448. 找到所有数组中消失的数字
代码：
  class Solution {
      public List<Integer> findDisappearedNumbers(int[] nums) {
          // 时间O(n)
          // 空间O(1)
          List<Integer> ans = new ArrayList<>();
          if (nums == null || nums.length < 1) {
              return ans;
          }
          for (int num : nums) {
              int index = Math.abs(num) - 1;
              if (nums[index] > 0) {
                  nums[index] *= -1;
              }
          }
          for (int i = 1; i <= nums.length; ++i) {
              if (nums[i-1] > 0) {
                  ans.add(i);
              }
          }
          return ans;
      }
  }

2.10.leetcode 257. 二叉树的所有路径
代码：
  class Solution {

      private List<String> ans;

      public void dfs (TreeNode node, List<Integer> list) {
          if (node == null) {
              return;
          }
          list.add(node.val);
          if (node.left == null && node.right == null) {
              StringBuilder sb = new StringBuilder("");
              for (int i = 0; i < list.size(); ++i) {
                  if (i == list.size()-1) {
                      sb.append(list.get(i));
                  } else {
                      sb.append(list.get(i)).append("->");
                  }
              }
              list.remove(list.size()-1);
              ans.add(sb.toString());
              return;
          }

          if (node.left != null) {
              dfs(node.left, list);
          }
          if (node.right != null) {
              dfs(node.right, list);
          }
          list.remove(list.size()-1);
      }

      public List<String> binaryTreePaths(TreeNode root) {
          ans = new ArrayList<>();
          List<Integer> list = new ArrayList<>();
          dfs(root, list);
          return ans;
      }
  }
  
2.11.leetcode 124. 二叉树中的最大路径和
代码：
  class Solution {

      private int ans;

      public int dfs (TreeNode node) {
          if (node == null) {
              return 0;
          }
          int l = Math.max(0, dfs(node.left));
          int r = Math.max(0, dfs(node.right));
          ans = Math.max(ans, l+r+node.val);
          return node.val + Math.max(l, r);
      }

      public int maxPathSum(TreeNode root) {
          ans = Integer.MIN_VALUE;
          if (root == null) {
              return 0;
          }
          // dfs()函数返回函数单向最大
          dfs(root);
          return ans;
      }
  }
  
2.12.leetcode 450. 删除二叉搜索树中的节点
思路：https://leetcode-cn.com/problems/delete-node-in-a-bst/solution/450-shan-chu-er-cha-sou-suo-shu-zhong-de-jie-dia-6/
代码：
  class Solution {
      public TreeNode deleteNode(TreeNode root, int key) {
          if (root == null) {
              return null;
          }
          if (key < root.val) {
              root.left = deleteNode(root.left, key);
              return root;
          } else if (key > root.val) {
              root.right = deleteNode(root.right, key);
              return root;
          } else {
              if (root.left == null) {
                  return root.right;
              } else if (root.right == null) {
                  return root.left;
              } else {
                  TreeNode node = root.right;
                  while (node.left != null) {
                      node = node.left;
                  }
                  node.left = root.left;
                  return root.right;
              }
          }
      }
  }

2.13.组合总数
2.13.1.leetcode 39. 组合总和
代码：
  class Solution {

      public void dfs(int[] nums, int start, int target, List<List<Integer>> ans, List<Integer> list) {
          if (target == 0) {
              ans.add(new ArrayList<>(list));
              return;
          }
          for (int i = start; i < nums.length; ++i) {
              if (target < nums[i]) {
                  break;
              }
              list.add(nums[i]);
              dfs(nums, i, target-nums[i], ans, list);
              list.remove(list.size()-1);
          }
      }

      public List<List<Integer>> combinationSum(int[] candidates, int target) {
          List<List<Integer>> ans = new ArrayList<>();
          if (candidates == null || candidates.length < 1) {
              return ans;
          }
          List<Integer> list = new ArrayList<>();
          Arrays.sort(candidates);
          dfs(candidates, 0, target, ans, list);
          return ans;
      }
  }
2.13.2.leetcode 40. 组合总和 II
代码：
  class Solution {
      public void dfs(int[] nums, int start, int target, List<List<Integer>> ans, List<Integer> list) {
          if (target == 0) {
              ans.add(new ArrayList<>(list));
              return;
          }
          for (int i = start; i < nums.length; ++i) {
              if (target < nums[i]) {
                  break;
              }
              if (i > start && nums[i] == nums[i-1]) {
                  continue;
              }
              list.add(nums[i]);
              dfs(nums, i+1, target-nums[i], ans, list);
              list.remove(list.size()-1);
          }
      }

      public List<List<Integer>> combinationSum2(int[] candidates, int target) {
          List<List<Integer>> ans = new ArrayList<>();
          if (candidates == null || candidates.length < 1) {
              return ans;
          }
          List<Integer> list = new ArrayList<>();
          Arrays.sort(candidates);
          dfs(candidates, 0, target, ans, list);
          return ans;
      }
  }
  
2.14.leetcode 658. 找到 K 个最接近的元素
思路：https://leetcode-cn.com/problems/find-k-closest-elements/solution/pai-chu-fa-shuang-zhi-zhen-er-fen-fa-python-dai-ma/
代码：
  class Solution {
      public List<Integer> findClosestElements(int[] arr, int k, int x) {
          List<Integer> ans = new ArrayList<>();
          if (arr == null || arr.length < k) {
              return ans;
          }
          int l = 0;
          int r = arr.length - k;
          while (l < r) {
              int mid = l + (r - l)/2;
              // if (Math.abs(x - arr[mid]) > Math.abs(x - arr[mid+k])) {
              if (x - arr[mid] > arr[mid+k] - x) {
                  l = mid + 1;
              } else {
                  r = mid;
              }
          }
          for (int i = l; i < l + k; ++i) {
              ans.add(arr[i]);
          }
          return ans;
      }
  }
  
2.15.leetcode 316. 去除重复字母
思路：https://leetcode-cn.com/problems/remove-duplicate-letters/solution/java-zhan-shi-xian-by-5jiong-jie/
代码：
  class Solution {
      public String removeDuplicateLetters(String s) {
          if (s == null || s.length() < 1) {
              return s;
          }
          Stack<Character> stack = new Stack<>();
          for (int i = 0; i < s.length(); ++i) {
              char cur = s.charAt(i);
              if (stack.contains(cur)) {
                  continue;
              }
              while (!stack.isEmpty() && stack.peek() > cur && s.indexOf(stack.peek(), i) != -1) {
                  stack.pop();
              }
              stack.push(cur);
          }
          StringBuilder sb = new StringBuilder("");
          for (int i = 0; i < stack.size(); ++i) {
              sb.append(stack.get(i));
          }
          return sb.toString();
      }
  }

2.16.leetcode 剑指 Offer 22. 链表中倒数第k个节点
代码：
  class Solution {
      public ListNode getKthFromEnd(ListNode head, int k) {
          if (head == null || k < 1) {
              return null;
          }
          ListNode fast = head;
          ListNode slow = head;
          int cnt = k;
          while (cnt > 0 && fast != null) {
              fast = fast.next;
              --cnt;
          }
          if (fast == null) {
              if (cnt == 0) {
                  return slow;
              } else{
                  return null;
              }
          }
          while (fast != null) {
              slow = slow.next;
              fast = fast.next;
          }
          return slow;
      }
  }

2.17.leetcode 442. 数组中重复的数据
代码：
  class Solution {
      public List<Integer> findDuplicates(int[] nums) {
          List<Integer> ans = new ArrayList<>();
          if (nums == null || nums.length < 1) {
              return ans;
          }
          for (int num : nums) {
              nums[Math.abs(num)-1] *= -1;
          }
          for (int num : nums) {
              if (nums[Math.abs(num)-1] > 0) {
                  nums[Math.abs(num)-1] *= -1;
                  ans.add(Math.abs(num));
              }
          }
          return ans;
      }
  }
  
2.18.leetcode 958. 二叉树的完全性检验
代码：
  class Solution {
      public boolean isCompleteTree(TreeNode root) {
          if (root == null) {
              return true;
          }
          Queue<TreeNode> queue = new LinkedList<>();
          queue.offer(root);
          // null是否是第一次出现
          boolean first = false;
          while (!queue.isEmpty()) {
              int cnt = queue.size();
              while (cnt > 0) {
                  TreeNode node = queue.poll();
                  if (node != null) {
                      if (first) {
                          return false;
                      }
                      queue.offer(node.left);
                      queue.offer(node.right);
                  } else {
                      first = true;
                  }
                  --cnt;
              }
          }
          return true;
      }
  }
  
2.19.leetcode 239. 滑动窗口最大值
代码：
  class Solution {
      public int[] maxSlidingWindow(int[] nums, int k) {
          if (nums == null || nums.length < k) {
              return new int[0];
          }
          // 基于双向队列实现一个单调递减队列
          Deque<Integer> queue = new ArrayDeque<>();
          int len = nums.length;
          int cnt = 0;
          int[] ans = new int[len-k+1];
          for (int i = 0; i < len; ++i) {
              if (i >= k) {
                  if (queue.peekFirst() == nums[i-k]) {
                      queue.pollFirst();
                  }
              }
              while (!queue.isEmpty() && queue.peekLast() < nums[i]) {
                  queue.pollLast();
              }
              queue.offerLast(nums[i]);
              if (i >= k-1) {
                  ans[cnt++] = queue.peekFirst();
              }
          }
          return ans;
          // PriorityQueue<Integer> queue = new PriorityQueue<>(
          //     (a, b) -> b - a
          // );
          // int[] ans = new int[nums.length - k + 1];
          // int cnt = 0;
          // for (int i = 0; i < nums.length; ++i) {
          //     if (queue.size() < k) {
          //         queue.offer(nums[i]);
          //     } else {
          //         ans[cnt++] = queue.peek();
          //         queue.remove(nums[i-k]);
          //         queue.offer(nums[i]);
          //     }
          // }
          // ans[cnt++] = queue.peek();
          // return ans;
      }
  }
  
2.20.leetcode 99. 恢复二叉搜索树
参考：https://leetcode-cn.com/problems/recover-binary-search-tree/solution/zhong-xu-bian-li-by-powcai/
代码：
  class Solution {

      private TreeNode first;
      private TreeNode second;
      private TreeNode pre = new TreeNode(Integer.MIN_VALUE);

      public void inOrder(TreeNode node) {
          if (node == null) {
              return;
          }
          inOrder(node.left);
          if (first == null && pre.val > node.val) {
              first = pre;
          }
          if (first != null && pre.val > node.val) {
              second = node;
          }
          pre = node;
          inOrder(node.right);
      }

      public void recoverTree(TreeNode root) {
          // 二叉搜索树中序遍历有序
          inOrder(root);
          int tmp = first.val;
          first.val = second.val;
          second.val = tmp;
      }
  }

2.21.leetcode 199. 二叉树的右视图
代码：
  class Solution {

      private int totalHeight;
      private int curHeight;
      private List<Integer> ans;

      public int getHeight (TreeNode node) {
          if (node == null) {
              return 0;
          }
          return 1 + Math.max(getHeight(node.left), getHeight(node.right));
      }

      public void dfs (TreeNode node, int height) {
          if (node == null || height > totalHeight) {
              return;
          }
          if (height >= curHeight) {
              ans.add(node.val);
              curHeight++;
          }
          dfs(node.right, height + 1);
          dfs(node.left, height + 1);
      }

      public List<Integer> rightSideView(TreeNode root) {
          curHeight = 0;
          totalHeight = getHeight(root);
          ans = new ArrayList<Integer>();
          dfs(root, curHeight);
          return ans;
      }
  }

2.22 leetcode 179. 最大数
代码：
  class Solution {
      public String largestNumber(int[] nums) {
          if (nums == null || nums.length < 1) {
              return null;
          }
          String[] strs = new String[nums.length];
          for (int i = 0; i < nums.length; ++i) {
              strs[i] = String.valueOf(nums[i]);
          }
          Arrays.sort(
              strs,
              (a, b) -> {
                  return (b+a).compareTo(a+b);
              }
          );
          StringBuilder sb = new StringBuilder("");
          for (String str : strs) {
              sb.append(str);
          }
          if (sb.toString().charAt(0) == '0') {
              return "0";
          }
          return sb.toString();
      }
  }
  
2.23 leetcode 628. 三个数的最大乘积
代码：
  class Solution {
      public int maximumProduct(int[] nums) {
          if (nums == null || nums.length < 3) {
              return 0;
          }
          // 线性扫描找出最大的三个数和最小的两个数
          int min1 = Integer.MAX_VALUE;
          int min2 = Integer.MAX_VALUE;
          int max1 = Integer.MIN_VALUE;
          int max2 = Integer.MIN_VALUE;
          int max3 = Integer.MIN_VALUE;
          for (int num : nums) {
              if (num < min2) {
                  min1 = min2;
                  min2 = num;
              } else if (num < min1) {
                  min1 = num;
              }
              if (num > max1) {
                  max3 = max2;
                  max2 = max1;
                  max1 = num;
              } else if (num > max2) {
                  max3 = max2;
                  max2 = num;
              } else if (num > max3) {
                  max3 = num;
              }
          }
          return Math.max(min1*min2*max1, max1*max2*max3);
          // Arrays.sort(nums);
          // int a = nums[0] * nums[1] * nums[nums.length-1];
          // int b = nums[nums.length-3] * nums[nums.length-2] * nums[nums.length-1];
          // return Math.max(a, b);
      }
  }
  
2.24 leetcode 剑指 Offer 54. 二叉搜索树的第k大节点
代码：
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode(int x) { val = x; }
   * }
   */
  class Solution {

      private int k;
      private int ans;

      public void dfs (TreeNode root) {
          if (root == null || k <= 0) {
              return;
          }
          dfs(root.right);
          if (k <= 0) {
              return;
          }
          ans = root.val;
          --k;
          if (k <= 0) {
              return;
          }
          dfs(root.left);
      }

      public int kthLargest(TreeNode root, int k) {
          this.k = k;
          ans = -1;
          dfs(root);
          return ans;
      }
  }

2.25 leetcode 80. 删除排序数组中的重复项 II
代码：
  class Solution {
      public int removeDuplicates(int[] nums) {
          if (nums == null || nums.length < 1) {
              return 0;
          }  
          int index = 0;
          int len = nums.length;
          for (int i = 0; i < len; ++i) {
              int cnt = 1;
              while (i+1 < len && nums[i] == nums[i+1]) {
                  ++cnt;
                  ++i;
              }
              if (cnt == 1) {
                  nums[index++] = nums[i];
              } else if (cnt >= 2) {
                  nums[index++] = nums[i];
                  nums[index++] = nums[i];
              }
          }
          return index;
      }
  }
  
2.26 leetcode 445. 两数相加 II
代码：
  class Solution {

      public ListNode reverse (ListNode node) {
          if (node == null || node.next == null) {
              return node;
          }
          ListNode ans = new ListNode(-1);
          while (node != null) {
              ListNode tmp = new ListNode(node.val);
              tmp.next = ans.next;
              ans.next = tmp;
              node = node.next;
          }
          return ans.next;
      }

      public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
          if (l1 == null) {
              return l2;
          }
          if (l2 == null) {
              return l1;
          }
          ListNode ll1 = reverse(l1);
          ListNode ll2 = reverse(l2);
          ListNode ans = new ListNode(-1);
          ListNode ret = ans;
          int pre = 0;
          while (ll1 != null && ll2 != null) {
              int tmp = ll1.val + ll2.val + pre;
              ListNode cur = new ListNode(tmp%10);
              ans.next = cur;
              ans = ans.next;
              pre = tmp/10;
              ll1 = ll1.next;
              ll2 = ll2.next;
          }
          while (ll1 != null) {
              int tmp = ll1.val + pre;
              ListNode cur = new ListNode(tmp%10);
              ans.next = cur;
              ans = ans.next;
              pre = tmp/10;
              ll1 = ll1.next;
          }
          while (ll2 != null) {
              int tmp = ll2.val + pre;
              ListNode cur = new ListNode(tmp%10);
              ans.next = cur;
              ans = ans.next;
              pre = tmp/10;
              ll2 = ll2.next;
          }
          if (pre > 0) {
              ListNode tmp = new ListNode(pre);
              ans.next = tmp;
          }
          return reverse(ret.next);
      }
  }
  
2.27 leetcode1254. 统计封闭岛屿的数目
代码：
  class Solution {

      private int[][] data;
      private int ans;
      private boolean[][] visited;

      private int[] dx = {-1, 0, 1, 0};
      private int[] dy = {0, 1, 0, -1};

      public int dfs (int x, int y) {
          if (x < 0 || x >= data.length || y < 0 || y >= data[0].length) {
              return 0;
          }
          if (visited[x][y]) {
              return 2;
          }
          if (data[x][y] == 1) {
              return 1;
          }
          visited[x][y] = true;
          boolean flag = true;
          for (int i = 0; i < dx.length; ++i) {
              if (dfs(x+dx[i], y+dy[i]) == 0) {
                  flag = false;
              }
          }
          if (!flag || x == 0 || x == data.length-1 || y == 0 || y == data[0].length-1) {
              return 0;
          }
          return 1;
      }

      public int closedIsland(int[][] grid) {
          if (grid == null || grid.length < 1 || grid[0].length < 1) {
              return 0;
          }
          data = grid;
          ans = 0;
          int m = grid.length;
          int n = grid[0].length;
          visited = new boolean[m][n];
          for (int i = 0; i < m; ++i) {
              for (int j = 0; j < n; ++j) {
                  if (data[i][j] == 0 && !visited[i][j]) {
                      if (dfs(i, j) == 1) {
                          ++ans;
                      }
                  }
              }
          }
          return ans;
      }
  }
  
2.28 leetcode 234. 回文链表
代码：
  class Solution {
      public boolean isPalindrome(ListNode head) {
          if (head == null || head.next == null) {
              return true;
          }
          if (head.next.next == null) {
              return head.val == head.next.val;
          }
          // O(n)时间复杂度，O(1)空间复杂度解决，需要将前半部分链表翻转然后比较
          ListNode slow = head;
          ListNode fast = head.next;
          ListNode pre = new ListNode(-1);
          while (fast != null && fast.next != null) {
              ListNode tmp = new ListNode(slow.val);
              tmp.next = pre.next;
              pre.next = tmp;
              slow = slow.next;
              fast = fast.next.next;
          }
          if (fast == null) {
              slow = slow.next;
          } else {
              ListNode tmp = new ListNode(slow.val);
              tmp.next = pre.next;
              pre.next = tmp;
              slow = slow.next;
          }
          pre = pre.next;
          while (slow != null) {
              if (slow.val != pre.val) {
                  return false;
              }
              slow = slow.next;
              pre = pre.next;
          }
          return true;
      }
  }
  
2.29 leetcode 662. 二叉树最大宽度
代码：
  class Solution {

      private int totalHeight;
      private int[][] nums;
      private int curLeft;
      private int curRight;

      public int getHeight(TreeNode node) {
          if (node == null) {
              return 0;
          }
          return 1 + Math.max(getHeight(node.left), getHeight(node.right));
      }

      public void dfsLeft(TreeNode node, int cnt, int height) {
          if (node == null || height >= totalHeight) {
              return;
          }
          if (height > curLeft) {
              nums[height][0] = cnt;
              ++curLeft;
          }
          dfsLeft(node.left, 2 * cnt + 1, height+1);
          dfsLeft(node.right, 2 * cnt + 2, height+1);
      }

      public void dfsRight(TreeNode node, int cnt, int height) {
          if (node == null || height >= totalHeight) {
              return;
          }
          if (height > curRight) {
              nums[height][1] = cnt;
              ++curRight;
          }
          dfsRight(node.right, 2 * cnt + 2, height+1);
          dfsRight(node.left, 2 * cnt + 1, height+1);
      }

      public int widthOfBinaryTree(TreeNode root) {
          if (root == null) {
              return 0;
          }
          // 每层找最左最右
          totalHeight = getHeight(root);
          nums = new int[totalHeight][2];
          curLeft = 0;
          curRight = 0;
          dfsLeft(root, 0, 0);
          dfsRight(root, 0, 0);
          int ans = 0;
          for (int[] num : nums) {
              ans = Math.max(ans, num[1] - num[0] + 1);
          }
          return ans;
      }
  }
  
2.30 leetcode 518. 零钱兑换 II
代码：
  class Solution {
      public int change(int amount, int[] coins) {
          // dp[i][j] = dp[i-1][j] + dp[i][j-coins[i]]
          // dp[i][j]表示前i个钱币凑够的金额数为j
          if (amount == 0) {
              return 1;
          }
          if (amount < 1 || coins == null || coins.length < 1) {
              return 0;
          }
          Arrays.sort(coins);
          int[][] dp = new int[coins.length+1][amount+1];
          for (int i = 1; i <= coins.length; ++i) {
              dp[i][0] = 1;
              for (int j = 1; j <= amount; ++j) {
                  dp[i][j] = dp[i-1][j];
                  if (j >= coins[i-1]) {
                      dp[i][j] += dp[i][j-coins[i-1]];
                  }
              }
          }
          return dp[coins.length][amount];
      }
  }
  
2.31 leetcode 1143. 最长公共子序列
代码：
  class Solution {
      public int longestCommonSubsequence(String text1, String text2) {
          if (text1 == null || text1.length() < 1 || text2 == null ||text2.length() < 1) {
              return 0;
          }
          int m = text1.length();
          int n = text2.length();
          int[][] dp = new int[m+1][n+1];
          int ans = 0;
          for (int i = 1; i <= m; ++i) {
              for (int j = 1; j <= n; ++j) {
                  dp[i][j] = text1.charAt(i-1) == text2.charAt(j-1) ? dp[i-1][j-1] + 1 : Math.max(dp[i-1][j], dp[i][j-1]);
                  ans = Math.max(ans, dp[i][j]);
              }
          }
          return ans;
      }
  }

2.32 leetcode 847. 访问所有节点的最短路径
参考：https://leetcode-cn.com/problems/shortest-path-visiting-all-nodes/solution/java-7ms-jian-ji-yi-dong-ban-by-zxcodestudy/
代码：
  class Solution {
      public int shortestPathLength(int[][] graph) {
          if (graph == null || graph.length < 1) {
              return 0;
          }
          int len = graph.length;
          boolean[][] visited = new boolean[len][1 << len];
          Queue<int[]> queue = new LinkedList<>();
          for (int i = 0; i < len; ++i) {
              queue.offer(new int[]{i, 1 << i});
              visited[i][1<<i] = true;
          }
          int finalState = (1 << len)- 1;
          int ans = 0;
          while (!queue.isEmpty()) {
              int cnt = queue.size();
              while (cnt > 0) {
                  int[] cur = queue.poll();
                  for (int next : graph[cur[0]]) {
                      int state = cur[1] | (1<<next);
                      if (state == finalState) {
                          return ans + 1;
                      }
                      if (visited[next][state]) {
                          continue;
                      }
                      visited[next][state] = true;
                      queue.offer(new int[]{next, state});
                  }
                  --cnt;
              }
              ++ans;
          }
          return 0;
      }
  }
