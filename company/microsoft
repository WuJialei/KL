1.两数之和（leetcode 1）
  代码：
  class Solution {
      public int[] twoSum(int[] nums, int target) {
          if (nums == null || nums.length < 2) {
              return new int[0];
          }
          HashMap<Integer, Integer> map = new HashMap<>();
          for (int i = 0; i < nums.length; ++i) {
              if (map.containsKey(target - nums[i])) {
                  return new int[]{map.get(target - nums[i]), i};
              }
              map.put(nums[i], i);
          }
          return new int[0];
      }
  }
  
2.字符串转换整数 (leetcode 8)
  代码：
  class Solution {
      public int myAtoi(String str) {
          if (str == null || str.length() < 1) {
              return 0;
          }
          str = str.trim();
          if (str.length() < 1) {
              return 0;
          }
          int sign = 1;
          int index = 0;
          if (str.charAt(index) == '-') {
              sign = -1;
              ++index;
          } else if (str.charAt(index) == '+') {
              ++index;
          } else if (str.charAt(index) < '0' || str.charAt(index) > '9') {
              return 0;
          }
          while (index < str.length() && str.charAt(index) == '0') {
              ++index;
              if (index == str.length()) {
                  return 0;
              }
          }
          String tmp = str.substring(index, str.length());
          int ans = 0;
          for (int i = 0; i < tmp.length(); ++i) {
              int cur = tmp.charAt(i) - '0';
              if (cur < 0 || cur > 9) {
                  break;
              }
              if (ans > Integer.MAX_VALUE/10 || (ans == Integer.MAX_VALUE/10 && cur > Integer.MAX_VALUE%10)) {
                  return sign == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE;
              }
              ans = ans * 10 + cur;
          }
          return sign * ans;
      }
  }

3.翻转字符串里的单词 II（leetcode 186）
  代码：
  class Solution {
    
      public void reverse(char[] s, int start, int end) {
          while (start < end) {
              char c = s[start];
              s[start] = s[end];
              s[end] = c;
              ++start;
              --end;
          }
      }

      public void reverseWords(char[] s) {
          if (s == null || s.length < 1) {
              return;
          }
          // 两次翻转，先全翻转，后每个单词翻转
          reverse(s, 0, s.length-1);
          int start = 0;
          for (int i = 0; i < s.length; ++i) {
              if (s[i] == ' ') {
                  reverse(s, start, i-1);
                  start = i+1;
              } 
          }
          reverse(s, start, s.length-1);
      }
  }
