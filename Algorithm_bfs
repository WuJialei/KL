1.参考：https://oi-wiki.org/graph/bfs/
1.1.bfs基本使用
1.2.记录最短路径序列
1.3.记录最短路径长度
1.4.优先级队列
1.5.双端bfs？

2.1树
2.1.1.n叉树的深度（leetcode [559] Maximum Depth of N-ary Tree）
  代码：
  class Solution {
      public int maxDepth(Node root) {
          return bfs(root);
          // return depth(root);
      }

      public int bfs (Node node) {
          if (node == null) {
              return 0;
          }
          Queue<Node> queue = new LinkedList<>();
          queue.offer(node);
          int ans = 0;
          while (!queue.isEmpty()) {
              ++ans;
              Queue<Node> temp = new LinkedList<>();
              while (!queue.isEmpty()) {
                  Node cur = queue.poll();
                  for (Node child : cur.children) {
                      temp.offer(child);
                  }
              }
              queue = temp;
          }
          return ans;

      }

      public int depth(Node node) {
          if (node == null) {
              return 0;
          } else if (node.children == null) {
              return 1;
          } else {
              int ans = 0;
              for (Node child : node.children) {
                  ans = Math.max(ans, depth(child));
              }
              return ans + 1;
          }

      }

  }
2.1.2.判断是否是堂兄弟节点（leetcode [993] Cousins in Binary Tree）
  代码：
  class Solution {

      // Map<Integer, TreeNode> parent;
      // Map<Integer, Integer> depth;

      public boolean isCousins(TreeNode root, int x, int y) {

          Queue<TreeNode> queue = new LinkedList<>();
          if (root == null) {
              return false;
          }
          if (root.val == x || root.val == y) {
              return false;
          }
          queue.offer(root);
          while (!queue.isEmpty()) {
              Queue<TreeNode> temp = new LinkedList<>();
              boolean xFlag = false;
              boolean yFlag = false;
              int xParent = -1;
              int yParent = -1;
              while (!queue.isEmpty()) {
                  TreeNode node = queue.poll();
                  if (node.left != null) {
                      temp.offer(node.left);
                      if (node.left.val == x) {
                          xFlag = true;
                          xParent = node.val;
                      } else if (node.left.val == y) {
                          yFlag = true;
                          yParent = node.val;
                      }
                  }
                  if (node.right != null) {
                      temp.offer(node.right);
                      if (node.right.val == x) {
                          xFlag = true;
                          xParent = node.val;
                      } else if (node.right.val == y) {
                          yFlag = true;
                          yParent = node.val;
                      }
                  }
              }
              if (xFlag || yFlag) {
                  if (xFlag && yFlag) {
                      return xParent == yParent ? false : true;
                  }
                  return false;
              }
              queue = temp;
          }
          return false;

          // parent = new HashMap<Integer, TreeNode>();
          // depth = new HashMap<Integer, Integer>();
          // dfs(new TreeNode(-1), root, 0);
          // return depth.get(x) == depth.get(y) && parent.get(x) != parent.get(y);

      }

      // public void dfs (TreeNode pre, TreeNode node, int cnt) {
      //     if (node == null) {
      //         return;
      //     }
      //     depth.put(node.val, cnt);
      //     parent.put(node.val, pre);
      //     dfs(node, node.left, cnt + 1);
      //     dfs(node, node.right, cnt + 1);
      // }

  }
2.1.3.二叉树中到指定节点距离为k的节点查找（leetcode [863] All Nodes Distance K in Binary Tree）
  代码：
  class Solution {

      private HashMap<TreeNode, TreeNode> parent;
      private List<Integer> ans;
      private boolean[] visited;

      public List<Integer> distanceK(TreeNode root, TreeNode target, int K) {
          parent = new HashMap<>();
          ans = new ArrayList<>();
          visited = new boolean[1005];
          if (root == null) {
              return ans;
          }
          Queue<TreeNode> queue = new LinkedList<>();
          queue.offer(root);
          parent.put(root, new TreeNode(-1));
          TreeNode tNode = new TreeNode(-1);
          boolean flag = false;
          // 按层遍历，寻找目标节点，并且记录节点的父节点
          while (!queue.isEmpty()) {
              Queue<TreeNode> temp = new LinkedList<>();
              while (!queue.isEmpty()) {
                  TreeNode node = queue.poll();
                  if (node.val == target.val) {
                      tNode = node;
                      flag = true;
                      break;
                  }
                  if (node.left != null) {
                      parent.put(node.left, node);
                      temp.offer(node.left);
                  }
                  if (node.right != null) {
                      parent.put(node.right, node);
                      temp.offer(node.right);
                  }
              }
              if (flag) {
                  break;
              }
              queue.addAll(temp);
          }
          int k = K;
          // 寻找目标节点的子节点里的k距离值
          dfs(tNode, k);
          int cnt = K;
          visited[tNode.val] = true;
          // 依次寻找目标节点的父节点里的k距离值，注意记忆化去重
          while (cnt > 0 && parent.get(tNode).val != -1) {
              tNode = parent.get(tNode);
              dfs(tNode, --cnt);
              visited[tNode.val] = true;
          }
          return ans;
      }

      public void dfs (TreeNode node, int num) {
          if (node == null || num < 0 || visited[node.val]) {
              return;
          }
          if (num == 0) {
              ans.add(node.val);
          }
          dfs(node.left, num-1);
          dfs(node.right, num-1);
      }

  }
  
2.2.建模抽象出bfs问题
2.2.1.密码锁在有死锁情况下从”0000“逐位旋转到目标值的最小次数（leetcode [752] Open the Lock）
  代码：
  class Solution {

      private int[] dir = {-1, 1};

      public int openLock(String[] deadends, String target) {
          HashSet<String> dead = new HashSet<>();
          for (String deadend : deadends) {
              dead.add(deadend);
          }
          HashSet<String> visited = new HashSet<>();
          Queue<String> queue = new LinkedList<>();
          queue.offer("0000");
          visited.add("0000");
          int ans = -1;
          // bfs逐位旋转使得密码锁从”0000“到指定目标值，层次即需要的旋转次数
          // 判断是否访问过和是否是锁是接下来是否沿着它遍历的前提
          while (!queue.isEmpty()) {
              ++ans;
              Queue<String> temp = new LinkedList<>();
              while (!queue.isEmpty()) {
                  String node = queue.poll();
                  if (node.equals(target)) {
                      return ans;
                  } 
                  if (dead.contains(node)) {
                      continue;
                  }
                  for (int i = 0; i < 4; ++i) {
                      for (int d : dir) {
                          char c = (char)((node.charAt(i) - '0' + d + 10)%10 + '0');
                          String next = node.substring(0, i) + c + node.substring(i+1,4);
                          if (!visited.contains(next)) {
                              temp.offer(next);
                              visited.add(next);
                          }                        
                      }
                  }
              }
              queue.addAll(temp);
          }
          return -1;
      }
  }

2.2.2.最短的桥，bfs和dfs结合（leetcode [934] Shortest Bridge）
  代码：
  class Solution {

      private int[][] arrays;
      private int[] dx = {0, 0, 1, -1};
      private int[] dy = {1, -1, 0, 0};
      private int m;
      private int n;
      Queue<Integer> queue;

      public void dfs (int i, int j) {
          if (i < 0 || i >= m || j < 0 || j >= n || arrays[i][j] == 2 || arrays[i][j] == 0) {
              return;
          }
          arrays[i][j] = 2;
          queue.offer(i*n +j);
          for (int t = 0; t < dx.length; ++t) {
              dfs(i + dx[t], j + dy[t]);
          }

      }

      public int shortestBridge(int[][] A) {
          arrays = A;
          m = A.length;
          n = A[0].length;
          int x = 0, y = 0;
          boolean flag = false;
          for (int i = 0; i < m; ++i) {
              for (int j = 0; j < n; ++j) {
                  if (A[i][j] == 1) {
                      x = i;
                      y = j;
                      flag = true;
                      break;
                  }
              }
              if (flag) {
                  break;
              }
          }
          queue = new LinkedList();

          dfs(x, y);
          int min = 0;
          boolean[][] vis = new boolean[m][n];
          boolean go = false;
          while (!queue.isEmpty()) {
              ++min;
              Queue<Integer> temp = new LinkedList<>();
              while (!queue.isEmpty()) {
                  int cur = queue.poll();
                  int c = cur / n;
                  int d = cur % n;
                  for (int t = 0; t < dx.length; ++t) {
                      int cc = c + dx[t];
                      int dd = d + dy[t];
                      if (cc < 0 || cc >= m || dd < 0 || dd >= n || vis[cc][dd] || arrays[cc][dd] == 2) {
                          continue;
                      }
                      if (arrays[cc][dd] == 1) {
                          go = true;
                          break;
                      }
                      if (arrays[cc][dd] == 0) {
                          vis[cc][dd] = true;
                          temp.offer(cc*n + dd);
                      }

                  }
              }
              if (go) {
                  break;
              } else {
                  queue.addAll(temp);
              }

          }
          return min - 1;
      }
  }
2.2.3.海洋到陆地最近距离的最大值转化为陆地到海洋的bfs深度（leetcode [1162] As Far from Land as Possible）
  代码：
  class Solution {
      int[][] directions = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}};
      public int maxDistance(int[][] grid) {
          Queue<int[]> queue = new LinkedList<>();
          int m = grid.length;
          int n = grid[0].length;
          for (int i = 0; i < m; ++i) {
              for (int j = 0; j < n; ++j) {
                  if (grid[i][j] == 1) {
                      queue.offer(new int[]{i, j});
                  }
              }
          }
          if (queue.size() == 0 || queue.size() == n*m) {
              return -1;
          }
          int ans = 0;
          while (!queue.isEmpty()) {
              int size = queue.size();
              while (size > 0) {
                  int[] t = queue.poll();
                  for (int i = 0; i < directions.length; ++i) {
                      int x = t[0] + directions[i][0];
                      int y = t[1] + directions[i][1];
                      if (x >= 0 && x < m && y >= 0 && y < n && grid[x][y] == 0) {
                          grid[x][y] = 1;
                          queue.offer(new int[]{x, y});
                      }
                  }
                  --size;
              }
              ++ans;
          }
          return ans-1;
      }
  }
2.2.4.bfs解决交替颜色最短路径问题（leetcode [1129] Shortest Path with Alternating Colors）
  代码：
  class Solution {
      public int[] shortestAlternatingPaths(int n, int[][] red_edges, int[][] blue_edges) {
          // 2*n数组，每个数组元素的set，防止平行边和自环，2代表2种颜色，n代表每个点，set里面为该点可到达的其他点
          HashSet<Integer>[][] graph = new HashSet[2][n];
          // steps表示最后一段距离为该种颜色的红蓝两边到达的最短步数
          int[][] steps = new int[2][n];

          for (int i = 0; i < 2; ++i) {
              for (int j = 0; j < n; ++j) {
                  graph[i][j] = new HashSet<Integer>();
                  steps[i][j] = Integer.MAX_VALUE;
              }
          }

          for (int[] red : red_edges) {
              graph[0][red[0]].add(red[1]);
          }

          for (int[] blue : blue_edges) {
              graph[1][blue[0]].add(blue[1]);
          }

          steps[0][0] = 0;
          steps[1][0] = 0;

          // 队列，使用bfs，一层一层扩大找路径步数
          Queue<int[]> queue = new LinkedList<int[]>();
          queue.offer(new int[]{0, 0});
          queue.offer(new int[]{1, 0});
          while (!queue.isEmpty()) {
              int[] tmp = queue.poll();
              int color = tmp[0];
              int point = tmp[1];
              for (int next : graph[color][point]) {
                  if (steps[1-color][next] == Integer.MAX_VALUE) {
                      steps[1-color][next] = steps[color][point] + 1;
                      queue.offer(new int[]{1-color, next});
                  }
              }

          }
          int[] ans = new int[n];
          for (int i = 0; i < n; ++i) {
              ans[i] = Math.min(steps[0][i], steps[1][i]) == Integer.MAX_VALUE ? -1 : Math.min(steps[0][i], steps[1][i]);
          }
          return ans;

      }
  }
2.2.5.蛇梯棋（leetcode [909] Snakes and Ladders）
  代码：
  class Solution {

      private int n;


      public int val2board(int target) {
          /*
          int x = n - 1 - (target-1)/n;
          int y = (x % 2 == 0) ? (n-1) - (target-1)%n: (target-1)%n;
          return x * n + y;
          */

          int quot = (target-1) / n;
          int rem = (target-1) % n;
          int row = n - 1 - quot;
          int col = row % 2 != n % 2 ? rem : n - 1 - rem;
          return row * n + col;

      }

      public int snakesAndLadders(int[][] board) {
          if (board == null || board.length < 1 || board[0].length < 1) {
              return -1;
          }
          int ans = 0;
          n = board.length;
          Queue<Integer> queue = new LinkedList<>();
          boolean[] visited = new boolean[n*n+1];
          queue.offer(1);
          visited[1] = true;
          while (!queue.isEmpty()) {
              ++ans;
              int cnt = queue.size();
              while (cnt > 0) {
                  int cur = queue.poll();
                  if (cur == n*n) {
                      return ans-1;
                  }
                  for (int next = cur + 1; next <= Math.min(n*n, cur + 6); ++next) {
                      if (!visited[next]) {
                          visited[next] = true;
                          int val = val2board(next);
                          int x = val / n;
                          int y = val % n;
                          queue.offer(board[x][y]==-1 ? next : board[x][y]);

                      }                
                  }                
                  --cnt;
              }
          }
          return -1;
      }


  }


