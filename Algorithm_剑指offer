1.二叉树的下一个节点（8）
  代码：
  /*
  public class TreeLinkNode {
      int val;
      TreeLinkNode left = null;
      TreeLinkNode right = null;
      TreeLinkNode next = null;

      TreeLinkNode(int val) {
          this.val = val;
      }
  }
  */
  public class Solution {
      public TreeLinkNode GetNext(TreeLinkNode pNode)
      {
          if (pNode == null) {
              return null;
          }
          TreeLinkNode ans = null;
          if (pNode.right != null) {
              // pNode有右子树，一直往左
              TreeLinkNode node = pNode.right;
              while (node != null && node.left != null) {
                  node = node.left;
              }
              ans = node;
          } else if (pNode.next != null) {
              // pNode没有右子树，找第一个是其父节点的左节点的节点，其父节点即为下一个节点
              TreeLinkNode cur = pNode;
              TreeLinkNode pre = pNode.next;
              while (pre != null && cur == pre.right) {
                  cur = pre;
                  pre = pre.next;
              }
              ans = cur.next;
          }
          return ans;
      }
  }
  
2.用两个栈实现队列（9）
  代码：
  public class Solution {
      Stack<Integer> stack1 = new Stack<Integer>();
      Stack<Integer> stack2 = new Stack<Integer>();

      public void push(int node) {
          stack1.push(node);
      }

      public int pop() {
          if (stack2.isEmpty()) {
              while(!stack1.isEmpty()) {
                  stack2.push(stack1.pop());
              }
          } 
          return stack2.pop();
      }
  }
相关（两个队列实现一个栈，leetcode 225. Implement Stack using Queues）
  代码：
  class MyStack {
  
      private Queue<Integer> inQueue;
      private Queue<Integer> outQueue;

      /** Initialize your data structure here. */
      public MyStack() {
          inQueue = new LinkedList<>();
          outQueue = new LinkedList<>();
      }

      /** Push element x onto stack. */
      public void push(int x) {
          // 保持inQueue为空，元素都在outQueue
          // 每次inQueue入队列，然后inQueue屁股后面加所有的outQueue
          // 再把所有的inQueue输入到outQueue，类似于头插法
          inQueue.offer(x);
          while (!outQueue.isEmpty()) {
              inQueue.offer(outQueue.poll());
          }
          while (!inQueue.isEmpty()) {
              outQueue.offer(inQueue.poll());
          }
      }

      /** Removes the element on top of the stack and returns that element. */
      public int pop() {
          return outQueue.poll();
      }

      /** Get the top element. */
      public int top() {
          return outQueue.peek();
      }

      /** Returns whether the stack is empty. */
      public boolean empty() {
          return outQueue.isEmpty();
      }
  }

  /**
   * Your MyStack object will be instantiated and called as such:
   * MyStack obj = new MyStack();
   * obj.push(x);
   * int param_2 = obj.pop();
   * int param_3 = obj.top();
   * boolean param_4 = obj.empty();
   */
   
 3.斐波那契数列的变体（10，青蛙变态跳问题）
  思路：
  一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
  分析：因为n级台阶，第一步有n种跳法：跳1级、跳2级、到跳n级
    跳1级，剩下n-1级，则剩下跳法是f(n-1)
    跳2级，剩下n-2级，则剩下跳法是f(n-2)
    所以f(n) = f(n-1) + f(n-2) + ... + f(1)
    因为f(n-1) = f(n-2) + f(n-3 )+ ... + f(1)
    所以f(n) = 2 * f(n-1)。
    根据f(1) = 1，f(n) = 2 * f(n-1)，可以得出f(n) = 2^(n-1)。
  或者可以这么分析：每个台阶都有跳与不跳两种情况（除了最后一个台阶），最后一个台阶必须跳。所以共用2^(n-1)种情况。
