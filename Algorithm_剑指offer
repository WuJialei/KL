重点：
1.删除链表中重复的节点(18)
2.序列化二叉树（37）
3.数据流中的中位数（41）
4.整数中1出现的次数（43）
  代码：
  public class Solution {
      public int NumberOf1Between1AndN_Solution(int n) {
          if (n < 1) {
              return 0;
          }
          String str = String.valueOf(n);
          int ans = 0;
          int m = 1;
          for (int i = str.length() - 1; i >= 0; --i) {
              char cur = str.charAt(i);
              String high = i == 0 ? "0" : str.substring(0, i);
              String low = i == str.length() - 1 ? "0" : str.substring(i+1);
              int h = Integer.parseInt(high);
              int l = Integer.parseInt(low);
              if (cur == '0') {
                  ans += h * m;
              } else if (cur == '1') {
                  ans += h * m + l + 1;
              } else {
                   ans += (h + 1)* m;
              }
              m *= 10;
          }
          return ans;
      }
  }
5.数字翻译成字符串（46）
  代码：
  class Solution {
      public int translateNum(int num) {
          // dp[i] = dp[i+1] + ?dp[i+2]
          if (num < 0) {
              return 0;
          }
          String str = String.valueOf(num);
          int a = 1;
          int b = 1;
          for (int i = str.length() - 2; i >= 0; --i) {
              if (str.charAt(i) == '0') {
                  b = a;
              } else {
                  String tmp = str.substring(i, i+2);
                  if (Integer.parseInt(tmp) <= 25) {
                      int c = a + b;
                      b = a;
                      a = c;
                  } else {
                      b = a;
                  }
              }      
          }
          return a;
      }
  }
6.丑数（49）
7.滑动窗口的最大值(59-I)
8.n个筛子的点数（60）
9.正则表达式的匹配（19）
  
  
  
  
1.二叉树的下一个节点（8）
  代码：
  /*
  public class TreeLinkNode {
      int val;
      TreeLinkNode left = null;
      TreeLinkNode right = null;
      TreeLinkNode next = null;

      TreeLinkNode(int val) {
          this.val = val;
      }
  }
  */
  public class Solution {
      public TreeLinkNode GetNext(TreeLinkNode pNode)
      {
          if (pNode == null) {
              return null;
          }
          TreeLinkNode ans = null;
          if (pNode.right != null) {
              // pNode有右子树，一直往左
              TreeLinkNode node = pNode.right;
              while (node != null && node.left != null) {
                  node = node.left;
              }
              ans = node;
          } else if (pNode.next != null) {
              // pNode没有右子树，找第一个是其父节点的左节点的节点，其父节点即为下一个节点
              TreeLinkNode cur = pNode;
              TreeLinkNode pre = pNode.next;
              while (pre != null && cur == pre.right) {
                  cur = pre;
                  pre = pre.next;
              }
              ans = cur.next;
          }
          return ans;
      }
  }
  
2.用两个栈实现队列（9）
  代码：
  public class Solution {
      Stack<Integer> stack1 = new Stack<Integer>();
      Stack<Integer> stack2 = new Stack<Integer>();

      public void push(int node) {
          stack1.push(node);
      }

      public int pop() {
          if (stack2.isEmpty()) {
              while(!stack1.isEmpty()) {
                  stack2.push(stack1.pop());
              }
          } 
          return stack2.pop();
      }
  }
相关（两个队列实现一个栈，leetcode 225. Implement Stack using Queues）
  代码：
  class MyStack {
  
      private Queue<Integer> inQueue;
      private Queue<Integer> outQueue;

      /** Initialize your data structure here. */
      public MyStack() {
          inQueue = new LinkedList<>();
          outQueue = new LinkedList<>();
      }

      /** Push element x onto stack. */
      public void push(int x) {
          // 保持inQueue为空，元素都在outQueue
          // 每次inQueue入队列，然后inQueue屁股后面加所有的outQueue
          // 再把所有的inQueue输入到outQueue，类似于头插法
          inQueue.offer(x);
          while (!outQueue.isEmpty()) {
              inQueue.offer(outQueue.poll());
          }
          while (!inQueue.isEmpty()) {
              outQueue.offer(inQueue.poll());
          }
      }

      /** Removes the element on top of the stack and returns that element. */
      public int pop() {
          return outQueue.poll();
      }

      /** Get the top element. */
      public int top() {
          return outQueue.peek();
      }

      /** Returns whether the stack is empty. */
      public boolean empty() {
          return outQueue.isEmpty();
      }
  }

  /**
   * Your MyStack object will be instantiated and called as such:
   * MyStack obj = new MyStack();
   * obj.push(x);
   * int param_2 = obj.pop();
   * int param_3 = obj.top();
   * boolean param_4 = obj.empty();
   */
   
 3.斐波那契数列的变体（10）
 3.1.青蛙变态跳问题
  思路：
  一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
  分析：因为n级台阶，第一步有n种跳法：跳1级、跳2级、到跳n级
    跳1级，剩下n-1级，则剩下跳法是f(n-1)
    跳2级，剩下n-2级，则剩下跳法是f(n-2)
    所以f(n) = f(n-1) + f(n-2) + ... + f(1)
    因为f(n-1) = f(n-2) + f(n-3 )+ ... + f(1)
    所以f(n) = 2 * f(n-1)。
    根据f(1) = 1，f(n) = 2 * f(n-1)，可以得出f(n) = 2^(n-1)。
  或者可以这么分析：每个台阶都有跳与不跳两种情况（除了最后一个台阶），最后一个台阶必须跳。所以共用2^(n-1)种情况。
3.2.矩形放置问题
  用2*1的矩形去覆盖2*n的矩形，求方案数目
  第一步考虑横着放还是竖着放，f(n) = f(n-1) + f(n-2)
  
4.旋转数组的最小数字（11）
  代码：
  public class Solution {
      public int minNumberInRotateArray(int [] array) {
          if (array == null || array.length < 1) {
              return 0;
          }
          int left = 0;
          int right = array.length - 1;
          while (left < right) {
              int mid = left + (right - left)/2;
              if (array[mid] < array[right]) {
                  right = mid;
              } else if (array[mid] == array[right]) {
                  --right;
              } else {
                  left = mid + 1;
              }
          }
          return array[left];
      }
  }

5.剪绳子（14）
  测试：leetcode 剑指offer
  代码：
  class Solution {
    public int cuttingRope(int n) {
        if (n <= 1) {
            return 0;
        }
        int[] dp = new int[n+1];
        dp[1] = 1;
        dp[2] = 1;
        for (int i = 3; i <= n; ++i) {
            int max = 0;
            for (int j = 1; j <= i/2 + 1; ++j) {
                int left = Math.max(j, dp[j]);
                int right = Math.max(i-j, dp[i-j]);
                max = Math.max(left * right, max);
            }
            dp[i] = max;
        }
        return dp[n];
    }
}
  
6.以O(log(n))解决数值的整数次方（16）
  代码：
  public class Solution {
    
      public double dfs (double num, int cnt) {
          if (cnt == 0) {
              return 1;
          } else if (cnt == 1) {
              return num;
          }
          double tmp = dfs(num, cnt >> 1);
          tmp *= tmp;
          if ((cnt & 1) == 1) {
              tmp *= num;
          }
          return tmp;
      }

      public double Power(double base, int exponent) {
          double ans = 1;
          boolean flag = false;
          if (exponent < 0) {
              flag = true;
              exponent = 0 - exponent;
          }
          /*
          while (exponent > 0) {
              ans *= base;
              --exponent;
          }
          */
          ans = dfs(base, exponent);
          return flag ? 1/ans : ans;
    }

  }

7.链表中重复的节点完全删除（18）
  代码：
  public class Solution {
      public ListNode deleteDuplication(ListNode pHead)
      {
          if (pHead == null || pHead.next == null) {
              return pHead;
          }
          ListNode ans = new ListNode(-1);
          // ans.next = pHead;
          ListNode ret = ans;
          while (pHead != null) {
              int cnt = 1;
              while (pHead != null && pHead.next != null && pHead.val == pHead.next.val) {
                  pHead = pHead.next;
                  ++cnt;
              }
              if (cnt > 1) {
                  pHead = pHead.next;
              } else {
                  ans.next = new ListNode(pHead.val);
                  pHead = pHead.next;
                  ans = ans.next;
              }
          }
          return ret.next;
      }
  }
  
8.正则表达式的匹配（19）
  代码：
  public class Solution {
      public boolean match(char[] str, char[] pattern) {
      if (str == null || pattern == null) {
          return false;
      }
      int strIndex = 0;
      int patternIndex = 0;
      return matchCore(str, strIndex, pattern, patternIndex);
  }

  public boolean matchCore(char[] str, int strIndex, char[] pattern, int patternIndex) {
      //有效性检验：str到尾，pattern到尾，匹配成功
      if (strIndex == str.length && patternIndex == pattern.length) {
          return true;
      }
      //pattern先到尾，匹配失败
      if (strIndex != str.length && patternIndex == pattern.length) {
          return false;
      }
      //模式第2个是*，且字符串第1个跟模式第1个匹配,分3种匹配模式；如不匹配，模式后移2位
      if (patternIndex + 1 < pattern.length && pattern[patternIndex + 1] == '*') {
          if ((strIndex != str.length && pattern[patternIndex] == str[strIndex]) || (pattern[patternIndex] == '.' && strIndex != str.length)) {
              return matchCore(str, strIndex, pattern, patternIndex + 2)//模式后移2，视为x*匹配0个字符
                      || matchCore(str, strIndex + 1, pattern, patternIndex + 2)//视为模式匹配1个字符
                      || matchCore(str, strIndex + 1, pattern, patternIndex);//*匹配1个，再匹配str中的下一个
          } else {
              return matchCore(str, strIndex, pattern, patternIndex + 2);
          }
      }
      //模式第2个不是*，且字符串第1个跟模式第1个匹配，则都后移1位，否则直接返回false
      if ((strIndex != str.length && pattern[patternIndex] == str[strIndex]) || (pattern[patternIndex] == '.' && strIndex != str.length)) {
          return matchCore(str, strIndex + 1, pattern, patternIndex + 1);
      }
      return false;
      }
  }
  
9.树的子结构的判断（26）
  代码：
  /**
  public class TreeNode {
      int val = 0;
      TreeNode left = null;
      TreeNode right = null;

      public TreeNode(int val) {
          this.val = val;

      }

  }
  */
  public class Solution {

      public boolean dfs2 (TreeNode node1, TreeNode node2) {
          if (node1 == null || node2 == null) {
              if (node2 == null) {
                  return true;
              } else {
                  return false;
              }
          }
          if (node1.val != node2.val) {
              return false;
          } else {
              return dfs2(node1.left, node2.left) && dfs2(node1.right, node2.right);
          }
      }

      public boolean dfs1 (TreeNode node1, TreeNode node2) {
          if (node1 == null || node2 == null) {
              if (node2 == null) {
                  return true;
              } else {
                  return false;
              }
          }
          if (node1.val == node2.val) {
              if(dfs2(node1, node2)) {
                  return true;
              }
          } 
          return dfs1(node1.left, node2) || dfs1(node1.right, node2);
      }


      public boolean HasSubtree(TreeNode root1,TreeNode root2) {
          if (root1 == null || root2 == null) {
              return false;
          }
          return dfs1(root1, root2);
      }
  }
  
10.复杂链表的复制（35）
  代码：
  /*
  public class RandomListNode {
      int label;
      RandomListNode next = null;
      RandomListNode random = null;

      RandomListNode(int label) {
          this.label = label;
      }
  }
  */
  public class Solution {
      public RandomListNode Clone(RandomListNode pHead)
      {
          if (pHead == null) {
              return null;
          }
          RandomListNode head1 = new RandomListNode(-1);
          head1.next = pHead;
          head1 = head1.next;
          RandomListNode head2 = new RandomListNode(-1);
          head2.next = pHead;
          head2 = head2.next;
          while (pHead != null) {
              RandomListNode next = pHead.next;
              RandomListNode copy = new RandomListNode(pHead.label);
              pHead.next = copy;
              copy.next = next;
              pHead = next;
          }
          while (head1 != null) {
              if (head1.random != null) {
                  head1.next.random = head1.random.next;
              }
              head1 = head1.next.next;
          }
          RandomListNode ans = new RandomListNode(-1);
          ans.next = head2.next;
          while (head2 != null) {
              RandomListNode next = head2.next.next;
              head2.next.next = head2.next.next == null ? null : head2.next.next.next;
              head2.next = null;
              head2 = next;
          }
          return ans.next;
      }
  }
  
11.序列化二叉树（37）
  思路：利用前序+中序或者后序+中序的缺点是节点值不能重复
  代码：
  /*
  public class TreeNode {
      int val = 0;
      TreeNode left = null;
      TreeNode right = null;

      public TreeNode(int val) {
          this.val = val;

      }

  }
  */
  public class Solution {

      private int index = 0;

      String Serialize(TreeNode root) {
          if (root == null) {
              return "#";
          } else {
              return root.val + "," + Serialize(root.left) +"," + Serialize(root.right);
          }
    }
      TreeNode Deserialize(String str) {
         String[] strs = str.split(",");
          if (index >= strs.length) {
              return null;
          }
          if (strs[index].equals("#")) {
              ++index;
              return null;
          }
          TreeNode node = new TreeNode(Integer.parseInt(strs[index++]));
          node.left = Deserialize(str);
          node.right = Deserialize(str);
          return node;
    }
  }
  
12.数据流中的中位数（41）
  思路：建立最大堆(升序排序)、最小堆(降序排序)，插入时维持最大堆大小等于最小堆大小(已经插入数目为偶数)，
  插入时维持最大堆大小-最小堆大小=1(已经插入数目为奇数)；取出时取最大堆与最小堆peek值得平均(已经插入数目为偶数)，
  取出时取最大堆的peek值(已经插入数目为奇数)
  代码：
  import java.util.*;
  public class Solution {

      private PriorityQueue<Integer> minQueue = new PriorityQueue<Integer>(
          (a, b) -> b - a
      );
      private PriorityQueue<Integer> maxQueue = new PriorityQueue<Integer>(
          (a, b) -> a - b
      );

      public void Insert(Integer num) {
          if (maxQueue.size() == 0 || num < maxQueue.peek()) {
              minQueue.offer(num);
          } else {
              maxQueue.offer(num);
          }
          while (maxQueue.size() - minQueue.size() > 1) {
              minQueue.offer(maxQueue.poll());
          }
          while (minQueue.size() - maxQueue.size() > 0) {
              maxQueue.offer(minQueue.poll());
          }
      }

      public Double GetMedian() {
          if (minQueue.size() == maxQueue.size()) {
              return (((double)minQueue.peek()) + maxQueue.peek())/2;
          } else {
              return (double)maxQueue.peek();
          }
      }


  }
  
13.连续子数组的最大和（42）
  代码：
  import java.util.*;
  public class Solution {
      public int FindGreatestSumOfSubArray(int[] array) {
          if (array == null || array.length < 1) {
              return 0;
          }
          // dp[i] = array[i], dp[i-1] <= 0
          // dp[i] = array[i] + dp[i-1], dp[i-1] > 0
          int pre = array[0];
          int cur = array[0];
          int ans = cur;
          for (int i = 1; i < array.length; ++i) {
              cur = pre <= 0 ? array[i] : pre + array[i];
              ans = Math.max(ans, cur);
              pre = cur;
          }
          return ans;
      }
  }
  
14.整数中1出现的次数（43）
  思路：
  统计某个位置上 1出现的次数。如34，1在十位上出现的次数是10次
  （10到19），1在个位上出现的次数是4次（1，11，21，31），因此34中1出现了14次。

  对于整数n，将这个整数分为三部分：当前位数字cur，更高位数字high，更低位数字low，如：对于n=21034，当位数是十位时，cur=3，high=210，low=4。
  我们从个位到最高位 依次计算每个位置出现1的次数：(做交叉积)
  在计算时，会出现三种情况
  1）当前位的数字等于0时，例如n=21034，在百位上的数字cur=0，百位上是1的情况有：00100-00199，01100-01199，……，20100-20199。一共有21*100种情况，即high*100;
  2）当前位的数字等于1时，例如n=21034，在千位上的数字cur=1，千位上是1的情况有：01000-01999，11000-11999，21000-21034。一共有2*1000+（34+1）种情况，即high*1000+(low+1)。
  3）当前位的数字大于1时，例如n=21034，在十位上的数字cur=3，十位上是1的情况有：00010-00019，……，21010-21019。一共有(210+1)*10种情况，即(high+1)*10。
  代码：
  public class Solution {
      public int NumberOf1Between1AndN_Solution(int n) {
          int cnt = 0;
          for (int i = 1; i <= n; i = i * 10) {
              int high = n / (i * 10);
              int low = n % i;
              int cur = (n/i)%10;
              if (cur == 0) {
                  cnt += high * i;
              } else if (cur == 1) {
                  cnt += high * i + low + 1;
              } else {
                  cnt += (high + 1) * i;
              }
          }
          return cnt;

      }
  }
  
15.数字序列中某一位的数字（44）
  代码：
  public int digitAtIndex(int index) {
        if(index<0)
            return -1;
        int m=1;  //m位数
        while(true) {
            int numbers=numbersOfIntegers(m);  //m位数的个数
            if(index<numbers*m)
                return getDigit(index,m); 
            index-=numbers*m;
            m++;
        }
    }
     
    /*
     * 返回m位数的总个数
     * 例如，两位数一共有90个：10~99；三位数有900个：100~999
     */
    private int numbersOfIntegers(int m) {
        if(m==1)
            return 10;
        return (int) (9*Math.pow(10, m-1));
    }
     
    /*
     * 获取数字
     */
    private int getDigit(int index, int m) {
        int number=getFirstNumber(m)+index/m;  //对应的m位数
        int indexFromRight = m-index%m;  //在数字中的位置
        for(int i=1;i<indexFromRight;i++)
            number/=10;
        return number%10;
    }
     
    /*
     * 第一个m位数
     * 例如第一个两位数是10，第一个三位数是100
     */
    private int getFirstNumber(int m) {
        if(m==1)
            return 0;
        return (int) Math.pow(10, m-1);
    }
  
  16.把数组排成最小的数（45）
    代码：
    import java.util.*;

    public class Solution {
      public String PrintMinNumber(int [] numbers) {
          int n = numbers.length;
          String[] strs = new String[n];
          for (int i = 0; i < n; ++i) {
              strs[i] = "" + numbers[i];
          }
          Arrays.sort(
              strs,
              (a, b) -> {
                  return (a+b).compareTo(b+a);
              }
          );
          /*
          Arrays.sort(
              strs,
              (a, b) -> {
                  int len = Math.min(a.length(), b.length());
                  for (int j = 0; j < len; ++j) {
                      if (a.charAt(j) != b.charAt(j)) {
                          return (int)(a.charAt(j) - b.charAt(j));
                      }
                  }
                  if (a.length() == b.length()) {
                      return 0;
                  } else if (a.length() > b.length()){

                      while (len < a.length() && a.charAt(len) == a.charAt(0)) {
                          ++len;
                      }
                      if (len == a.length()) {
                          return 0;
                      } else {
                          return (int)(a.charAt(len) - a.charAt(0));
                      }

                  } else {
                      while (len < b.length() && b.charAt(len) == b.charAt(0)) {
                          ++len;
                      }
                      if (len == b.length()) {
                          return 0;
                      } else {
                          return (int)(b.charAt(0) - b.charAt(len));
                      }

                  }
              }
          );
          */
          StringBuilder sb = new StringBuilder("");
          for (String str : strs) {
              sb.append(str);
          }
          return sb.toString();
      }
  }
  
17.把数字翻译成字符串（46）
  代码：
   import java.lang.reflect.*;
    import java.util.*;

    public class test {

      public int num2str(char[] arrays) {
          if (arrays == null || arrays.length < 1) {
              return 0;
          }
          int len = arrays.length;
          int[] dp = new int[len+1];
          dp[0] = 0;
          dp[1] = 1;
          // 倒着来
          // if num[i,i+1] in [0, 26), dp[i] = dp[i-1] + dp[i-2] 
          // else dp[i] = dp[i-1]
          for (int j = len -2; j >= 0; --j) {
              dp[len-j] = dp[len-1-j];
              int val = ((int)(arrays[j] - '0')) * 10 + ((int) (arrays[j+1] - '0'));
              if (val >= 0 && val < 26) {
                  dp[len-j] += dp[len-2-j];
              }
          }
          return dp[len];
      }

      public static void main(String[] args) {
          test demo=new test();
          String str = "678958";
          int ans = demo.num2str(str.toCharArray());
          System.out.println(ans);
      }
  }
  
18.最长的无重复字母的子字符串（48）
  代码：
  public int maxLen (String str) {
        if (str == null || str.length() < 1) {
            return 0;
        }
        // dp[i] = dp[i-1] + 1 , if i位置字母之前没出现过或者出现但和最近出现的位置差大于dp[i-1]
        // dp[i] = (i - 1 - lastIndex) + 1 , if i位置字母最近出现的字母在dp[i-1]的范围内
        int[] index = new int[26];
        Arrays.fill(index, -1);
        int len = str.length();
        int[] dp = new int[len];
        dp[0] = 1;
        index[(int)(str.charAt(0) - 'a')] = 0;
        int ans = 1;
        for (int i = 1; i < len; ++i) {
            int cur2num = (int)(str.charAt(i) - 'a');
            if (index[cur2num] == -1) {
                dp[i] = dp[i-1] + 1;
            } else {
                int lastIndex = index[cur2num];
                dp[i] = (i-lastIndex) <= dp[i-1] ? i-lastIndex : dp[i-1] + 1;
            }
            index[cur2num] = i;
            ans = Math.max(ans, dp[i]);
        }
        return ans;
    }

19.丑数（49）
  代码：
  import java.util.*;
  public class Solution {

      public int min(int a, int b, int c) {
          int ret = a;
          ret = Math.min(ret, b);
          ret = Math.min(ret, c);
          return ret;
      }

      public int GetUglyNumber_Solution(int index) {
          // 丑数都是由排在前面的丑数✖️2、3、5得到的
          // 也就是是说每一个丑数都要✖️2、3、5，从2、3、5角度考虑乘以到第几个丑数了
          if (index < 1) {
              return 0;
          }
          int[] array = new int[index];
          array[0] = 1;
          // ✖️2的从索引为0的丑数开始
          int m2 = 0;
          int m3 = 0;
          int m5 = 0;
          int next = 1;
          while (next < index) {
              int tmp = min(array[m2] * 2, array[m3] * 3, array[m5] * 5);
              array[next++] = tmp;
              while (array[m2] * 2 <= tmp) {
                  ++m2;
              }
              while (array[m3] * 3 <= tmp) {
                  ++m3;
              }
              while (array[m5] * 5 <= tmp) {
                  ++m5;
              }
          }
          return array[index-1];
      }
  }
  
 20.数组中的逆序对（51）
  思路：归并排序
  代码：
  public class Solution {
    
      private long cnt;
      private int[] array;

      public void mergeSort(int left, int right) {
          if (left >= right) {
              return;
          }
          int mid = left + (right - left)/2;
          mergeSort(left, mid);
          mergeSort(mid + 1, right);
          merge(left, mid, right);
      }

      public void merge(int left, int mid, int right) {
          int[] tmp = new int[right - left + 1];
          int k = 0;
          int i = left;
          int j = mid + 1;
          while (i <= mid && j <= right) {
              if (array[i] <= array[j]) {
                  tmp[k++] = array[i++];
              } else {
                  cnt += mid - i + 1;
                  tmp[k++] = array[j++];
              }
          }
          while (i <= mid) {
              tmp[k++] = array[i++];
          }
          while (j <= right) {
              tmp[k++] = array[j++];
          }
          k = 0; 
          i = left;
          while (i <= right) {
              array[i++] = tmp[k++];
          }
      }

      public int InversePairs(int [] array) {
          if (array == null || array.length < 1) {
              return 0;
          }
          cnt = 0;
          this.array = array;
          mergeSort(0, array.length - 1);
          cnt = cnt % 1000000007;
          return ((int) cnt);
      }
  }
  
21.数字在排序数组中出现的次数（53）
  代码：
  public class Solution {
      public int GetNumberOfK(int [] array , int k) {
          if (array == null || array.length < 1) {
              return 0;
          }
          int ans = 0;
          int left = 0; 
          int right = array.length - 1;
          int first = 0;
          int last = 0;
          while (left < right) {
              int mid = left + (right - left + 1)/2;
              if (array[mid] > k) {
                  right = mid - 1;
              } else {
                  left = mid;
              }
          }
          first = array[left] == k ? left : -1;
          left = 0;
          right = array.length - 1;
          while (left < right) {
              int mid = left + (right - left)/2;
              if (array[mid] < k) {
                  left = mid + 1;
              } else {
                  right = mid;
              }
          }
          last = array[left] == k ? left : -1;
          ans = first == -1 ? 0: Math.abs(last - first) + 1;
          return ans;
      }
  }
  
22.数组中数字出现的次数（56 - I）
  代码：
  class Solution {
      public int[] singleNumbers(int[] nums) {
          if (nums == null || nums.length < 2) {
              return null;
          }
          int tmp = 0;
          // 找出数组里唯一出现一次的两个数的异或值
          for (int num : nums) {
              tmp ^= num;
          }
          int cnt = 1;
          while ((tmp & 1) != 1) {
              tmp >>= 1;
              cnt <<= 1;
          }
          int a = 0;
          int b = 0;
          // 两个数不相同，一定存在某一位相异的情况，找出该位将数组分类
          for (int num : nums) {
              if ((num & cnt) == cnt) {
                  a ^= num;
              } else {
                  b ^= num;
              }
          }
          int[] ans = new int[2];
          ans[0] = a;
          ans[1] = b;
          return ans;
      }
  }
变体，数组中数字出现的次数(56 - II)
  代码：
  class Solution {
      public int singleNumber(int[] nums) {
          int[] bits = new int[32];
          // 一个数出现三次，则对应位1出现的次数也是3的倍数
          // 寻找位数上1出现次数不为3的倍数，该位即为唯一出现次数的位数
          for (int num : nums) {
              int cnt = 32;
              while (cnt > 0) {
                  if ((num & 1) == 1) {
                      ++bits[cnt-1];
                  }
                  num >>= 1;
                  --cnt;
              }  
          }
          int ans = 0;
          for (int bit : bits) {
              ans <<= 1;
              if (bit % 3 == 1) {
                  ans += 1;
              }
          }
          return ans;
      }
  }
  
23.和为s的连续正数序列（57-2，滑动窗口）
  代码：
  class Solution {
      public int[][] findContinuousSequence(int target) {
          int start = 1;
          int end = 2;
          int sum = 1;
          List<int[]> ans = new ArrayList<>();
          while (start <= (target/2 + 1)) {
              if (sum == target) {
                  int[] tmp = new int[end - start];
                  int cnt = 0;
                  for (int i = start; i < end; ++i) {
                      tmp[cnt++] = i;
                  }
                  ans.add(tmp);
                  sum -= start;
                  ++start;
              } else if (sum < target) {
                  sum += end;
                  ++end;
              } else {
                  sum -= start;
                  ++start;
              }
          }
          return ans.toArray(new int[ans.size()][]);
      }
  }
  
24.翻转单词顺序(58 - I)
  代码：
  class Solution {
      public String reverseWords(String s) {
          if (s == null || s.length() < 1) {
              return "";
          }
          String[] strs = s.trim().split(" ");
          StringBuilder sb = new StringBuilder("");
          for (int i = strs.length - 1; i >= 0; --i) {
              if (strs[i].equals("")) {
                  continue;
              }
              sb.append(strs[i].trim());
              if (i != 0) {
                  sb.append(" ");
              }

          }
          return sb.toString();
      }
  }
  
  25.59 - I. 滑动窗口的最大值(59-I)
    代码：
    class Solution {
      public int[] maxSlidingWindow(int[] nums, int k) {
          if (nums == null || nums.length < k || k < 1) {
              return new int[]{};
          }
          int len = nums.length;
          int[] ans = new int[len - k + 1];
          PriorityQueue<Integer> queue = new PriorityQueue<>(k, (a, b) -> b-a);
          int i = 0;
          for (; i < k; ++i) {
              queue.offer(nums[i]);
          }
          int j = 0;
          for (; i <= len; ++i) {
              ans[j++] = queue.peek();
              queue.remove(nums[i-k]);
              if (i < len) {
                  queue.offer(nums[i]);
              }

          }
          return ans;
      }
  }
  变体，队列的最大值：
    class MaxQueue {

      Queue<Integer> queue1;
      PriorityQueue<Integer> queue2;

      public MaxQueue() {
          queue1 = new LinkedList<>();
          queue2 = new PriorityQueue<>((a, b) -> b-a);
      }

      public int max_value() {
          if (queue2.isEmpty()) {
              return -1;
          }
          return queue2.peek();
      }

      public void push_back(int value) {
          queue1.offer(value);
          queue2.offer(value);
      }

      public int pop_front() {
          if (queue1.isEmpty()) {
              return -1;
          }
          int tmp = queue1.poll();
          queue2.remove(tmp);
          return tmp;
      }
  }

  /**
   * Your MaxQueue object will be instantiated and called as such:
   * MaxQueue obj = new MaxQueue();
   * int param_1 = obj.max_value();
   * obj.push_back(value);
   * int param_3 = obj.pop_front();
   */

26.n个筛子的点数(60)
  代码：
  class Solution {
      public double[] twoSum(int n) {
          if (n < 1) {
              return new double[0];
          }
          // dp[i][s]表示前i个筛子和为s的数目
          // dp[i][s] = dp[i-1][s-1] + ... + dp[i-1][s-6] 
          int[][] dp = new int[n+1][6*n + 1];
          for (int i = 1; i <= 6; ++i) {
              dp[1][i] = 1;
          }
          for (int i = 2; i <= n; ++i) {
              for (int s = i; s <= 6*i; ++s) {
                  int sum = 0;
                  int cnt = 1;
                  while (s - cnt >= 0 && cnt <= 6) {
                      sum += dp[i-1][s-cnt];
                      ++cnt;
                  }
                  dp[i][s] = sum;
              }
          }
          int tmp = n;
          double ans = 1.0;
          while (tmp > 0) {
              ans /= 6;
              --tmp;
          }
          double[] ret = new double[6*n - n + 1];
          for (int i = 0; i < ret.length; ++i) {
              ret[i] = ans * dp[n][i+n];
          }
          return ret;
      }
  }
