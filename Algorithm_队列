1.参考：https://zhuanlan.zhihu.com/p/37467686

2.基本使用
2.1.普通队列
2.2.双向队列
2.3.优先队列
2.4.循环队列

3.普通队列
3.1.到现在为止的某个时间段内的请求次数（leetcode [933] Number of Recent Calls）
  代码：
  class RecentCounter {

      Queue<Integer> queue;

      public RecentCounter() {
          queue = new LinkedList<Integer>();
      }

      public int ping(int t) {
          queue.offer(t);
          int cnt = t - 3000;
          while (!queue.isEmpty() && queue.peek() < cnt) {
              queue.poll();
          }
          return queue.size();
      }
  }
  
  4.循环队列
  4.1.数组实现双向队列（leetcode [641] Design Circular Deque）
    代码：
    class MyCircularDeque {

        int k;
        int[] queue;
        // 已经插过的头位置即当前位置
        int front;
        // 尾要插位置
        int rear;
        int cnt;

        /** Initialize your data structure here. Set the size of the deque to be k. */
        public MyCircularDeque(int k) {
            this.k = k;
            queue = new int[k];
        }

        /** Adds an item at the front of Deque. Return true if the operation is successful. */
        public boolean insertFront(int value) {
            if (isFull()) {
                return false;
            }
            front = front == 0 ? k - 1 : front - 1;
            queue[front] = value;
            ++cnt;
            return true;
        }

        /** Adds an item at the rear of Deque. Return true if the operation is successful. */
        public boolean insertLast(int value) {
            if (isFull()) {
                return false;
            }
            queue[rear] = value;
            rear = rear == k - 1 ? 0 : ++rear;
            ++cnt;
            return true;
        }

        /** Deletes an item from the front of Deque. Return true if the operation is successful. */
        public boolean deleteFront() {
            if (isEmpty()) {
                return false;
            }
            front = front == k - 1 ? 0 : front + 1;
            --cnt;
            return true;
        }

        /** Deletes an item from the rear of Deque. Return true if the operation is successful. */
        public boolean deleteLast() {
            if (isEmpty()) {
                return false;
            }
            rear = rear == 0 ? k - 1 : rear - 1; 
            --cnt;
            return true;
        }

        /** Get the front item from the deque. */
        public int getFront() {
            if (isEmpty()) {
                return -1;
            }
            return queue[front];
        }

        /** Get the last item from the deque. */
        public int getRear() {
            if (isEmpty()) {
                return -1;
            }
            return rear == 0 ? queue[k - 1] : queue[rear - 1];
        }

        /** Checks whether the circular deque is empty or not. */
        public boolean isEmpty() {
            return cnt == 0;
        }

        /** Checks whether the circular deque is full or not. */
        public boolean isFull() {
            return cnt == k;
        }
    }
 4.2.数组实现循环队列（leetcode [622] Design Circular Queue）
  代码：
  class MyCircularQueue {

      int[] queue;
      int k;
      // 代表头的当前位置
      int front;
      // 要插入的地方
      int rear; 
      int cnt;

      /** Initialize your data structure here. Set the size of the queue to be k. */
      public MyCircularQueue(int k) {
          this.k = k;
          queue = new int[k];
      }

      /** Insert an element into the circular queue. Return true if the operation is successful. */
      public boolean enQueue(int value) {
          if (isFull()) {
              return false;
          }
          queue[rear] = value;
          rear = (rear + 1) % k;
          ++cnt;
          return true;
      }

      /** Delete an element from the circular queue. Return true if the operation is successful. */
      public boolean deQueue() {
          if (isEmpty()) {
              return false;
          }
          front = front == k - 1 ? 0 : front + 1;
          --cnt;
          return true;
      }

      /** Get the front item from the queue. */
      public int Front() {
          if (isEmpty()) {
              return -1;
          }
          return queue[front];
      }

      /** Get the last item from the queue. */
      public int Rear() {
          if (isEmpty()) {
              return -1;
          }
          return rear == 0 ? queue[k - 1] : queue[rear - 1];
      }

      /** Checks whether the circular queue is empty or not. */
      public boolean isEmpty() {
          return cnt == 0;
      }

      /** Checks whether the circular queue is full or not. */
      public boolean isFull() {
          return cnt == k;
      }
  }
 

