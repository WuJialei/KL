1.参考
1.1.https://oi-wiki.org/math/bit/
1.2.n&(n-1)的用法(将最低位的1变为0)：https://blog.csdn.net/navyifanr/article/details/19496459

2.应用
2.1.异或
2.1.1.汉明距离(leetcode [461] Hamming Distance)
  代码：
  class Solution {
      public int hammingDistance(int x, int y) {
          int tmp = x ^ y;
          int ans = 0;
          int cnt = 32;
          while (cnt > 0) {
              if ((tmp & 1) == 1) {
                  ++ans;
              }
              tmp >>= 1;
              --cnt;
          }
          return ans;
      }
  }
变体，数(含负数)的1的个数（[191] Number of 1 Bits）
  代码：
  public class Solution {
      // you need to treat n as an unsigned value
      public int hammingWeight(int n) {
          int ans = 0;
          int cnt = 32;
          while (cnt > 0) {
              if ((n & 1) == 1) {
                  ++ans;
              }
              --cnt;
              n >>= 1;
          }
          return ans;
      }
  }
变体，数组的汉明距离（leetcode [477] Total Hamming Distance）
  代码：
  class Solution {

      public int[] bit (int val) {
          int[] ret = new int[32];
          int cnt = 31;
          while (cnt >= 0) {
              ret[cnt] = val & 1;
              val >>= 1;
              --cnt;
          }
          return ret;
      }

      public int totalHammingDistance(int[] nums) {
          if (nums == null || nums.length < 1) {
              return 0;
          }
          int ans = 0;
          int[][] arrays = new int[nums.length][32];
          for (int i = 0; i < nums.length; ++i) {
              arrays[i] = bit(nums[i]);
          }
          int len = arrays.length;
          for (int i = 0; i < 32; ++i) {
              int cnt1 = 0;
              for (int j = 0; j < len; ++j) {
                  if (arrays[j][i] == 1) {
                      ++cnt1;
                  }
              }
              ans += (len - cnt1) * cnt1;
          }
          return ans;
      }
  }
2.1.2.数字的补数（leetcode [476] Number Complement）
    代码：
    class Solution {
        public int findComplement(int num) {
            int i = 1;
            int cur = 0;
            // 找高位第一为1的位数，与全1异或
            while (num > 0) {
                cur = ((num & 1) ^ 1)* i + cur;
                i <<= 1;
                num >>= 1;
            }
            return cur;
        }
    }
变体，二进制手表([401] Binary Watch)
  思路：Integer.bitCount()计算数中二进制1的个数
  代码：
  class Solution {
      public List<String> readBinaryWatch(int num) {
          List<String> ans = new ArrayList<>();
          for (int hour = 0; hour < 12; ++hour) {
              for (int minute = 0; minute < 60; ++minute) {
                  if (Integer.bitCount(hour) + Integer.bitCount(minute) == num) {
                      ans.add(String.format("%d:%02d", hour, minute));
                  }
              }
          }
          return ans;
      }
  }
2.1.3.缺失数字（[268] Missing Number）
   代码：
   class Solution {
      public int missingNumber(int[] nums) {
          if (nums == null || nums.length < 1) {

          }
          int ans = 0;
          for (int i = 0; i < nums.length; ++i) {
              ans ^= i ^ nums[i];
          }
          ans ^= nums.length;
          return ans;
      }
  }
2.1.4.形成两个异或相等数组的连续的三元组数目(leetcode 1442. Count Triplets That Can Form Two Arrays of Equal XOR)
  代码：
  class Solution {
      public int countTriplets(int[] arr) {
          // a = b <=> a ^ b = 0
          if (arr == null || arr.length < 1) {
              return 0;
          }
          int ans = 0;
          for (int i = 0; i < arr.length; ++i) {
              int tmp = arr[i];
              for (int k = i + 1; k < arr.length; ++k) {
                  tmp ^= arr[k];
                  if (tmp == 0) {
                      ans += k - i;
                  }
              }
          }
          return ans;
      }
  }
2.1.5.二叉树中的伪字符串（1457. Pseudo-Palindromic Paths in a Binary Tree）
  代码：
  /**
   * Definition for a binary tree node.
   * public class TreeNode {
   *     int val;
   *     TreeNode left;
   *     TreeNode right;
   *     TreeNode() {}
   *     TreeNode(int val) { this.val = val; }
   *     TreeNode(int val, TreeNode left, TreeNode right) {
   *         this.val = val;
   *         this.left = left;
   *         this.right = right;
   *     }
   * }
   */
  class Solution {
      int ans = 0;
      public int pseudoPalindromicPaths (TreeNode root) {
          if (root == null) return 0;
          int nums = 0;
          dfs(root, nums);
          return ans;
      }

      public void dfs(TreeNode root, int temp) {
          int n = temp ^ (1 << root.val);
          if (root.left == null && root.right == null) {
              if (n == 0 || (n & (n - 1)) == 0) {
                  ++ans;
              }
              return;
          }
          if (root.left != null) {
              dfs(root.left, n);
          }
          if (root.right != null) {
              dfs(root.right, n);
          }
      }
  }
2.1.6.只出现一次的数字有两个(leetcode [260] Single Number III)
  代码：
  class Solution {
      public int[] singleNumber(int[] nums) {
          if (nums == null || nums.length < 2) {
              return new int[2];
          }
          int ab = 0;
          for (int num : nums) {
              ab ^= num;
          }
          int cnt = 1;
          while (ab != 0) {
              if ((ab & 1) == 1) {
                  break;
              }
              ab >>= 1;
              cnt <<= 1;
          }
          int a = 0;
          int b = 0;
          for (int num : nums) {
              if ((num & cnt) == cnt) {
                  a ^= num;
              } else {
                  b ^= num;
              }
          }
          int[] ans = new int[]{a, b};
          return ans;
      }
  }
2.1.7.两个数异或的最大值（leetcode [421] Maximum XOR of Two Numbers in an Array）
  思路：
   参考：http://tangyiheng.top/problem-421
   参考：https://www.cxyxiaowu.com/298.html
  代码：
  class Solution {
      public int findMaximumXOR(int[] nums) {
          int mask = 0;
          // ans = a ^ b
          int ans = 0;
          int cnt = 31;
          while (cnt >= 0) {
              mask += 1 << cnt;
              HashSet<Integer> set = new HashSet<>();
              for (int num : nums) {
                  set.add(num & mask);
              }
              ans += 1 << cnt;
              boolean flag = false;
              for (int num : set) {
                  if (set.contains(num ^ ans)) {
                      flag = true;
                      break;
                  }
              }
              if (!flag) {
                  ans -= 1 << cnt;
              }            
              --cnt;
          }
          return ans;
      }
  }

  
2.2.动态规划
2.2.1.0到n的每个数中二进制表示的1的位数O(n)计算得到（[338] Counting Bits）
  代码：
  class Solution {
      public int[] countBits(int num) {
          int[] dp = new int[num + 1];
          dp[0] = 0;
          if (num >= 1) {
              dp[1] = 1;
              for (int i = 2; i <= num; ++i) {
                  dp[i] = dp[i >> 1] + (i&1);
              }
          }
          return dp;
      }
  }
  
2.3.位运算与字符串（leetcode [318] Maximum Product of Word Lengths） 
  代码：
  class Solution {
      public int maxProduct(String[] words) {
          if (words == null || words.length < 1) {
              return 0;
          }
          int ans = 0;
          // 用int的每一位代表对应的26个字母
          // 用两个数的与值是否为0来判断两个字符串是否有相同字母
          int[] word2bit = new int[words.length];
          for (int i = 0; i < words.length; ++i) {
              for (int j = 0; j < words[i].length(); ++j) {
                  word2bit[i] |= 1 << (words[i].charAt(j) - 'a');
              }
          }
          for (int i = 0; i < word2bit.length; ++i) {
              for (int j = i + 1; j < word2bit.length; ++j) {
                  if ((word2bit[i] & word2bit[j]) == 0) {
                      ans = Math.max(ans, words[i].length() * words[j].length());
                  }
              }
          }
          return ans;
      }
  }
变体，从字符串数组中选出所有出现字母只有一次的拼接字符串的最大长度（leetcode [1239] Maximum Length of a Concatenated String with Unique Characters）
  代码：
  class Solution {

      private List<String> arr;
      private int ans = 0;

      public void dfs (int index, int len, int[] pre) {
          if (index >= arr.size()) {
              ans = Math.max(ans, len);
              return;
          }
          int[] tmp1 = Arrays.copyOfRange(pre, 0, 32);
          int[] tmp2 = Arrays.copyOfRange(pre, 0, 32);
          dfs(index+1, len, tmp1);
          for (char c : arr.get(index).toCharArray()) {
              int i = c - 'a';
              if (tmp2[i] == 1) {
                  return;
              }
              tmp2[i] = 1;
          }
          dfs(index+1, len+arr.get(index).length(), tmp2);
      }

      public int maxLength(List<String> arr) {
          if (arr == null || arr.size() < 1) {
              return 0;
          }
          this.arr = arr;
          dfs(0, 0, new int[32]);
          return ans;
      }
  }

