1.快速幂
参考：https://oi-wiki.org/math/quick-pow/
参考：https://www.jianshu.com/p/898b251bec3d
  long long binpow(long long a, long long b) {
    if (b == 0) return 1;
    long long res = binpow(a, b / 2);
    if (b % 2)
      return res * res * a;
    else
      return res * res;
  }
1.1.Pow(x, n)计算（leetcode [50] Pow(x, n)）
  代码：
  class Solution {

      public double dfs (double x, int n) {
          if (n == 0) {
              return 1.0;
          }
          double ret = dfs(x, n/2);
          return n%2==0 ? ret * ret : ret*ret*x;
      }

      public double myPow(double x, int n) {
          boolean flag = true;
          if (n < 0) {
              flag = false;
              n = -n;
          }
          double ans = dfs(x, n);
          return flag ? ans : 1.0/ans;
      }
  }
1.2.快速幂取模（leetcode [372] Super Pow）
  a^b mod c = (a mod c)^b mod c；
  思路：https://www.cnblogs.com/grandyang/p/5651982.html
  代码：
  class Solution {

      public long dfs (long a, int n) {
          a = a % 1337;
          if (n == 0) {
              return 1;
          }
          long ret = dfs(a, n/2) % 1337;
          return n%2==0 ? (ret * ret) % 1337 : (ret * ret * a) % 1337;
      }

      public int superPow(int a, int[] b) {
          long ans = 1;
          for (int bb : b) {
              ans = dfs(ans, 10) * dfs(a, bb) % 1337;
          }
          return (int)(ans % 1337);
      }
  }
变体，阿里2020笔试(快速幂结合排列组合公式)
  参考：https://www.nowcoder.com/discuss/389635?type=1
  参考：https://blog.csdn.net/bigtiao097/article/details/77242624
  
2.
2.1.1.排列、组合、二项式定理
参考1：https://oi-wiki.org/math/combination/
参考2：https://www.cnblogs.com/1024th/p/10623541.html
不相邻的排列：https://www.zhihu.com/question/25820012/answer/31518429
圆排列：https://zhidao.baidu.com/question/46008817.html

